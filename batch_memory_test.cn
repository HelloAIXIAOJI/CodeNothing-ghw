using lib <io>;
using ns std;

// 🚀 CodeNothing v0.6.10 批量内存操作测试
// 测试循环中的内存操作优化，减少锁获取次数

fn main(): int {
    std::println("🧮 批量内存操作测试开始");

    // 测试1: 简单循环中的变量分配和读写
    std::println("测试1: 循环中的变量操作");
    sum : int = 0;
    i : int = 1;
    while (i <= 100) {
        temp : int = i * 2;  // 分配临时变量
        sum = sum + temp;    // 读写操作
        i = i + 1;
    };
    std::println("循环计算结果: " + sum);

    // 测试2: 嵌套循环中的内存操作

    std::println("测试2: 嵌套循环内存操作");
    matrix_sum : int = 0;
    i2 : int = 1;
    while (i2 <= 1) {
        j : int = 1;
        std::println("外层循环:"+i2);
        while (j <= 1) {
            std::println("内层循环:"+j);
            cell_value : int = i2 * j;  // 内层循环分配
            matrix_sum = matrix_sum + cell_value;  // 累加
            j = j + 1;
            std::println("内层循环:"+j);
        };
        i2 = i2 + 1;
    };
    std::println("矩阵计算结果: " + matrix_sum);

    // 测试3: 数组操作中的批量内存处理
    std::println("测试3: 数组批量操作");
    arr : array<int> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    processed_sum : int = 0;
    i3 : int = 0;
    while (i3 < 10) {
        element : int = arr[i3];      // 数组读取
        doubled : int = element * 2;  // 临时计算
        processed_sum = processed_sum + doubled;  // 累加
        i3 = i3 + 1;
    };
    std::println("数组处理结果: " + processed_sum);

    // 测试4: 复杂表达式中的内存操作
    std::println("测试4: 复杂表达式内存优化");
    complex_result : int = 0;
    i4 : int = 1;
    while (i4 <= 50) {
        a : int = i4;
        b : int = i4 + 1;
        c : int = i4 + 2;
        temp_result : int = (a * b + c) / 2;  // 复杂计算
        complex_result = complex_result + temp_result;
        i4 = i4 + 1;
    };
    std::println("复杂计算结果: " + complex_result);

    // 测试5: 条件语句中的内存操作
    std::println("测试5: 条件分支内存优化");
    conditional_sum : int = 0;
    i5 : int = 1;
    while (i5 <= 100) {
        if (i5 % 2 == 0) {
            even_value : int = i5 * 3;  // 偶数处理
            conditional_sum = conditional_sum + even_value;
        } else {
            odd_value : int = i5 * 2;   // 奇数处理
            conditional_sum = conditional_sum + odd_value;
        };
        i5 = i5 + 1;
    };
    std::println("条件计算结果: " + conditional_sum);

    std::println("🎉 批量内存操作测试完成！");

    return 0;
};
