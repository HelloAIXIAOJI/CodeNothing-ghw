// CodeNothing v0.7.2 位运算符高级测试
using lib <io>;
using ns std;

fn main(): int {
    std::println("=== CodeNothing v0.7.2 位运算符高级测试 ===");
    
    // 测试1: 长整型位运算
    std::println("=== 测试1: 长整型位运算 ===");
    long_a : long = 123456789;
    long_b : long = 987654321;
    
    std::println("long_a = " + long_a);
    std::println("long_b = " + long_b);
    
    long_and : long = long_a & long_b;
    std::println("long_a & long_b = " + long_and);
    
    long_or : long = long_a | long_b;
    std::println("long_a | long_b = " + long_or);
    
    long_xor : long = long_a ^ long_b;
    std::println("long_a ^ long_b = " + long_xor);
    
    // 测试2: 混合类型位运算
    std::println("=== 测试2: 混合类型位运算 ===");
    int_val : int = 255;
    long_val : long = 65535;
    
    mixed_and : long = int_val & long_val;
    std::println("int & long = " + mixed_and);
    
    mixed_or : long = int_val | long_val;
    std::println("int | long = " + mixed_or);
    
    // 测试3: 移位运算边界测试
    std::println("=== 测试3: 移位运算边界测试 ===");
    test_val : int = 1;
    
    shift_1 : int = test_val << 1;
    std::println("1 << 1 = " + shift_1);
    
    shift_8 : int = test_val << 8;
    std::println("1 << 8 = " + shift_8);
    
    shift_16 : int = test_val << 16;
    std::println("1 << 16 = " + shift_16);
    
    // 测试4: 位运算优先级
    std::println("=== 测试4: 位运算优先级 ===");
    a : int = 8;
    b : int = 4;
    c : int = 2;
    
    // 测试 & 和 | 的优先级
    result1 : int = a | b & c;  // 应该是 a | (b & c) = 8 | 0 = 8
    std::println("8 | 4 & 2 = " + result1 + " (应该是 8)");
    
    // 测试 ^ 和 & 的优先级
    result2 : int = a ^ b & c;  // 应该是 a ^ (b & c) = 8 ^ 0 = 8
    std::println("8 ^ 4 & 2 = " + result2 + " (应该是 8)");
    
    // 测试移位和算术运算的优先级
    result3 : int = a + b << 1;  // 应该是 (a + b) << 1 = 12 << 1 = 24
    std::println("8 + 4 << 1 = " + result3 + " (应该是 24)");
    
    std::println("位运算符高级测试完成!");
    return 0;
};
