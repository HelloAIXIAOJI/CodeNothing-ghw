// For循环JIT编译测试程序
using lib <io>;
using ns std;

fn main() : int {
    std::println("🔥 For循环JIT编译测试开始");

    // 测试1: 简单的For循环热点检测
    std::println("\n=== 测试1: 简单For循环热点检测 ===");
    for (i : 1..121) {  // 120次迭代，超过JIT阈值(100)
        temp : int = i * 2;
    };
    std::println("✅ 简单For循环完成");

    // 测试2: 带变量操作的For循环
    std::println("\n=== 测试2: 带变量操作的For循环 ===");
    sum : int = 0;
    for (j : 1..111) {  // 110次迭代
        sum = sum + j;
    };
    std::println("✅ 累加For循环完成，sum = " + sum);

    // 测试3: 嵌套For循环热点检测
    std::println("\n=== 测试3: 嵌套For循环热点检测 ===");
    product : int = 1;
    for (x : 1..16) {  // 外层15次
        for (y : 1..11) {  // 内层10次，总共150次
            product = (product + x * y) % 1000;
        };
    };
    std::println("✅ 嵌套For循环完成，product = " + product);

    // 测试4: 复杂表达式的For循环
    std::println("\n=== 测试4: 复杂表达式For循环 ===");
    result : int = 0;
    for (k : 1..101) {  // 100次迭代，刚好达到阈值
        result = result + k * k - k / 2;
    };
    std::println("✅ 复杂表达式For循环完成，result = " + result);

    // 测试5: 多个独立的For循环热点
    std::println("\n=== 测试5: 多个独立For循环热点 ===");
    count1 : int = 0;
    for (a : 1..106) {  // 105次迭代
        count1 = count1 + 1;
    };

    count2 : int = 0;
    for (b : 1..116) {  // 115次迭代
        count2 = count2 + 2;
    };
    std::println("✅ 多个独立For循环完成，count1 = " + count1 + ", count2 = " + count2);

    // 测试6: 带复合赋值的For循环
    std::println("\n=== 测试6: 带复合赋值的For循环 ===");
    value : int = 10;
    for (m : 1..109) {  // 108次迭代
        value = value * 2;
        value = value % 1000000;
    };
    std::println("✅ 复合赋值For循环完成，value = " + value);

    std::println("\n🎉 所有For循环JIT编译测试完成！");
    std::println("请查看JIT性能统计报告中的循环热点信息");

    return 0;
};
