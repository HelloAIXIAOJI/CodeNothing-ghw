// CodeNothing v0.7.2 位运算符测试
using lib <io>;
using ns std;

fn main(): int {
    std::println("=== CodeNothing v0.7.2 位运算符测试 ===");

    // 测试1: 基本位运算
    std::println("=== 测试1: 基本位运算 ===");
    a : int = 12;  // 1100 (二进制)
    b : int = 10;  // 1010 (二进制)

    std::println("a = " + a + " (1100 二进制)");
    std::println("b = " + b + " (1010 二进制)");

    // 按位与
    and_result : int = a & b;  // 1000 = 8
    std::println("a & b = " + and_result + " (应该是 8)");

    // 按位或
    or_result : int = a | b;   // 1110 = 14
    std::println("a | b = " + or_result + " (应该是 14)");

    // 按位异或
    xor_result : int = a ^ b;  // 0110 = 6
    std::println("a ^ b = " + xor_result + " (应该是 6)");

    // 测试2: 移位运算
    std::println("=== 测试2: 移位运算 ===");
    x : int = 5;  // 101 (二进制)
    std::println("x = " + x + " (101 二进制)");

    // 左移
    left_shift : int = x << 2;  // 10100 = 20
    std::println("x << 2 = " + left_shift + " (应该是 20)");

    // 右移
    right_shift : int = x >> 1; // 10 = 2
    std::println("x >> 1 = " + right_shift + " (应该是 2)");

    // 测试3: 复杂表达式
    std::println("=== 测试3: 复杂表达式 ===");
    complex : int = (a & b) | (x << 1);  // 8 | 10 = 10
    std::println("(a & b) | (x << 1) = " + complex + " (应该是 10)");

    complex2 : int = (a ^ b) & (x >> 1); // 6 & 2 = 2
    std::println("(a ^ b) & (x >> 1) = " + complex2 + " (应该是 2)");

    // 测试4: Auto类型推断与位运算
    std::println("=== 测试4: Auto类型推断与位运算 ===");
    auto_a : Auto = 15;
    auto_b : Auto = 7;
    auto_result : Auto = auto_a & auto_b;
    std::println("Auto变量位运算: " + auto_a + " & " + auto_b + " = " + auto_result + " (应该是 7)");

    std::println("位运算符测试完成!");
    return 0;
};
