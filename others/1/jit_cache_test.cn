// CodeNothing v0.7.7 JIT编译缓存系统测试
using lib <io>;

fn test_cache_hit_simple_loop(): int {
    print("🗄️ 测试简单循环缓存命中");
    
    sum : int = 0;
    
    // 第一次执行 - 应该编译并缓存
    for (i : 1..50) {
        sum = sum + i;
    };
    
    print("第一次执行结果: " + sum);
    
    // 第二次执行相同模式 - 应该命中缓存
    sum2 : int = 0;
    for (j : 1..50) {
        sum2 = sum2 + j;
    };
    
    print("第二次执行结果: " + sum2);
    return sum + sum2;
};

fn test_cache_hit_while_loop(): int {
    print("🗄️ 测试While循环缓存命中");
    
    result : int = 0;
    
    // 第一次执行 - 应该编译并缓存
    i : int = 0;
    while (i < 30) {
        result = result + i * 2;
        i = i + 1;
    };
    
    print("第一次While循环结果: " + result);
    
    // 第二次执行相同模式 - 应该命中缓存
    result2 : int = 0;
    k : int = 0;
    while (k < 30) {
        result2 = result2 + k * 2;
        k = k + 1;
    };
    
    print("第二次While循环结果: " + result2);
    return result + result2;
};

fn test_cache_miss_different_complexity(): int {
    print("🗄️ 测试不同复杂度循环（缓存未命中）");
    
    // 简单循环
    simple_sum : int = 0;
    for (i : 1..20) {
        simple_sum = simple_sum + i;
    };
    
    print("简单循环结果: " + simple_sum);
    
    // 复杂循环 - 不同的模式，不应该命中缓存
    complex_sum : int = 0;
    for (j : 1..20) {
        if (j % 2 == 0) {
            complex_sum = complex_sum + j * 3;
        } else {
            complex_sum = complex_sum + j;
        };
    };
    
    print("复杂循环结果: " + complex_sum);
    return simple_sum + complex_sum;
};

fn test_cache_with_optimization_strategies(): int {
    print("🗄️ 测试带优化策略的缓存");
    
    // 适合强度削减的循环
    strength_result : int = 0;
    for (i : 1..25) {
        strength_result = strength_result + i * 5;  // 乘法优化
    };
    
    print("强度削减循环结果: " + strength_result);
    
    // 相同模式的循环 - 应该命中缓存
    strength_result2 : int = 0;
    for (j : 1..25) {
        strength_result2 = strength_result2 + j * 5;
    };
    
    print("第二次强度削减循环结果: " + strength_result2);
    
    // 适合循环展开的简单循环
    unroll_result : int = 0;
    for (k : 1..15) {
        unroll_result = unroll_result + k;
    };
    
    print("循环展开测试结果: " + unroll_result);
    
    return strength_result + strength_result2 + unroll_result;
};

fn test_repeated_execution_for_cache_stats(): int {
    print("🗄️ 测试重复执行以验证缓存统计");
    
    total : int = 0;
    
    // 重复执行相同模式的循环多次
    for (round : 1..5) {
        round_sum : int = 0;
        for (i : 1..10) {
            round_sum = round_sum + i;
        };
        total = total + round_sum;
        print("第" + round + "轮执行结果: " + round_sum);
    };
    
    print("总计结果: " + total);
    return total;
};

fn main(): int {
    print("=== CodeNothing v0.7.7 JIT编译缓存系统测试 ===");
    print("");
    
    result1 : int = test_cache_hit_simple_loop();
    print("");
    
    result2 : int = test_cache_hit_while_loop();
    print("");
    
    result3 : int = test_cache_miss_different_complexity();
    print("");
    
    result4 : int = test_cache_with_optimization_strategies();
    print("");
    
    result5 : int = test_repeated_execution_for_cache_stats();
    print("");
    
    total : int = result1 + result2 + result3 + result4 + result5;
    
    print("=== JIT缓存系统测试完成 ===");
    print("总计结果: " + total);
    print("🎉 JIT编译缓存系统验证完成！");
    print("请查看JIT调试输出以验证缓存命中和统计信息。");
    
    return total;
};
