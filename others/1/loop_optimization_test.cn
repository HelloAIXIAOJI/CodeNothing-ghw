// CodeNothing v0.7.7 循环优化策略测试
using lib <io>;

fn test_loop_unrolling(): int {
    print("🔧 测试循环展开优化");
    
    sum : int = 0;
    
    // 简单循环，适合展开
    for (i : 1..20) {
        sum = sum + i;
    };
    
    print("循环展开测试结果: " + sum);
    return sum;
};

fn test_strength_reduction(): int {
    print("🔧 测试强度削减优化");
    
    result : int = 0;
    
    // 包含乘法的循环，适合强度削减
    for (i : 1..50) {
        result = result + i * 3;  // 乘法应该被优化为加法
    };
    
    print("强度削减测试结果: " + result);
    return result;
};

fn test_invariant_hoisting(): int {
    print("🔧 测试循环不变量提升优化");
    
    sum : int = 0;
    constant_value : int = 42;  // 循环不变量
    
    for (i : 1..30) {
        sum = sum + constant_value;  // 不变量应该被提升
    };
    
    print("不变量提升测试结果: " + sum);
    return sum;
};

fn test_complex_loop(): int {
    print("🔧 测试复杂循环（不适合某些优化）");
    
    total : int = 0;
    
    // 复杂循环，包含条件分支
    for (i : 1..25) {
        if (i % 2 == 0) {
            total = total + i * 2;
        } else {
            total = total + i;
        };
    };
    
    print("复杂循环测试结果: " + total);
    return total;
};

fn test_nested_loops(): int {
    print("🔧 测试嵌套循环（不适合展开）");
    
    result : int = 0;
    
    // 嵌套循环，不适合展开
    for (i : 1..8) {
        for (j : 1..8) {
            result = result + i * j;
        };
    };
    
    print("嵌套循环测试结果: " + result);
    return result;
};

fn test_multiplication_heavy_loop(): int {
    print("🔧 测试乘法密集循环（适合强度削减）");
    
    value : int = 0;
    
    for (i : 1..40) {
        value = value + i * 5 + i * 2;  // 多个乘法操作
    };
    
    print("乘法密集循环测试结果: " + value);
    return value;
};

fn main(): int {
    print("=== CodeNothing v0.7.7 循环优化策略测试 ===");
    print("");
    
    result1 : int = test_loop_unrolling();
    result2 : int = test_strength_reduction();
    result3 : int = test_invariant_hoisting();
    result4 : int = test_complex_loop();
    result5 : int = test_nested_loops();
    result6 : int = test_multiplication_heavy_loop();
    
    total : int = result1 + result2 + result3 + result4 + result5 + result6;
    
    print("");
    print("=== 优化策略测试完成 ===");
    print("总计结果: " + total);
    print("🎉 循环优化策略验证完成！");
    print("请查看JIT调试输出以验证优化策略的应用。");
    
    return total;
};
