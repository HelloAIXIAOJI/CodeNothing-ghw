using lib <io>;
using ns std;

// CodeNothing 循环密集型性能测试
// 测试各种循环的执行效率

fn nestedLoops(n : int) : int {
    sum : int = 0;
    i : int = 1;

    while (i <= n) {
        j : int = 1;
        while (j <= n) {
            sum = sum + (i * j);
            j = j + 1;
        };
        i = i + 1;
    };

    return sum;
};

fn forLoopSum(n : int) : int {
    sum : int = 0;

    for (i : 1..n) {
        sum = sum + i;
    };

    return sum;
};

fn whileLoopSum(n : int) : int {
    sum : int = 0;
    i : int = 1;

    while (i <= n) {
        sum = sum + i;
        i = i + 1;
    };

    return sum;
};

fn arrayIteration(size : int) : int {
    // 简化版本：直接计算1到size的和
    sum : int = 0;
    i : int = 0;

    while (i < size) {
        sum = sum + i;
        i = i + 1;
    };

    return sum;
};

fn complexLoopCalculation(n : int) : int {
    result : int = 0;

    for (i : 1..n) {
        temp : int = 0;
        j : int = 1;

        while (j <= i) {
            if (j % 2 == 0) {
                temp = temp + j * j;
            } else {
                temp = temp + j;
            };
            j = j + 1;
        };

        result = result + temp;
    };

    return result;
};

fn main() : int {
    std::println("=== CodeNothing 循环密集型性能测试 ===");

    // 测试参数
    n : int = 100;
    arraySize : int = 200;

    std::println("测试参数:");
    std::println("n = " + n);
    std::println("arraySize = " + arraySize);
    std::println("");

    // 1. 嵌套循环测试
    std::println("1. 嵌套循环测试:");
    nestedResult : int = nestedLoops(n);
    std::println("nestedLoops(" + n + ") = " + nestedResult);
    std::println("");

    // 2. for循环测试
    std::println("2. for循环测试:");
    forResult : int = forLoopSum(n);
    std::println("forLoopSum(" + n + ") = " + forResult);
    std::println("");

    // 3. while循环测试
    std::println("3. while循环测试:");
    whileResult : int = whileLoopSum(n);
    std::println("whileLoopSum(" + n + ") = " + whileResult);
    std::println("");

    // 验证for和while循环结果一致
    if (forResult == whileResult) {
        std::println("✓ for和while循环结果一致");
    } else {
        std::println("✗ for和while循环结果不一致");
    };
    std::println("");

    // 4. 数组迭代测试
    std::println("4. 数组迭代测试:");
    arrayResult : int = arrayIteration(arraySize);
    std::println("arrayIteration(" + arraySize + ") = " + arrayResult);
    std::println("");

    // 5. 复杂循环计算测试
    std::println("5. 复杂循环计算测试:");
    complexResult : int = complexLoopCalculation(n);
    std::println("complexLoopCalculation(" + n + ") = " + complexResult);
    std::println("");

    std::println("=== 循环密集型测试完成 ===");

    return 0;
};
