using lib <io>;
using ns std;

// CodeNothing 快速排序性能测试
// 对5000个随机数进行排序

fn quickSort(arr : []int, low : int, high : int) : void {
    if (low < high) {
        pi : int = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    };
};

fn partition(arr : []int, low : int, high : int) : int {
    pivot : int = arr[high];
    i : int = low - 1;
    j : int = low;
    
    while (j < high) {
        if (arr[j] <= pivot) {
            i = i + 1;
            swap(arr, i, j);
        };
        j = j + 1;
    };
    
    swap(arr, i + 1, high);
    return i + 1;
};

fn swap(arr : []int, i : int, j : int) : void {
    temp : int = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
};

fn generateRandomArray(size : int) : []int {
    arr : []int = [];
    i : int = 0;
    
    while (i < size) {
        // 简单的伪随机数生成
        value : int = (i * 17 + 23) % 1000;
        arr[i] = value;
        i = i + 1;
    };
    
    return arr;
};

fn isSorted(arr : []int) : bool {
    i : int = 1;
    while (i < arr.length()) {
        if (arr[i - 1] > arr[i]) {
            return false;
        };
        i = i + 1;
    };
    return true;
};

fn main() : int {
    std::println("=== CodeNothing 快速排序性能测试 ===");
    
    // 测试参数
    size : int = 5000;
    
    std::println("生成 " + size + " 个随机数进行排序");
    
    // 生成随机数组
    arr : []int = generateRandomArray(size);
    std::println("数组生成完成");
    
    // 显示前10个元素
    std::println("排序前前10个元素:");
    i : int = 0;
    while (i < 10 && i < arr.length()) {
        std::println("arr[" + i + "] = " + arr[i]);
        i = i + 1;
    };
    
    // 执行快速排序
    std::println("");
    std::println("开始快速排序...");
    quickSort(arr, 0, arr.length() - 1);
    std::println("排序完成");
    
    // 显示排序后前10个元素
    std::println("");
    std::println("排序后前10个元素:");
    i = 0;
    while (i < 10 && i < arr.length()) {
        std::println("arr[" + i + "] = " + arr[i]);
        i = i + 1;
    };
    
    // 验证排序结果
    std::println("");
    if (isSorted(arr)) {
        std::println("✓ 排序验证通过");
    } else {
        std::println("✗ 排序验证失败");
    };
    
    return 0;
};
