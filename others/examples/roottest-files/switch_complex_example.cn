using lib <io>;

// 复杂的 Switch 语句示例程序
// 展示各种 Switch 使用场景和特性

// 命名空间定义
ns calculator {
    fn add(a : int, b : int) : int {
        return a + b;
    };
    
    fn multiply(a : int, b : int) : int {
        return a * b;
    };
    
    fn divide(a : int, b : int) : int {
        if (b != 0) {
            return a / b;
        } else {
            return 0;
        };
    };
};

// 常量定义
const MENU_ADD : int = 1;
const MENU_SUBTRACT : int = 2;
const MENU_MULTIPLY : int = 3;
const MENU_DIVIDE : int = 4;
const MENU_EXIT : int = 0;

const STATUS_SUCCESS : string = "success";
const STATUS_ERROR : string = "error";
const STATUS_WARNING : string = "warning";

fn processCalculatorMenu(choice : int, a : int, b : int) : int {
    using ns calculator;
    
    std::println("处理计算器菜单选择");
    
    switch (choice) {
        case 1 {
            result : int = add(a, b);
            std::println("加法结果");
            break;
        };
        case 2 {
            result : int = a - b;
            std::println("减法结果");
            break;
        };
        case 3 {
            result : int = multiply(a, b);
            std::println("乘法结果");
            break;
        };
        case 4 {
            if (b == 0) {
                std::println("错误: 除数不能为零!");
                return -1;
            } else {
                result : int = divide(a, b);
                std::println("除法结果");
            };
            break;
        };
        case 0 {
            std::println("退出计算器");
            return 0;
        };
        default {
            std::println("无效的菜单选择");
            return -1;
        };
    };
    
    return 1;
};

fn processStatusMessage(status : string) : void {
    std::println("处理状态消息");
    
    switch (status) {
        case "success" {
            std::println("操作成功完成");
            std::println("系统状态正常");
            break;
        };
        case "warning" {
            std::println("警告: 检测到潜在问题");
            std::println("建议检查系统配置");
            break;
        };
        case "error" {
            std::println("错误: 操作失败");
            std::println("请联系系统管理员");
            break;
        };
        case "info" {
            std::println("信息: 这是一个通知消息");
            break;
        };
        case "debug" {
            std::println("调试: 系统调试信息");
            break;
        };
        default {
            std::println("未知状态");
            std::println("请检查状态码是否正确");
        };
    };
};

fn demonstrateFallThrough(value : int) : void {
    std::println("演示 Fall-through 行为");
    
    switch (value) {
        case 1 {
            std::println("执行 Case 1");
        };
        case 2 {
            std::println("执行 Case 2 (可能来自 fall-through)");
        };
        case 3 {
            std::println("执行 Case 3 (可能来自 fall-through)");
            break;
        };
        case 4 {
            std::println("Case 4: 这个不应该被执行");
            break;
        };
        default {
            std::println("Default: 没有匹配的 case");
        };
    };
};

fn processGradeLevel(grade : int) : string {
    std::println("处理年级等级");
    
    result : string = "";
    
    switch (grade) {
        case 90 {
            result = "A+";
            break;
        };
        case 85 {
            result = "A";
            break;
        };
        case 80 {
            result = "A-";
            break;
        };
        case 75 {
            result = "B+";
            break;
        };
        case 70 {
            result = "B";
            break;
        };
        case 65 {
            result = "B-";
            break;
        };
        case 60 {
            result = "C";
            break;
        };
        default {
            if (grade > 90) {
                result = "A++";
            } else if (grade < 60) {
                result = "F";
            } else {
                result = "未定义等级";
            };
        };
    };
    
    std::println("等级结果");
    return result;
};

fn processWeekday(day : int) : void {
    std::println("处理星期几");
    
    switch (day) {
        case 1 {
            std::println("星期一 - 新的一周开始!");
            std::println("今天要做的事:");
            std::println("- 检查邮件");
            std::println("- 制定周计划");
            break;
        };
        case 2 {
            std::println("星期二 - 继续努力工作");
        };
        case 3 {
            std::println("星期三 - 周中检查");
        };
        case 4 {
            std::println("星期四 - 准备周末");
        };
        case 5 {
            std::println("星期五 - 感谢上帝今天是星期五!");
            std::println("周末计划:");
            std::println("- 休息放松");
            std::println("- 与家人朋友聚会");
            break;
        };
        case 6 {
            std::println("星期六 - 周末第一天");
        };
        case 7 {
            std::println("星期日 - 周末第二天");
            std::println("准备下周工作");
            break;
        };
        default {
            std::println("无效的星期数");
            std::println("请输入 1-7 之间的数字");
        };
    };
};

fn nestedSwitchExample(category : int, subcategory : int) : void {
    std::println("嵌套 Switch 示例");
    
    switch (category) {
        case 1 {
            std::println("处理类别 1: 电子产品");
            
            switch (subcategory) {
                case 1 {
                    std::println("子类别: 手机");
                    break;
                };
                case 2 {
                    std::println("子类别: 电脑");
                    break;
                };
                case 3 {
                    std::println("子类别: 平板");
                    break;
                };
                default {
                    std::println("未知的电子产品子类别");
                };
            };
            break;
        };
        case 2 {
            std::println("处理类别 2: 服装");
            
            switch (subcategory) {
                case 1 {
                    std::println("子类别: 上衣");
                    break;
                };
                case 2 {
                    std::println("子类别: 裤子");
                    break;
                };
                case 3 {
                    std::println("子类别: 鞋子");
                    break;
                };
                default {
                    std::println("未知的服装子类别");
                };
            };
            break;
        };
        case 3 {
            std::println("处理类别 3: 食品");
            
            switch (subcategory) {
                case 1 {
                    std::println("子类别: 水果");
                    break;
                };
                case 2 {
                    std::println("子类别: 蔬菜");
                    break;
                };
                case 3 {
                    std::println("子类别: 肉类");
                    break;
                };
                default {
                    std::println("未知的食品子类别");
                };
            };
            break;
        };
        default {
            std::println("未知的主类别");
        };
    };
};

fn main() : int {
    std::println("=== CodeNothing Switch 语句复杂示例 ===");
    std::println("");
    
    // 示例 1: 计算器菜单处理
    std::println("1. 计算器菜单示例:");
    processCalculatorMenu(1, 10, 5);
    processCalculatorMenu(3, 7, 3);
    processCalculatorMenu(4, 20, 4);
    processCalculatorMenu(99, 1, 1);
    std::println("");
    
    // 示例 2: 状态消息处理
    std::println("2. 状态消息处理示例:");
    processStatusMessage("success");
    processStatusMessage("warning");
    processStatusMessage("error");
    processStatusMessage("info");
    processStatusMessage("unknown");
    std::println("");
    
    // 示例 3: Fall-through 演示
    std::println("3. Fall-through 行为演示:");
    demonstrateFallThrough(1); // 会执行 1, 2, 3
    std::println("---");
    demonstrateFallThrough(2); // 会执行 2, 3
    std::println("---");
    demonstrateFallThrough(4); // 只执行 4
    std::println("---");
    demonstrateFallThrough(5); // 执行 default
    std::println("");
    
    // 示例 4: 成绩等级处理
    std::println("4. 成绩等级处理示例:");
    processGradeLevel(95);
    processGradeLevel(85);
    processGradeLevel(75);
    processGradeLevel(55);
    std::println("");
    
    // 示例 5: 星期几处理（包含 fall-through）
    std::println("5. 星期几处理示例:");
    processWeekday(1);
    std::println("---");
    processWeekday(3); // fall-through 示例
    std::println("---");
    processWeekday(5);
    std::println("---");
    processWeekday(8); // 无效输入
    std::println("");
    
    // 示例 6: 嵌套 Switch
    std::println("6. 嵌套 Switch 示例:");
    nestedSwitchExample(1, 2); // 电子产品 -> 电脑
    nestedSwitchExample(2, 1); // 服装 -> 上衣
    nestedSwitchExample(3, 4); // 食品 -> 未知子类别
    nestedSwitchExample(4, 1); // 未知主类别
    std::println("");
    
    // 示例 7: 在循环中使用 Switch
    std::println("7. 循环中的 Switch 示例:");
    for (i : 1..4) {
        std::println("循环迭代");
        
        switch (i) {
            case 1 {
                std::println("  第一次迭代");
                break;
            };
            case 2 {
                std::println("  第二次迭代");
                break;
            };
            case 3 {
                std::println("  第三次迭代");
                continue;
            };
            case 4 {
                std::println("  第四次迭代");
                break;
            };
            default {
                std::println("  其他迭代");
            };
        };
        
        std::println("  循环继续...");
    };
    std::println("");
    
    // 示例 8: 布尔值 Switch
    std::println("8. 布尔值 Switch 示例:");
    isActive : bool = true;
    
    switch (isActive) {
        case true {
            std::println("系统处于活动状态");
            std::println("所有功能可用");
            break;
        };
        case false {
            std::println("系统处于非活动状态");
            std::println("部分功能受限");
            break;
        };
    };
    
    std::println("");
    std::println("=== 复杂示例演示完成 ===");
    
    return 0;
};