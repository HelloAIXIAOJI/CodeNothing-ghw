using lib <io>;

// 简单的模式匹配测试

fn testRangeMatching() : void {
    std::println("=== 范围匹配测试 ===");
    
    for (i : 1..15) {
        switch (i) {
            case 1..5 {
                std::println("小数字 (1-5)");
                break;
            };
            case 6..10 {
                std::println("中等数字 (6-10)");
                break;
            };
            case 11..15 {
                std::println("大数字 (11-15)");
                break;
            };
            default {
                std::println("超出范围");
            };
        };
    };
};

fn testGuardConditions() : void {
    std::println("=== Guard 条件测试 ===");
    
    for (i : 1..10) {
        switch (i) {
            case x if x % 2 == 0 {
                std::println("偶数");
                break;
            };
            case x if x % 3 == 0 {
                std::println("3的倍数");
                break;
            };
            case x if x > 7 {
                std::println("大于7");
                break;
            };
            default {
                std::println("其他情况");
            };
        };
    };
};

fn testMixedPatterns() : void {
    std::println("=== 混合模式测试 ===");
    
    for (i : 1..20) {
        switch (i) {
            case 1 {
                std::println("正好是1");
                break;
            };
            case 2..5 {
                std::println("范围2-5");
                break;
            };
            case x if x > 15 {
                std::println("大于15的数");
                break;
            };
            case 10 {
                std::println("正好是10");
                break;
            };
            default {
                std::println("其他数字");
            };
        };
    };
};

fn main() : int {
    std::println("Switch 模式匹配简单测试");
    std::println("");
    
    testRangeMatching();
    std::println("");
    
    testGuardConditions();
    std::println("");
    
    testMixedPatterns();
    std::println("");
    
    std::println("测试完成");
    return 0;
};