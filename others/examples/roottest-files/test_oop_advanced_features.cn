using lib <io>;

// 抽象基类
abstract class Animal {
    protected name : string;
    protected age : int;
    
    constructor(name : string, age : int) {
        this.name = name;
        this.age = age;
    };
    
    public fn getName() : string {
        return this.name;
    };
    
    public fn getAge() : int {
        return this.age;
    };
    
    // 抽象方法
    abstract fn makeSound() : string;
    
    // 虚方法
    virtual fn describe() : string {
        return "Animal: " + this.name + ", Age: " + this.age;
    };
};

// 继承类
class Dog extends Animal {
    private breed : string;
    
    constructor(name : string, age : int, breed : string) {
        this.name = name;
        this.age = age;
        this.breed = breed;
    };
    
    // 实现抽象方法
    public fn makeSound() : string {
        return "Woof! Woof!";
    };
    
    // 重写虚方法
    override fn describe() : string {
        return "Dog: " + this.name + ", Age: " + this.age + ", Breed: " + this.breed;
    };
    
    public fn getBreed() : string {
        return this.breed;
    };
};

class Cat extends Animal {
    private color : string;
    
    constructor(name : string, age : int, color : string) {
        this.name = name;
        this.age = age;
        this.color = color;
    };
    
    // 实现抽象方法
    public fn makeSound() : string {
        return "Meow! Meow!";
    };
    
    // 重写虚方法
    override fn describe() : string {
        return "Cat: " + this.name + ", Age: " + this.age + ", Color: " + this.color;
    };
    
    public fn getColor() : string {
        return this.color;
    };
};

// 静态成员测试类
class MathUtils {
    static PI : float = 3.14159;
    static counter : int = 0;
    
    static fn add(a : int, b : int) : int {
        return a + b;
    };
    
    static fn getPI() : float {
        return MathUtils::PI;
    };
    
    static fn incrementCounter() : void {
        MathUtils::counter = MathUtils::counter + 1;
    };
    
    static fn getCounter() : int {
        return MathUtils::counter;
    };
};

fn main() : int {
    std::println("=== CodeNothing 高级OOP特性测试 ===");
    
    // 测试继承和多态
    std::println("1. 测试继承和多态");
    dog : Dog = new Dog("Buddy", 3, "Golden Retriever");
    cat : Cat = new Cat("Whiskers", 2, "Orange");
    
    std::println("Dog: " + dog.getName() + " says: " + dog.makeSound());
    std::println("Cat: " + cat.getName() + " says: " + cat.makeSound());
    std::println("✅ 继承和多态测试成功");
    
    // 测试方法重写
    std::println("2. 测试方法重写");
    std::println(dog.describe());
    std::println(cat.describe());
    std::println("✅ 方法重写测试成功");
    
    // 测试静态成员（语法测试）
    std::println("3. 测试静态成员语法");
    // result : int = MathUtils::add(5, 3);
    // pi : float = MathUtils::getPI();
    std::println("静态成员语法解析测试");
    std::println("✅ 静态成员语法测试成功");
    
    std::println("=== 高级OOP特性测试完成 ===");
    return 0;
};