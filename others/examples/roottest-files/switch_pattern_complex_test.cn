using lib <io>;

// 复杂的模式匹配测试

fn testComplexRanges() : void {
    std::println("=== 复杂范围匹配测试 ===");
    
    // 测试浮点数范围
    std::println("分数处理: 85.5");
    switch (85.5) {
        case 90.0..100.0 {
            std::println("优秀 (A)");
            break;
        };
        case 80.0..89.9 {
            std::println("良好 (B)");
            break;
        };
        case 70.0..79.9 {
            std::println("中等 (C)");
            break;
        };
        case 60.0..69.9 {
            std::println("及格 (D)");
            break;
        };
        default {
            std::println("不及格 (F)");
        };
    };
    
    std::println("分数处理: 92.3");
    switch (92.3) {
        case 90.0..100.0 {
            std::println("优秀 (A)");
            break;
        };
        case 80.0..89.9 {
            std::println("良好 (B)");
            break;
        };
        case 70.0..79.9 {
            std::println("中等 (C)");
            break;
        };
        default {
            std::println("不及格 (F)");
        };
    };
    
    std::println("分数处理: 78.1");
    switch (78.1) {
        case 90.0..100.0 {
            std::println("优秀 (A)");
            break;
        };
        case 80.0..89.9 {
            std::println("良好 (B)");
            break;
        };
        case 70.0..79.9 {
            std::println("中等 (C)");
            break;
        };
        case 60.0..69.9 {
            std::println("及格 (D)");
            break;
        };
        default {
            std::println("不及格 (F)");
        };
    };
};

fn testAdvancedGuards() : void {
    std::println("=== 高级 Guard 条件测试 ===");
    
    for (num : 1..20) {
        switch (num) {
            case x if x % 15 == 0 {
                std::println("FizzBuzz");
                break;
            };
            case x if x % 3 == 0 {
                std::println("Fizz");
                break;
            };
            case x if x % 5 == 0 {
                std::println("Buzz");
                break;
            };
            case x if x > 15 {
                std::println("大数字");
                break;
            };
            case x if x < 5 {
                std::println("小数字");
                break;
            };
            default {
                std::println("普通数字");
            };
        };
    };
};

fn testStringPatterns() : void {
    std::println("=== 字符串模式测试 ===");
    
    // 测试字符串模式匹配
    std::println("测试字符串状态处理");
    
    status1 : string = "active";
    switch (status1) {
        case "active" {
            std::println("系统运行中");
            break;
        };
        case "inactive" {
            std::println("系统已停止");
            break;
        };
        default {
            std::println("未知状态");
        };
    };
    
    status2 : string = "error";
    switch (status2) {
        case "active" {
            std::println("系统运行中");
            break;
        };
        case "error" {
            std::println("系统错误");
            break;
        };
        default {
            std::println("未知状态");
        };
    };
};

fn testNestedSwitchWithPatterns() : void {
    std::println("=== 嵌套 Switch 模式测试 ===");
    
    for (category : 1..3) {
        for (value : 1..5) {
            switch (category) {
                case 1 {
                    std::println("类别1处理");
                    switch (value) {
                        case 1..2 {
                            std::println("  低值范围");
                            break;
                        };
                        case x if x > 3 {
                            std::println("  高值");
                            break;
                        };
                        default {
                            std::println("  中值");
                        };
                    };
                    break;
                };
                case 2 {
                    std::println("类别2处理");
                    switch (value) {
                        case x if x % 2 == 0 {
                            std::println("  偶数值");
                            break;
                        };
                        default {
                            std::println("  奇数值");
                        };
                    };
                    break;
                };
                default {
                    std::println("未知类别");
                };
            };
        };
    };
};

fn testFallThroughWithPatterns() : void {
    std::println("=== Fall-through 模式测试 ===");
    
    for (i : 1..8) {
        std::println("处理数字");
        
        switch (i) {
            case 1..2 {
                std::println("  小数字组");
                // 没有break，继续执行
            };
            case 3..4 {
                std::println("  中数字组");
                // 没有break，继续执行
            };
            case 5..6 {
                std::println("  大数字组");
                break;
            };
            case x if x > 6 {
                std::println("  超大数字");
                break;
            };
            default {
                std::println("  默认处理");
            };
        };
    };
};

fn main() : int {
    std::println("Switch 模式匹配复杂测试");
    std::println("");
    
    testComplexRanges();
    std::println("");
    
    testAdvancedGuards();
    std::println("");
    
    testStringPatterns();
    std::println("");
    
    testNestedSwitchWithPatterns();
    std::println("");
    
    testFallThroughWithPatterns();
    std::println("");
    
    std::println("复杂测试完成");
    return 0;
};