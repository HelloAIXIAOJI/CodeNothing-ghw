// 🚀 v0.6.3 内存密集型基准测试 - 测试简单类型快速路径优化
using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 v0.6.3 内存密集型基准测试开始");
    
    // 测试1: 大量简单类型变量分配（应该使用快速路径）
    std::println("测试1: 大量简单类型变量分配");
    
    i : int = 0;
    total_int : int = 0;
    while (i < 50000) {
        // 分配大量int类型变量（快速路径）
        value1 : int = i * 2;
        value2 : int = i + 100;
        value3 : int = value1 + value2;
        
        // 分配float类型变量（快速路径）
        float_val : float = 3.14;
        
        // 分配bool类型变量（快速路径）
        bool_val : bool = (i % 2 == 0);
        
        // 分配long类型变量（快速路径）
        long_val : long = i * 1000000;
        
        total_int = total_int + value3;
        i = i + 1;
    };
    
    std::println("✅ 完成50,000次简单类型分配");
    std::println("总和:", total_int);
    
    // 测试2: 混合类型分配（简单类型 + 复杂类型）
    std::println("测试2: 混合类型分配");
    
    j : int = 0;
    while (j < 10000) {
        // 简单类型（快速路径）
        simple_int : int = j;
        simple_float : float = 2.5;
        simple_bool : bool = (j % 3 == 0);
        
        // 复杂类型（安全路径）
        str_val : string = "test_string";
        
        j = j + 1;
    };
    
    std::println("✅ 完成10,000次混合类型分配");
    
    // 测试3: 大量计算操作（测试简单类型的性能）
    std::println("测试3: 大量计算操作");
    
    k : int = 0;
    result : int = 0;
    while (k < 100000) {
        // 大量简单类型计算
        temp1 : int = k * 2;
        temp2 : int = temp1 + 5;
        temp3 : int = temp2 * 3;
        temp4 : int = temp3 - k;
        
        result = result + temp4;
        k = k + 1;
    };
    
    std::println("✅ 完成100,000次计算操作");
    std::println("计算结果:", result);
    
    std::println("🎉 内存密集型基准测试完成！");
    
    return 0;
};
