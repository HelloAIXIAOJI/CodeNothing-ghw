// 🚀 CodeNothing v0.6.5 高级循环优化技术测试
// 验证break/continue控制流JIT支持与高级优化策略

using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 CodeNothing v0.6.5 高级循环优化技术测试");
    std::println("=====================================");
    
    // 📊 测试1：break控制流循环（适合控制流优化）
    std::println("🔄 测试1：break控制流循环");
    break_sum : int = 0;
    for (i : 1..201) {  // 200次迭代，但会提前break
        break_sum = break_sum + i;
        if (break_sum > 100) {
            break;  // 提前退出循环
        };
    };
    std::println("break控制流循环结果: " + break_sum);
    std::println("-------------------------------------");
    
    // 📊 测试2：continue控制流循环（适合控制流优化）
    std::println("⚡ 测试2：continue控制流循环");
    continue_sum : int = 0;
    for (i : 1..51) {  // 50次迭代，跳过偶数
        if (i % 2 == 0) {
            continue;  // 跳过偶数
        };
        continue_sum = continue_sum + i;
    };
    std::println("continue控制流循环结果: " + continue_sum);
    std::println("-------------------------------------");
    
    // 📊 测试3：循环不变量提升优化
    std::println("🎯 测试3：循环不变量提升优化");
    invariant_result : int = 0;
    constant_value : int = 42;  // 循环不变量
    for (i : 1..101) {  // 100次迭代
        temp : int = constant_value * 2;  // 循环不变量表达式
        invariant_result = invariant_result + temp + i;
    };
    std::println("循环不变量提升结果: " + invariant_result);
    std::println("-------------------------------------");
    
    // 📊 测试4：强度削减优化（乘法转加法）
    std::println("🔧 测试4：强度削减优化");
    strength_result : int = 0;
    for (i : 1..81) {  // 80次迭代
        square : int = i * i;  // 可以优化为递增加法
        strength_result = strength_result + square;
    };
    std::println("强度削减优化结果: " + strength_result);
    std::println("-------------------------------------");
    
    // 📊 测试5：复杂控制流循环（break + continue）
    std::println("🎨 测试5：复杂控制流循环");
    complex_sum : int = 0;
    count : int = 0;
    for (i : 1..151) {  // 150次迭代
        if (i % 3 == 0) {
            continue;  // 跳过3的倍数
        };
        complex_sum = complex_sum + i;
        count = count + 1;
        if (count >= 50) {
            break;  // 处理50个非3倍数后退出
        };
    };
    std::println("复杂控制流循环结果: " + complex_sum);
    std::println("处理的数字个数: " + count);
    std::println("-------------------------------------");
    
    // 📊 测试6：高复杂度算术循环（适合组合优化）
    std::println("🧮 测试6：高复杂度算术循环");
    arithmetic_sum : int = 0;
    multiplier : int = 1;
    for (i : 1..121) {  // 120次迭代
        step1 : int = i * 3;
        step2 : int = step1 + multiplier;
        step3 : int = step2 * 2;
        step4 : int = step3 - i;
        arithmetic_sum = arithmetic_sum + step4;
        multiplier = multiplier % 5 + 1;  // 循环乘数
    };
    std::println("高复杂度算术循环结果: " + arithmetic_sum);
    std::println("最终乘数: " + multiplier);
    std::println("-------------------------------------");
    
    // 📊 测试7：内存密集型循环（适合内存优化）
    std::println("💾 测试7：内存密集型循环");
    memory_result : int = 0;
    for (i : 1..91) {  // 90次迭代
        local1 : int = i;
        local2 : int = local1 * 2;
        local3 : int = local2 + 1;
        local4 : int = local3 * local1;
        memory_result = memory_result + local4;
    };
    std::println("内存密集型循环结果: " + memory_result);
    std::println("=====================================");
    
    std::println("🎉 高级循环优化技术测试完成！");
    std::println("请查看JIT统计信息验证优化效果");
    
    return 0;
};
