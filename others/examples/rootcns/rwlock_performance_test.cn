// 🚀 v0.6.2 读写锁性能测试
using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 v0.6.2 读写锁性能测试开始");
    
    // ========== 测试1: 大量变量分配和读取 ==========
    std::println("=== 测试1: 大量变量分配和读取 ===");
    
    // 分配大量变量（写操作）
    a1 : int = 100;
    a2 : int = 200;
    a3 : int = 300;
    a4 : int = 400;
    a5 : int = 500;
    a6 : int = 600;
    a7 : int = 700;
    a8 : int = 800;
    a9 : int = 900;
    a10 : int = 1000;

    b1 : string = "test1";
    b2 : string = "test2";
    b3 : string = "test3";
    b4 : string = "test4";
    b5 : string = "test5";

    c1 : bool = true;
    c2 : bool = false;
    c3 : bool = true;
    c4 : bool = false;
    c5 : bool = true;

    d1 : float = 1.1;
    d2 : float = 2.2;
    d3 : float = 3.3;
    d4 : float = 4.4;
    d5 : float = 5.5;
    
    std::println("✅ 变量分配完成");
    
    // ========== 测试2: 大量读取操作（应该使用读锁） ==========
    std::println("=== 测试2: 大量读取操作 ===");
    
    // 多次读取相同变量（读操作）
    test_read_operations(a1, a2, a3, a4, a5);
    test_read_operations(a6, a7, a8, a9, a10);
    
    test_string_operations(b1, b2, b3, b4, b5);
    test_bool_operations(c1, c2, c3, c4, c5);
    test_float_operations(d1, d2, d3, d4, d5);
    
    std::println("✅ 读取操作完成");
    
    // ========== 测试3: 混合读写操作 ==========
    std::println("=== 测试3: 混合读写操作 ===");
    
    test_mixed_operations();
    
    std::println("✅ 混合操作完成");
    
    // ========== 测试4: 递归函数调用（大量内存操作） ==========
    std::println("=== 测试4: 递归函数调用 ===");
    
    result1 : int = fibonacci(10);
    result2 : int = fibonacci(8);
    result3 : int = fibonacci(6);
    
    std::println("✅ 递归调用完成");
    
    std::println("🎉 所有性能测试完成！");
    std::println("📊 读写锁优化应该显著提升并发读取性能");
    
    return 0;
};

// 测试大量读取操作的函数
fn test_read_operations(v1 : int, v2 : int, v3 : int, v4 : int, v5 : int) : void {
    // 多次使用这些变量（读操作）
    if (v1 > 0) {
        if (v2 > v1) {
            if (v3 > v2) {
                if (v4 > v3) {
                    if (v5 > v4) {
                        std::println("  ✓ 读取操作测试通过");
                    };
                };
            };
        };
    };
};

// 测试字符串读取操作
fn test_string_operations(s1 : string, s2 : string, s3 : string, s4 : string, s5 : string) : void {
    // 多次读取字符串变量
    std::println(s1);
    std::println(s2);
    std::println(s3);
    std::println(s4);
    std::println(s5);
    std::println("  ✓ 字符串读取测试通过");
};

// 测试布尔值读取操作
fn test_bool_operations(b1 : bool, b2 : bool, b3 : bool, b4 : bool, b5 : bool) : void {
    if (b1) {
        if (!b2) {
            if (b3) {
                if (!b4) {
                    if (b5) {
                        std::println("  ✓ 布尔值读取测试通过");
                    };
                };
            };
        };
    };
};

// 测试浮点数读取操作
fn test_float_operations(f1 : float, f2 : float, f3 : float, f4 : float, f5 : float) : void {
    if (f1 > 0.0) {
        if (f2 > f1) {
            if (f3 > f2) {
                if (f4 > f3) {
                    if (f5 > f4) {
                        std::println("  ✓ 浮点数读取测试通过");
                    };
                };
            };
        };
    };
};

// 测试混合读写操作
fn test_mixed_operations() : void {
    // 写操作：分配新变量
    temp1 : int = 42;
    temp2 : string = "mixed";
    temp3 : bool = true;

    // 读操作：使用变量
    if (temp1 > 0) {
        std::println(temp2);
        if (temp3) {
            // 更多写操作
            temp4 : int = temp1 * 2;
            temp5 : string = "test";

            // 更多读操作
            if (temp4 > temp1) {
                std::println(temp5);
                std::println("  ✓ 混合读写操作测试通过");
            };
        };
    };
};

// 递归函数（大量内存分配和读取）
fn fibonacci(n : int) : int {
    if (n <= 1) {
        return n;
    } else {
        // 这里会产生大量的内存分配和读取操作
        temp1 : int = fibonacci(n - 1);
        temp2 : int = fibonacci(n - 2);
        return temp1 + temp2;
    };
};
