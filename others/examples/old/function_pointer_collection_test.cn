using lib <io>;
using ns std;

// 函数指针集合测试（使用多个变量模拟数组）

fn add(a : int, b : int) : int {
    return a + b;
};

fn subtract(a : int, b : int) : int {
    return a - b;
};

fn multiply(a : int, b : int) : int {
    return a * b;
};

fn divide(a : int, b : int) : int {
    if (b != 0) {
        return a / b;
    } else {
        return 0;
    };
};

fn main() : int {
    std::println("=== 函数指针集合测试 ===");
    std::println("");
    
    // 测试1：多个函数指针变量
    testMultipleFunctionPointers();
    
    // 测试2：函数指针作为返回值
    testFunctionPointerAsReturnValue();
    
    // 测试3：函数指针比较
    testFunctionPointerComparison();
    
    std::println("");
    std::println("=== 函数指针集合测试完成 ===");
    return 0;
};

fn testMultipleFunctionPointers() : void {
    std::println("1. 多个函数指针变量测试");
    std::println("=======================");
    
    // 创建多个函数指针变量
    op1 : *fn(int, int) : int = add;
    op2 : *fn(int, int) : int = subtract;
    op3 : *fn(int, int) : int = multiply;
    op4 : *fn(int, int) : int = divide;
    
    // 调用不同的函数指针
    result1 : int = op1(10, 5);
    std::println("op1(10, 5) [add] = " + result1);
    
    result2 : int = op2(10, 5);
    std::println("op2(10, 5) [subtract] = " + result2);
    
    result3 : int = op3(10, 5);
    std::println("op3(10, 5) [multiply] = " + result3);
    
    result4 : int = op4(10, 5);
    std::println("op4(10, 5) [divide] = " + result4);
    
    std::println("");
};

fn testFunctionPointerAsReturnValue() : void {
    std::println("2. 函数指针作为返回值测试");
    std::println("===========================");
    
    // 获取不同的运算函数指针
    addPtr : *fn(int, int) : int = getOperation("add");
    result1 : int = addPtr(8, 3);
    std::println("getOperation(\"add\")(8, 3) = " + result1);
    
    subPtr : *fn(int, int) : int = getOperation("subtract");
    result2 : int = subPtr(8, 3);
    std::println("getOperation(\"subtract\")(8, 3) = " + result2);
    
    mulPtr : *fn(int, int) : int = getOperation("multiply");
    result3 : int = mulPtr(8, 3);
    std::println("getOperation(\"multiply\")(8, 3) = " + result3);
    
    std::println("");
};

fn testFunctionPointerComparison() : void {
    std::println("3. 函数指针比较测试");
    std::println("===================");
    
    // 创建函数指针
    ptr1 : *fn(int, int) : int = add;
    ptr2 : *fn(int, int) : int = add;
    ptr3 : *fn(int, int) : int = subtract;
    
    std::println("函数指针信息:");
    std::println("  ptr1.getName(): " + ptr1.getName());
    std::println("  ptr2.getName(): " + ptr2.getName());
    std::println("  ptr3.getName(): " + ptr3.getName());
    
    // 比较函数指针（通过名称）
    if (ptr1.getName() == ptr2.getName()) {
        std::println("✓ ptr1 和 ptr2 指向同一个函数");
    } else {
        std::println("✗ ptr1 和 ptr2 指向不同函数");
    };
    
    if (ptr1.getName() == ptr3.getName()) {
        std::println("✗ ptr1 和 ptr3 指向同一个函数");
    } else {
        std::println("✓ ptr1 和 ptr3 指向不同函数");
    };
    
    std::println("");
};

// 返回函数指针的函数
fn getOperation(opName : string) : *fn(int, int) : int {
    if (opName == "add") {
        return add;
    } else if (opName == "subtract") {
        return subtract;
    } else if (opName == "multiply") {
        return multiply;
    } else if (opName == "divide") {
        return divide;
    } else {
        return add; // 默认返回加法
    };
};
