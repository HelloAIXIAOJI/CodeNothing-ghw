using lib <io>;
using ns std;

// 函数测试：默认参数值
fn greet(name : string = "世界", greeting : string = "你好") : string {
    return `${greeting}，${name}！`;
};

fn buildConnection(host : string, port : int = 8080, timeout : int = 30) : string {
    return `连接到 ${host}:${port}，超时: ${timeout}秒`;
};

fn createPerson(name : string, age : int = 25, city : string = "北京") : string {
    return `姓名: ${name}, 年龄: ${age}, 城市: ${city}`;
};

// 带表达式的默认值
fn multiply(a : int, b : int = a * 2) : int {
    return a * b;
};

fn formatDate(year : int, month : int = 1, day : int = 1) : string {
    // 月份和日期格式化（确保两位数）
    month_str : string = month < 10 ? "0" + month : "" + month;
    day_str : string = day < 10 ? "0" + day : "" + day;
    return `${year}-${month_str}-${day_str}`;
};

// 原始字符串字面量测试
fn testRawStringLiterals() : void {
    // 基本的原始字符串（不进行转义）
    path1 : string = "C:\\Users\\Documents\\file.txt";  // 常规字符串（需要转义）
    path2 : string = r"C:\Users\Documents\file.txt";    // 原始字符串（无需转义）
    
    std::println("常规字符串 (已转义): " + path1);
    std::println("原始字符串 (未转义): " + path2);
    
    // 特殊字符处理比较
    normal : string = "第一行\n第二行\t缩进";
    raw : string = r"第一行\n第二行\t缩进";
    
    std::println("常规字符串 (特殊字符会被转义):");
    std::println(normal);
    std::println("原始字符串 (特殊字符保留字面值):");
    std::println(raw);
    
    // 其他应用场景
    regex_pattern : string = r"\d+\.\d+";  // 正则表达式模式
    sql_query : string = r"SELECT * FROM users WHERE name LIKE '%user\_%'";
    
    std::println("正则表达式模式: " + regex_pattern);
    std::println("SQL查询: " + sql_query);
};

fn main() : int {
    std::println("=== 默认参数值测试 ===");
    
    // 测试默认参数值
    std::println(greet());  // 使用两个默认参数
    std::println(greet("张三"));  // 使用第二个默认参数
    std::println(greet("李四", "您好"));  // 不使用默认参数
    
    // 测试混合使用默认参数和必选参数
    std::println(buildConnection("localhost"));  // 使用默认端口和超时
    std::println(buildConnection("example.com", 443));  // 使用默认超时
    std::println(buildConnection("server.net", 9000, 60));  // 不使用默认值
    
    // 测试更复杂的默认值场景
    std::println(createPerson("王五"));  // 使用默认年龄和城市
    std::println(createPerson("赵六", 30));  // 使用默认城市
    std::println(createPerson("钱七", 35, "上海"));  // 不使用默认值
    
    // 测试带表达式的默认值
    std::println("5 * (5*2) = " + multiply(5));  // 应该输出 5 * 10 = 50
    std::println("3 * 4 = " + multiply(3, 4));  // 应该输出 3 * 4 = 12
    
    // 测试日期格式化
    std::println(formatDate(2025));  // 使用默认月份和日期
    std::println(formatDate(2025, 10));  // 使用默认日期
    std::println(formatDate(2025, 10, 15));  // 不使用默认值
    
    std::println("\n=== 原始字符串字面量测试 ===");
    testRawStringLiterals();
    
    return 0;
}; 