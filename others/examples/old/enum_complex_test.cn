using lib <io>;
using ns std;

// 复杂枚举测试：嵌套、递归、状态机等高级用法

// 1. 复杂的数据结构枚举
enum JsonValue {
    Null,
    Bool(bool),
    Number(float),
    String(string),
    Array,  // 简化版，实际应该是Array(JsonValue[])
    Object  // 简化版，实际应该是Object(map<string, JsonValue>)
};

// 2. 网络请求状态枚举
enum HttpStatus {
    Continue(int),
    Success(int, string),
    Redirect(int, string, string),
    ClientError(int, string, string),
    ServerError(int, string, string, string)
};

// 3. 表达式树枚举（递归结构的模拟）
enum Expression {
    Literal(float),
    Variable(string),
    Add,     // 简化版：Add(Expression, Expression)
    Multiply, // 简化版：Multiply(Expression, Expression)
    Function // 简化版：Function(string, Expression[])
};

// 4. 游戏状态枚举
enum GameState {
    Menu,
    Loading(string, float),
    Playing(int, int, float),
    Paused(int, int, float, string),
    GameOver(int, string, bool),
    Victory(int, int, float, string, bool)
};

// 5. 文件系统枚举
enum FileSystemEntry {
    File(string, int, string),
    Directory(string, int),
    SymLink(string, string, string),
    Device(string, string, int, int)
};

fn main() : int {
    std::println("=== CodeNothing 复杂枚举测试 ===");
    
    // 测试1：JSON值处理
    testJsonValues();
    
    // 测试2：HTTP状态处理
    testHttpStatuses();
    
    // 测试3：表达式处理
    testExpressions();
    
    // 测试4：游戏状态机
    testGameStateMachine();
    
    // 测试5：文件系统处理
    testFileSystem();
    
    // 测试6：枚举的深度嵌套
    testDeepNesting();
    
    // 测试7：枚举的边界情况
    testEdgeCases();
    
    std::println("");
    std::println("=== 复杂枚举测试完成 ===");
    return 0;
};

fn testJsonValues() : void {
    std::println("");
    std::println("1. JSON值处理测试");
    std::println("==================");
    
    nullValue : JsonValue = JsonValue::Null;
    boolValue : JsonValue = JsonValue::Bool(true);
    numberValue : JsonValue = JsonValue::Number(42.5);
    stringValue : JsonValue = JsonValue::String("Hello, JSON!");
    arrayValue : JsonValue = JsonValue::Array;
    objectValue : JsonValue = JsonValue::Object;
    
    std::println("JSON Null: " + nullValue);
    std::println("JSON Bool: " + boolValue);
    std::println("JSON Number: " + numberValue);
    std::println("JSON String: " + stringValue);
    std::println("JSON Array: " + arrayValue);
    std::println("JSON Object: " + objectValue);
    
    // 处理JSON值
    processJsonValue(nullValue);
    processJsonValue(numberValue);
    processJsonValue(stringValue);
};

fn processJsonValue(value : JsonValue) : void {
    valueStr : string = value.toString();
    
    if (valueStr == "JsonValue::Null") {
        std::println("  处理空值");
    } else if (valueStr.startsWith("JsonValue::Bool")) {
        std::println("  处理布尔值: " + value);
    } else if (valueStr.startsWith("JsonValue::Number")) {
        std::println("  处理数字值: " + value);
    } else if (valueStr.startsWith("JsonValue::String")) {
        std::println("  处理字符串值: " + value);
    } else {
        std::println("  处理复合值: " + value);
    };
};

fn testHttpStatuses() : void {
    std::println("");
    std::println("2. HTTP状态处理测试");
    std::println("===================");
    
    continue100 : HttpStatus = HttpStatus::Continue(100);
    success200 : HttpStatus = HttpStatus::Success(200, "OK");
    redirect301 : HttpStatus = HttpStatus::Redirect(301, "Moved Permanently", "https://new-url.com");
    clientError404 : HttpStatus = HttpStatus::ClientError(404, "Not Found", "页面不存在");
    serverError500 : HttpStatus = HttpStatus::ServerError(500, "Internal Server Error", "数据库连接失败", "contact@example.com");
    
    std::println("HTTP状态码:");
    std::println("  " + continue100);
    std::println("  " + success200);
    std::println("  " + redirect301);
    std::println("  " + clientError404);
    std::println("  " + serverError500);
    
    // 处理不同的HTTP状态
    handleHttpStatus(success200);
    handleHttpStatus(clientError404);
    handleHttpStatus(serverError500);
};

fn handleHttpStatus(status : HttpStatus) : void {
    statusStr : string = status.toString();
    
    if (statusStr.startsWith("HttpStatus::Success")) {
        std::println("  成功响应: " + status);
    } else if (statusStr.startsWith("HttpStatus::ClientError")) {
        std::println("  客户端错误: " + status);
    } else if (statusStr.startsWith("HttpStatus::ServerError")) {
        std::println("  服务器错误: " + status);
    } else {
        std::println("  其他状态: " + status);
    };
};

fn testExpressions() : void {
    std::println("");
    std::println("3. 表达式处理测试");
    std::println("==================");
    
    literal : Expression = Expression::Literal(42.0);
    variable : Expression = Expression::Variable("x");
    add : Expression = Expression::Add;
    multiply : Expression = Expression::Multiply;
    function : Expression = Expression::Function;
    
    std::println("表达式类型:");
    std::println("  字面量: " + literal);
    std::println("  变量: " + variable);
    std::println("  加法: " + add);
    std::println("  乘法: " + multiply);
    std::println("  函数: " + function);
    
    // 模拟表达式求值
    result1 : float = evaluateExpression(literal);
    result2 : float = evaluateExpression(variable);
    
    std::println("  字面量求值结果: " + result1);
    std::println("  变量求值结果: " + result2);
};

fn evaluateExpression(expr : Expression) : float {
    exprStr : string = expr.toString();
    
    if (exprStr.startsWith("Expression::Literal")) {
        return 42.0; // 简化：直接返回固定值
    } else if (exprStr.startsWith("Expression::Variable")) {
        return 10.0; // 简化：假设变量值为10
    } else {
        return 0.0; // 其他情况返回0
    };
};

fn testGameStateMachine() : void {
    std::println("");
    std::println("4. 游戏状态机测试");
    std::println("==================");
    
    // 模拟游戏状态转换
    currentState : GameState = GameState::Menu;
    std::println("初始状态: " + currentState);
    
    // 开始加载
    currentState = GameState::Loading("加载关卡数据", 0.0);
    std::println("状态转换: " + currentState);
    
    // 加载进度更新
    currentState = GameState::Loading("加载纹理", 50.0);
    std::println("状态更新: " + currentState);
    
    // 开始游戏
    currentState = GameState::Playing(1, 100, 0.0);
    std::println("状态转换: " + currentState);
    
    // 暂停游戏
    currentState = GameState::Paused(1, 75, 120.5, "用户暂停");
    std::println("状态转换: " + currentState);
    
    // 游戏结束
    currentState = GameState::GameOver(1, "生命值耗尽", false);
    std::println("状态转换: " + currentState);
    
    // 胜利
    currentState = GameState::Victory(3, 1250, 300.75, "完美通关", true);
    std::println("状态转换: " + currentState);
    
    // 处理最终状态
    handleGameState(currentState);
};

fn handleGameState(state : GameState) : void {
    stateStr : string = state.toString();

    if (stateStr.startsWith("GameState::Victory")) {
        std::println("  恭喜！游戏胜利！");
    } else if (stateStr.startsWith("GameState::GameOver")) {
        std::println("  游戏结束，再试一次！");
    } else if (stateStr.startsWith("GameState::Playing")) {
        std::println("  游戏进行中...");
    } else {
        std::println("  处理游戏状态: " + state);
    };
};

fn testFileSystem() : void {
    std::println("");
    std::println("5. 文件系统处理测试");
    std::println("====================");

    // 创建不同类型的文件系统条目
    textFile : FileSystemEntry = FileSystemEntry::File("document.txt", 1024, "text/plain");
    imageFile : FileSystemEntry = FileSystemEntry::File("photo.jpg", 2048576, "image/jpeg");
    homeDir : FileSystemEntry = FileSystemEntry::Directory("home", 4096);
    userDir : FileSystemEntry = FileSystemEntry::Directory("user", 4096);
    configLink : FileSystemEntry = FileSystemEntry::SymLink("config", "/etc/app/config", "root");
    mouseDevice : FileSystemEntry = FileSystemEntry::Device("mouse0", "/dev/input/mouse0", 13, 32);

    std::println("文件系统条目:");
    std::println("  " + textFile);
    std::println("  " + imageFile);
    std::println("  " + homeDir);
    std::println("  " + userDir);
    std::println("  " + configLink);
    std::println("  " + mouseDevice);

    // 处理文件系统条目
    processFileSystemEntry(textFile);
    processFileSystemEntry(homeDir);
    processFileSystemEntry(configLink);
    processFileSystemEntry(mouseDevice);
};

fn processFileSystemEntry(entry : FileSystemEntry) : void {
    entryStr : string = entry.toString();

    if (entryStr.startsWith("FileSystemEntry::File")) {
        std::println("  处理文件: " + entry);
    } else if (entryStr.startsWith("FileSystemEntry::Directory")) {
        std::println("  处理目录: " + entry);
    } else if (entryStr.startsWith("FileSystemEntry::SymLink")) {
        std::println("  处理符号链接: " + entry);
    } else if (entryStr.startsWith("FileSystemEntry::Device")) {
        std::println("  处理设备文件: " + entry);
    };
};

fn testDeepNesting() : void {
    std::println("");
    std::println("6. 枚举深度嵌套测试");
    std::println("====================");

    // 创建多层嵌套的枚举结构
    deepNested1 : HttpStatus = HttpStatus::ServerError(500, "Internal Error", "Database connection failed", "admin@example.com");
    deepNested2 : GameState = GameState::Victory(10, 99999, 1234.567, "Ultimate Champion Achievement Unlocked", true);
    deepNested3 : FileSystemEntry = FileSystemEntry::Device("complex-device-name", "/dev/very/long/path/to/device", 255, 65535);

    std::println("深度嵌套枚举:");
    std::println("  复杂HTTP错误: " + deepNested1);
    std::println("  复杂游戏胜利: " + deepNested2);
    std::println("  复杂设备文件: " + deepNested3);

    // 测试嵌套枚举的函数传递
    processComplexEnum(deepNested1);
    processComplexEnum(deepNested2);
    processComplexEnum(deepNested3);
};

fn processComplexEnum(value : auto) : void {
    std::println("  处理复杂枚举值: " + value);
};

fn testEdgeCases() : void {
    std::println("");
    std::println("7. 枚举边界情况测试");
    std::println("====================");

    // 测试空字符串参数
    emptyString : JsonValue = JsonValue::String("");
    std::println("空字符串JSON: " + emptyString);

    // 测试零值参数
    zeroNumber : JsonValue = JsonValue::Number(0.0);
    std::println("零值JSON: " + zeroNumber);



    // 测试长字符串参数
    longString : JsonValue = JsonValue::String("这是一个非常非常非常长的字符串，用来测试枚举是否能正确处理长文本内容");
    std::println("长字符串JSON: " + longString);

    // 测试特殊字符
    specialChars : JsonValue = JsonValue::String("特殊字符: !@#$%^&*()_+-=[]{}|;':\",./<>?");
    std::println("特殊字符JSON: " + specialChars);

    // 测试枚举重新赋值的边界情况
    mutableEnum : JsonValue = JsonValue::Null;
    std::println("初始值: " + mutableEnum);

    mutableEnum = JsonValue::Bool(false);
    std::println("重新赋值1: " + mutableEnum);

    mutableEnum = JsonValue::Number(3.14159);
    std::println("重新赋值2: " + mutableEnum);

    mutableEnum = JsonValue::String("最终值");
    std::println("最终值: " + mutableEnum);

    // 测试枚举作为函数返回值的边界情况
    randomEnum1 : JsonValue = getRandomJsonValue(1);
    randomEnum2 : JsonValue = getRandomJsonValue(2);
    randomEnum3 : JsonValue = getRandomJsonValue(3);

    std::println("随机枚举1: " + randomEnum1);
    std::println("随机枚举2: " + randomEnum2);
    std::println("随机枚举3: " + randomEnum3);
};

fn getRandomJsonValue(seed : int) : JsonValue {
    if (seed == 1) {
        return JsonValue::Bool(true);
    } else if (seed == 2) {
        return JsonValue::Number(seed * 3.14);
    } else {
        return JsonValue::String("种子值: " + seed);
    };
};
