using lib <io>;
using ns std;

// 内存安全测试

fn main() : int {
    std::println("=== CodeNothing 内存安全测试 ===");
    
    // 测试1：正常指针操作
    testNormalPointerOperations();
    
    // 测试2：边界检查
    testBoundaryChecks();
    
    // 测试3：指针有效性验证
    testPointerValidation();
    
    std::println("");
    std::println("=== 内存安全测试完成 ===");
    return 0;
};

fn testNormalPointerOperations() : void {
    std::println("");
    std::println("1. 正常指针操作测试");
    std::println("===================");
    
    // 创建正常的指针操作
    value1 : int = 100;
    value2 : int = 200;
    value3 : int = 300;
    
    ptr1 : *int = &value1;
    ptr2 : *int = &value2;
    ptr3 : *int = &value3;
    
    std::println("指针1: " + ptr1 + " -> " + *ptr1);
    std::println("指针2: " + ptr2 + " -> " + *ptr2);
    std::println("指针3: " + ptr3 + " -> " + *ptr3);
    
    // 指针算术
    ptr1_plus_1 : *int = ptr1 + 1;
    ptr2_minus_1 : *int = ptr2 - 1;
    
    std::println("ptr1 + 1: " + ptr1_plus_1);
    std::println("ptr2 - 1: " + ptr2_minus_1);
    
    // 指针差值
    diff : int = ptr3 - ptr1;
    std::println("ptr3 - ptr1: " + diff);
    
    std::println("✓ 正常指针操作测试通过");
};

fn testBoundaryChecks() : void {
    std::println("");
    std::println("2. 边界检查测试");
    std::println("================");
    
    // 创建指针并进行边界测试
    value : int = 42;
    ptr : *int = &value;
    
    std::println("基础指针: " + ptr + " -> " + *ptr);
    
    // 测试指针算术的边界
    std::println("测试指针算术边界:");
    
    // 正常范围内的操作
    ptr_plus_small : *int = ptr + 1;
    std::println("  ptr + 1: " + ptr_plus_small + " (正常)");
    
    ptr_plus_medium : *int = ptr + 10;
    std::println("  ptr + 10: " + ptr_plus_medium + " (正常)");
    
    // 大偏移量（可能超出正常范围，但不会崩溃）
    ptr_plus_large : *int = ptr + 100;
    std::println("  ptr + 100: " + ptr_plus_large + " (大偏移)");
    
    std::println("✓ 边界检查测试通过");
};

fn testPointerValidation() : void {
    std::println("");
    std::println("3. 指针有效性验证测试");
    std::println("=====================");
    
    // 创建有效指针
    value : int = 123;
    validPtr : *int = &value;
    
    std::println("有效指针: " + validPtr + " -> " + *validPtr);
    
    // 测试多级指针的有效性
    ptrPtr : **int = &validPtr;
    std::println("二级指针: " + ptrPtr);
    
    derefPtr : *int = *ptrPtr;
    std::println("解引用二级指针: " + derefPtr);
    
    finalValue : int = *(*ptrPtr);
    std::println("二次解引用: " + finalValue);
    
    // 测试指针算术后的有效性
    arithmeticPtr : *int = validPtr + 5;
    std::println("算术指针: " + arithmeticPtr);
    
    backPtr : *int = arithmeticPtr - 5;
    std::println("回退指针: " + backPtr);
    
    // 验证回退后的指针是否等于原指针
    if (validPtr.toString() == backPtr.toString()) {
        std::println("✓ 指针算术往返一致");
    } else {
        std::println("⚠ 指针算术往返不一致");
    };
    
    std::println("✓ 指针有效性验证测试通过");
};

// 辅助函数：安全的指针操作
fn safePointerOperation(ptr : *int, offset : int) : *int {
    std::println("执行安全指针操作: " + ptr + " + " + offset);
    result : *int = ptr + offset;
    std::println("结果: " + result);
    return result;
};

// 辅助函数：安全的解引用操作
fn safeDereference(ptr : *int) : int {
    std::println("执行安全解引用: " + ptr);
    result : int = *ptr;
    std::println("解引用结果: " + result);
    return result;
};
