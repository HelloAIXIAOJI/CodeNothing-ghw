using lib <io>;
using ns std;

// 基础枚举定义（无参数变体）
enum Color {
    Red,
    Green,
    Blue
};

// 带参数的枚举定义（类似Rust的enum）
enum Shape {
    Circle(float),
    Rectangle(float, float),
    Triangle(float, float, float)
};

// 复杂枚举定义（混合类型）
enum Message {
    Quit,
    Move(int, int),
    Write(string),
    ChangeColor(int, int, int)
};

// Option类型枚举（模拟Rust的Option）
enum Option {
    Some(string),
    None
};

fn main() : int {
    std::println("=== CodeNothing 枚举类型测试 ===");
    
    // 1. 基础枚举测试
    std::println("1. 基础枚举测试");
    std::println("---------------");
    
    // 创建无参数枚举变体
    red : Color = Color::Red;
    green : Color = Color::Green;
    blue : Color = Color::Blue;
    
    std::println("红色: " + red);
    std::println("绿色: " + green);
    std::println("蓝色: " + blue);
    
    // 2. 带参数的枚举测试
    std::println("");
    std::println("2. 带参数的枚举测试");
    std::println("-------------------");
    
    // 创建带参数的枚举变体
    circle : Shape = Shape::Circle(5.0);
    rectangle : Shape = Shape::Rectangle(10.0, 20.0);
    triangle : Shape = Shape::Triangle(3.0, 4.0, 5.0);
    
    std::println("圆形: " + circle);
    std::println("矩形: " + rectangle);
    std::println("三角形: " + triangle);
    
    // 3. 复杂枚举测试
    std::println("");
    std::println("3. 复杂枚举测试");
    std::println("---------------");
    
    // 创建不同类型的消息
    quit_msg : Message = Message::Quit;
    move_msg : Message = Message::Move(10, 20);
    write_msg : Message = Message::Write("Hello, World!");
    color_msg : Message = Message::ChangeColor(255, 128, 64);
    
    std::println("退出消息: " + quit_msg);
    std::println("移动消息: " + move_msg);
    std::println("写入消息: " + write_msg);
    std::println("颜色消息: " + color_msg);
    
    // 4. Option类型测试
    std::println("");
    std::println("4. Option类型测试");
    std::println("-----------------");
    
    // 创建Option类型的值
    some_value : Option = Option::Some("有值");
    none_value : Option = Option::None;
    
    std::println("有值的Option: " + some_value);
    std::println("无值的Option: " + none_value);
    
    // 5. 枚举在函数中的使用
    std::println("");
    std::println("5. 枚举在函数中的使用");
    std::println("---------------------");
    
    // 测试枚举作为函数参数
    processColor(Color::Red);
    processColor(Color::Green);
    processColor(Color::Blue);
    
    // 测试枚举作为函数返回值
    result_color : Color = getRandomColor();
    std::println("随机颜色: " + result_color);
    
    std::println("");
    std::println("=== 枚举类型测试完成 ===");
    return 0;
};

// 处理颜色的函数
fn processColor(color : Color) : void {
    std::println("处理颜色: " + color);
};

// 返回随机颜色的函数
fn getRandomColor() : Color {
    return Color::Blue;  // 简单返回蓝色
};

// 计算形状面积的函数（演示枚举的实际应用）
fn calculateArea(shape : Shape) : float {
    // 注意：这里需要模式匹配来处理不同的枚举变体
    // 由于当前版本还没有实现模式匹配，我们先返回固定值
    return 0.0;
};

// 处理消息的函数
fn handleMessage(msg : Message) : void {
    std::println("处理消息: " + msg);
};
