using lib <io>;
using ns std;

// 简单的枚举集成测试

enum Status {
    Active,
    Inactive,
    Pending(string)
};

enum Priority {
    Low,
    Medium,
    High
};

fn main() : int {
    std::println("=== 枚举集成测试 ===");
    
    // 1. 枚举数组
    std::println("1. 枚举数组测试");
    statuses : Status[] = [Status::Active, Status::Inactive, Status::Pending("审核中")];
    
    for (i : 0..3) {
        std::println("状态 " + i + ": " + statuses[i]);
    };
    
    // 2. 枚举作为函数参数和返回值
    std::println("");
    std::println("2. 枚举函数测试");
    
    result : Status = processStatus(Status::Active);
    std::println("处理结果: " + result);
    
    result = processStatus(Status::Pending("等待批准"));
    std::println("处理结果: " + result);
    
    // 3. 枚举比较（通过字符串）
    std::println("");
    std::println("3. 枚举比较测试");
    
    status1 : Status = Status::Active;
    status2 : Status = Status::Active;
    status3 : Status = Status::Inactive;
    
    if (status1.toString() == status2.toString()) {
        std::println("status1 和 status2 相同");
    };
    
    if (status1.toString() != status3.toString()) {
        std::println("status1 和 status3 不同");
    };
    
    std::println("");
    std::println("=== 测试完成 ===");
    return 0;
};

fn processStatus(status : Status) : Status {
    std::println("处理状态: " + status);
    
    // 简单的状态转换逻辑
    statusStr : string = status.toString();
    
    if (statusStr == "Status::Active") {
        return Status::Inactive;
    } else if (statusStr == "Status::Inactive") {
        return Status::Active;
    } else {
        return Status::Active;  // Pending -> Active
    };
};

fn getPriority() : Priority {
    return Priority::High;
};
