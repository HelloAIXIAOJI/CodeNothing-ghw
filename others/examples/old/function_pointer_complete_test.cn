using lib <io>;
using ns std;

// CodeNothing v0.5.2 函数指针完整功能测试

// 测试函数定义
fn add(a : int, b : int) : int {
    return a + b;
};

fn multiply(a : int, b : int) : int {
    return a * b;
};

fn subtract(a : int, b : int) : int {
    return a - b;
};

fn greet(name : string) : string {
    return "Hello, " + name + "!";
};

fn getRandomNumber() : int {
    return 42;
};

fn processString(input : string) : string {
    return "Processed: " + input;
};

fn main() : int {
    std::println("=== CodeNothing v0.5.2 函数指针完整功能测试 ===");
    std::println("");
    
    // 测试1：基础函数指针类型声明
    testBasicDeclaration();
    
    // 测试2：函数指针赋值和重新赋值
    testAssignment();
    
    // 测试3：函数指针调用
    testFunctionCalls();
    
    // 测试4：函数指针方法
    testFunctionPointerMethods();
    
    // 测试5：高阶函数
    testHigherOrderFunctions();
    
    // 测试6：不同类型的函数指针
    testDifferentTypes();
    
    std::println("");
    std::println("=== 所有函数指针功能测试完成 ===");
    std::println("✅ 函数指针类型声明");
    std::println("✅ 函数指针赋值和重新赋值");
    std::println("✅ 函数指针调用");
    std::println("✅ 函数指针方法调用");
    std::println("✅ 高阶函数支持");
    std::println("✅ 多种函数类型支持");
    
    return 0;
};

fn testBasicDeclaration() : void {
    std::println("1. 基础函数指针类型声明测试");
    std::println("==============================");
    
    // 各种类型的函数指针声明
    mathFunc : *fn(int, int) : int;
    stringFunc : *fn(string) : string;
    simpleFunc : *fn() : int;
    voidFunc : *fn(string) : void;
    
    std::println("✓ 数学函数指针: *fn(int, int) : int");
    std::println("✓ 字符串函数指针: *fn(string) : string");
    std::println("✓ 简单函数指针: *fn() : int");
    std::println("✓ 无返回值函数指针: *fn(string) : void");
    std::println("");
};

fn testAssignment() : void {
    std::println("2. 函数指针赋值测试");
    std::println("===================");
    
    // 函数指针赋值
    mathFunc : *fn(int, int) : int = add;
    std::println("mathFunc = add");
    std::println("函数名: " + mathFunc.getName());
    
    // 重新赋值
    mathFunc = multiply;
    std::println("mathFunc = multiply");
    std::println("函数名: " + mathFunc.getName());
    
    // 再次重新赋值
    mathFunc = subtract;
    std::println("mathFunc = subtract");
    std::println("函数名: " + mathFunc.getName());
    std::println("");
};

fn testFunctionCalls() : void {
    std::println("3. 函数指针调用测试");
    std::println("===================");
    
    // 数学函数调用
    mathFunc : *fn(int, int) : int = add;
    result1 : int = mathFunc(10, 5);
    std::println("add(10, 5) = " + result1);
    
    mathFunc = multiply;
    result2 : int = mathFunc(10, 5);
    std::println("multiply(10, 5) = " + result2);
    
    mathFunc = subtract;
    result3 : int = mathFunc(10, 5);
    std::println("subtract(10, 5) = " + result3);
    
    // 字符串函数调用
    stringFunc : *fn(string) : string = greet;
    greeting : string = stringFunc("World");
    std::println("greet(\"World\") = " + greeting);
    
    // 无参数函数调用
    simpleFunc : *fn() : int = getRandomNumber;
    number : int = simpleFunc();
    std::println("getRandomNumber() = " + number);
    std::println("");
};

fn testFunctionPointerMethods() : void {
    std::println("4. 函数指针方法测试");
    std::println("===================");
    
    mathFunc : *fn(int, int) : int = add;
    
    std::println("函数指针信息:");
    std::println("  toString(): " + mathFunc.toString());
    std::println("  getName(): " + mathFunc.getName());
    std::println("  getParamCount(): " + mathFunc.getParamCount());
    std::println("  getReturnType(): " + mathFunc.getReturnType());
    std::println("  isNull(): " + mathFunc.isNull());
    std::println("  isLambda(): " + mathFunc.isLambda());
    
    // 测试不同函数的信息
    stringFunc : *fn(string) : string = processString;
    std::println("");
    std::println("字符串函数指针信息:");
    std::println("  参数数量: " + stringFunc.getParamCount());
    std::println("  返回类型: " + stringFunc.getReturnType());
    std::println("");
};

fn testHigherOrderFunctions() : void {
    std::println("5. 高阶函数测试");
    std::println("===============");
    
    // 使用函数指针作为参数
    result1 : int = calculate(10, 5, add);
    std::println("calculate(10, 5, add) = " + result1);
    
    result2 : int = calculate(10, 5, multiply);
    std::println("calculate(10, 5, multiply) = " + result2);
    
    result3 : int = calculate(10, 5, subtract);
    std::println("calculate(10, 5, subtract) = " + result3);
    
    // 字符串处理函数
    processed : string = processText("Hello", processString);
    std::println("processText(\"Hello\", processString) = " + processed);
    std::println("");
};

fn testDifferentTypes() : void {
    std::println("6. 不同类型函数指针测试");
    std::println("=======================");
    
    // 整数函数
    intFunc : *fn(int, int) : int = add;
    intResult : int = intFunc(20, 30);
    std::println("整数函数: " + intResult);
    
    // 字符串函数
    strFunc : *fn(string) : string = greet;
    strResult : string = strFunc("CodeNothing");
    std::println("字符串函数: " + strResult);
    
    // 无参数函数
    noParamFunc : *fn() : int = getRandomNumber;
    noParamResult : int = noParamFunc();
    std::println("无参数函数: " + noParamResult);
    std::println("");
};

// 高阶函数：接受函数指针作为参数
fn calculate(a : int, b : int, operation : *fn(int, int) : int) : int {
    std::println("执行操作: " + operation.getName());
    return operation(a, b);
};

fn processText(input : string, processor : *fn(string) : string) : string {
    std::println("使用处理器: " + processor.getName());
    return processor(input);
};
