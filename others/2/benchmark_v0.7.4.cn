// CodeNothing v0.7.4 性能基准测试
// 展示变量生命周期优化的效果
using lib <io>;

fn main(): int {
    println("=== CodeNothing v0.7.4 性能基准测试 ===");
    
    // 基准测试1: 大量局部变量访问
    benchmark_local_variables();
    
    // 基准测试2: 函数参数密集访问
    benchmark_function_parameters(1000, 2000, 3000);
    
    // 基准测试3: 复杂计算优化
    benchmark_complex_calculations();
    
    println("性能基准测试完成!");
    return 0;
};

// 基准测试1: 大量局部变量访问
fn benchmark_local_variables(): void {
    println("=== 基准测试1: 大量局部变量访问 ===");
    
    // 这些变量应该被标记为安全，访问时跳过运行时检查
    base1 : int = 100;
    base2 : int = 200;
    base3 : int = 300;
    multiplier : int = 5;
    
    total : int = 0;
    iterations : int = 1000;
    i : int = 0;
    
    while (i < iterations) {
        // 大量的安全变量访问，应该被优化
        temp1 : int = base1 * multiplier;
        temp2 : int = base2 * multiplier;
        temp3 : int = base3 * multiplier;
        
        result : int = temp1 + temp2 + temp3;
        total = total + result;
        
        i = i + 1;
    };
    
    println("局部变量访问基准测试完成");
};

// 基准测试2: 函数参数密集访问
fn benchmark_function_parameters(param1 : int, param2 : int, param3 : int): void {
    println("=== 基准测试2: 函数参数密集访问 ===");
    
    // 函数参数应该被标记为安全
    total : int = 0;
    iterations : int = 500;
    i : int = 0;
    
    while (i < iterations) {
        // 密集的参数访问，应该被优化
        calc1 : int = param1 + param2;
        calc2 : int = param2 + param3;
        calc3 : int = param1 + param3;
        calc4 : int = param1 * param2;
        calc5 : int = param2 * param3;
        
        result : int = calc1 + calc2 + calc3 + calc4 + calc5;
        total = total + result;
        
        i = i + 1;
    };
    
    println("函数参数访问基准测试完成");
};

// 基准测试3: 复杂计算优化
fn benchmark_complex_calculations(): void {
    println("=== 基准测试3: 复杂计算优化 ===");
    
    // 复杂计算中的安全变量
    a : int = 10;
    b : int = 20;
    c : int = 30;
    d : int = 40;
    e : int = 50;
    
    total : int = 0;
    iterations : int = 300;
    i : int = 0;
    
    while (i < iterations) {
        // 复杂的数学表达式，结合JIT编译和生命周期优化
        expr1 : int = (a + b) * (c + d);
        expr2 : int = (a * b) + (c * d);
        expr3 : int = (a + c) * (b + d);
        expr4 : int = (a * c) + (b * e);
        expr5 : int = (b + e) * (c + a);
        
        // 嵌套计算
        nested1 : int = expr1 + expr2;
        nested2 : int = expr3 + expr4;
        nested3 : int = expr5 + nested1;
        
        final_result : int = nested2 + nested3;
        total = total + final_result;
        
        i = i + 1;
    };
    
    println("复杂计算优化基准测试完成");
};
