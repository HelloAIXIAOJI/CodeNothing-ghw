using lib <io>;

// CodeNothing v0.7.5 内存池性能基准测试
// 测试内存预分配池的性能提升效果

fn test_memory_intensive_operations(): int {
    println("=== 测试内存密集型操作 ===");
    
    // 测试大量变量分配
    i : int = 0;
    total : int = 0;
    while (i < 1000) {
        // 创建临时变量进行计算
        temp1 : int = i * 2;
        temp2 : int = temp1 + 5;
        temp3 : int = temp2 * 3;
        temp4 : int = temp3 - 1;
        temp5 : int = temp4 / 2;
        
        // 累加结果
        total = total + temp5;
        i = i + 1;
    };
    
    println("大量变量分配测试完成");
    return total;
};

fn test_array_operations(): int {
    println("=== 测试数组操作 ===");
    
    // 模拟数组操作（通过多个变量）
    arr0 : int = 0;
    arr1 : int = 1;
    arr2 : int = 2;
    arr3 : int = 3;
    arr4 : int = 4;
    arr5 : int = 5;
    arr6 : int = 6;
    arr7 : int = 7;
    arr8 : int = 8;
    arr9 : int = 9;
    
    // 对数组进行操作
    sum : int = arr0 + arr1 + arr2 + arr3 + arr4;
    sum = sum + arr5 + arr6 + arr7 + arr8 + arr9;
    
    // 重复操作以增加内存压力
    i : int = 0;
    while (i < 100) {
        temp_sum : int = sum * 2;
        temp_avg : int = temp_sum / 10;
        temp_result : int = temp_avg + i;
        sum = temp_result;
        i = i + 1;
    };
    
    println("数组操作测试完成");
    return sum;
};

fn test_nested_calculations(): int {
    println("=== 测试嵌套计算 ===");
    
    result : int = 0;
    outer : int = 0;
    
    while (outer < 50) {
        inner : int = 0;
        local_sum : int = 0;
        
        while (inner < 20) {
            // 创建多层嵌套的临时变量
            level1 : int = inner * outer;
            level2 : int = level1 + 10;
            level3 : int = level2 * 2;
            level4 : int = level3 - 5;
            level5 : int = level4 / 3;
            
            local_sum = local_sum + level5;
            inner = inner + 1;
        };
        
        result = result + local_sum;
        outer = outer + 1;
    };
    
    println("嵌套计算测试完成");
    return result;
};

fn test_string_like_operations(): int {
    println("=== 测试字符串类操作 ===");
    
    // 模拟字符串操作（通过整数运算）
    char1 : int = 65;  // 'A'
    char2 : int = 66;  // 'B'
    char3 : int = 67;  // 'C'
    char4 : int = 68;  // 'D'
    char5 : int = 69;  // 'E'
    
    // 模拟字符串拼接和处理
    i : int = 0;
    result : int = 0;
    
    while (i < 200) {
        // 模拟字符串操作
        concat1 : int = char1 + char2;
        concat2 : int = char3 + char4;
        concat3 : int = char5 + i;
        
        // 模拟字符串长度计算
        length : int = concat1 + concat2 + concat3;
        
        // 模拟字符串比较
        comparison : int = length - (char1 * 5);
        
        result = result + comparison;
        i = i + 1;
    };
    
    println("字符串类操作测试完成");
    return result;
};

fn test_function_call_overhead(): int {
    println("=== 测试函数调用开销 ===");
    
    total : int = 0;
    i : int = 0;
    
    while (i < 100) {
        // 多次调用函数增加内存分配压力
        result1 : int = test_simple_calculation(i);
        result2 : int = test_simple_calculation(i + 1);
        result3 : int = test_simple_calculation(i + 2);
        
        total = total + result1 + result2 + result3;
        i = i + 1;
    };
    
    println("函数调用开销测试完成");
    return total;
};

fn test_simple_calculation(x: int): int {
    // 简单计算函数，用于测试函数调用开销
    temp1 : int = x * 2;
    temp2 : int = temp1 + 5;
    temp3 : int = temp2 - 1;
    return temp3;
};

fn main(): int {
    println("=== CodeNothing v0.7.5 内存池性能基准测试 ===");
    println("测试内存预分配池的性能提升效果");
    println("");
    
    // 执行各种内存密集型测试
    result1 : int = test_memory_intensive_operations();
    result2 : int = test_array_operations();
    result3 : int = test_nested_calculations();
    result4 : int = test_string_like_operations();
    result5 : int = test_function_call_overhead();
    
    // 计算总结果
    total_result : int = result1 + result2 + result3 + result4 + result5;
    
    println("");
    println("=== 测试结果汇总 ===");
    println("内存密集型操作结果: " + result1);
    println("数组操作结果: " + result2);
    println("嵌套计算结果: " + result3);
    println("字符串类操作结果: " + result4);
    println("函数调用开销结果: " + result5);
    println("总计算结果: " + total_result);
    println("");
    println("内存池性能基准测试完成!");
    
    return 0;
};
