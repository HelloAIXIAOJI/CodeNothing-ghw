// CodeNothing v0.7.4 变量生命周期优化测试
using lib <io>;
using ns std;

fn main(): int {
    std::println("=== CodeNothing v0.7.4 变量生命周期优化测试 ===");
    
    // 测试1: 局部变量优化
    test_local_variable_optimization();
    
    // 测试2: 循环中的变量访问优化
    test_loop_variable_optimization();
    
    // 测试3: 函数参数优化
    test_function_parameter_optimization(100, 200);
    
    // 测试4: 复杂表达式优化
    test_complex_expression_optimization();
    
    std::println("变量生命周期优化测试完成!");
    return 0;
};

// 测试局部变量优化
fn test_local_variable_optimization(): void {
    std::println("=== 测试1: 局部变量优化 ===");

    // 这些变量应该被标记为安全（单次赋值，局部作用域）
    a : int = 10;
    b : int = 20;
    c : int = 30;

    // 大量变量访问操作
    result : int = 0;
    i : int = 0;
    while (i < 1000) {
        // 这些变量访问应该被优化（跳过边界检查）
        temp : int = a + b + c;
        result = result + temp;
        i = i + 1;
    };

    std::println("局部变量优化测试结果: " + std::to_string(result));
};

// 测试循环中的变量访问优化
fn test_loop_variable_optimization(): void {
    std::println("=== 测试2: 循环变量优化 ===");

    sum : int = 0;
    multiplier : int = 2; // 应该被标记为安全

    // 循环变量可能不会被优化（因为有边界问题）
    i : int = 0;
    while (i < 500) {
        // multiplier的访问应该被优化
        sum = sum + (i * multiplier);
        i = i + 1;
    };

    std::println("循环变量优化测试结果: " + std::to_string(sum));
};

// 测试函数参数优化
fn test_function_parameter_optimization(param1 : int, param2 : int): void {
    std::println("=== 测试3: 函数参数优化 ===");
    
    // 函数参数应该被标记为安全
    result : int = 0;
    i : int = 0;
    while (i < 300) {
        // param1和param2的访问应该被优化
        result = result + param1 + param2;
        i = i + 1;
    };
    
    std::println("函数参数优化测试结果: " + result);
};

// 测试复杂表达式优化
fn test_complex_expression_optimization(): void {
    std::println("=== 测试4: 复杂表达式优化 ===");
    
    // 这些变量应该被标记为安全
    x : int = 5;
    y : int = 10;
    z : int = 15;
    
    total : int = 0;
    i : int = 0;
    while (i < 200) {
        // 复杂表达式中的变量访问应该被优化
        temp1 : int = x * y + z;
        temp2 : int = (x + y) * z;
        temp3 : int = x + y + z;
        
        total = total + temp1 + temp2 + temp3;
        i = i + 1;
    };
    
    std::println("复杂表达式优化测试结果: " + total);
};

// 测试跨作用域变量（应该不被优化）
fn test_cross_scope_variables(): void {
    std::println("=== 测试5: 跨作用域变量（不优化） ===");
    
    outer_var : int = 100;
    
    if (outer_var > 50) {
        // 在内部作用域中访问外部变量
        inner_result : int = outer_var * 2;
        std::println("跨作用域访问结果: " + inner_result);
    };
};
