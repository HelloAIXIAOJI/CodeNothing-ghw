// 🚀 CodeNothing v0.6.5 轻量级循环性能基准测试
// 验证JIT编译性能提升

using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 CodeNothing v0.6.5 轻量级循环性能基准测试");
    std::println("=====================================");
    
    // 📊 基准测试1：简单算术循环（1000次迭代）
    std::println("🧮 基准测试1：简单算术循环");
    sum : int = 0;
    for (i : 1..1001) {  // 1000次迭代
        sum = sum + i;
    };
    std::println("简单算术循环结果: " + sum);
    std::println("-------------------------------------");
    
    // 📊 基准测试2：复杂表达式循环（500次迭代）
    std::println("🔢 基准测试2：复杂表达式循环");
    result : int = 0;
    for (i : 1..501) {  // 500次迭代
        temp : int = i * i + i - 1;
        result = result + temp;
    };
    std::println("复杂表达式循环结果: " + result);
    std::println("-------------------------------------");
    
    // 📊 基准测试3：嵌套循环（10x10=100次迭代）
    std::println("🔄 基准测试3：嵌套循环");
    total : int = 0;
    for (i : 1..11) {  // 外层10次
        for (j : 1..11) {  // 内层10次，总共100次
            total = total + i * j;
        };
    };
    std::println("嵌套循环结果: " + total);
    std::println("-------------------------------------");
    
    // 📊 基准测试4：变量声明循环（200次迭代）
    std::println("📝 基准测试4：变量声明循环");
    accumulator : int = 0;
    for (i : 1..201) {  // 200次迭代
        temp : int = i * 2;
        accumulator = accumulator + temp;
    };
    std::println("变量声明循环结果: " + accumulator);
    std::println("-------------------------------------");
    
    // 📊 基准测试5：复合运算循环（150次迭代）
    std::println("⚡ 基准测试5：复合运算循环");
    product : int = 1;
    for (i : 1..151) {  // 150次迭代
        product = product * 2;
        product = product % 1000;  // 防止溢出
    };
    std::println("复合运算循环结果: " + product);
    std::println("=====================================");
    
    std::println("🎉 轻量级基准测试完成！");
    std::println("请查看JIT统计信息验证性能提升");
    
    return 0;
};
