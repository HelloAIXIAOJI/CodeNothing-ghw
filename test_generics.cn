// 测试泛型功能的示例代码

// 泛型函数示例
fn max<T>(a: T, b: T) : T {
    if (a > b) {
        return a;
    } else {
        return b;
    };
};

// 泛型类示例
class Container<T> {
    private T value;
    
    constructor(T initial_value) {
        this.value = initial_value;
    };
    
    fn get<T>() : T {
        return this.value;
    };
    
    fn set<T>(T new_value) : void {
        this.value = new_value;
    };
};

// 泛型枚举示例
enum Option<T> {
    Some(T value),
    None
};

// 泛型接口示例
interface Comparable<T> {
    fn compare(T other) : int;
};

// 使用泛型的函数
fn test_generics() : void {
    // 测试泛型函数调用
    let int_max = max<int>(10, 20);
    let float_max = max<float>(3.14, 2.71);
    
    // 测试泛型对象创建
    let int_container = new Container<int>(42);
    let string_container = new Container<string>("Hello");
    
    // 测试泛型方法调用
    let value = int_container.get<int>();
    int_container.set<int>(100);
    
    // 测试泛型枚举
    let some_value = Option<int>::Some(42);
    let none_value = Option<int>::None;
    
    // 测试类型转换
    let converted = value as float;
    
    // 测试类型查询
    let type_info = typeof(value);
    
    print("泛型测试完成");
};

// 带约束的泛型函数
fn sort<T: Comparable<T>>(array<T> items) : array<T> where T: Copy {
    // 简单的排序实现
    return items;
};

// 主函数
fn main() : void {
    test_generics();
};
