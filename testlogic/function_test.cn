// 函数解析器测试
// 测试函数定义、参数解析、返回类型等

using lib <io>;
using ns std;

fn main() : int {
    std::println("🔧 函数解析器测试");
    std::println("==================");
    
    // 测试1: 基础函数调用
    std::println("测试1: 基础函数调用");
    test_basic_functions();
    
    // 测试2: 带参数的函数
    std::println("测试2: 带参数的函数");
    test_parameter_functions();
    
    // 测试3: 不同返回类型的函数
    std::println("测试3: 不同返回类型的函数");
    test_return_types();
    
    std::println("✅ 函数解析器测试完成");
    return 0;
};

fn test_basic_functions() : void {
    // 调用无参数函数
    say_hello();
    print_separator();
    
    std::println("  ✅ 基础函数调用正常");
};

fn test_parameter_functions() : void {
    // 调用带参数的函数
    greet_person("Alice");
    greet_person("Bob");
    
    // 调用多参数函数
    result : int = add_two_numbers(5, 3);
    std::println("  - 加法结果: 5 + 3 = " + result);
    
    result2 : int = multiply_three_numbers(2, 3, 4);
    std::println("  - 乘法结果: 2 * 3 * 4 = " + result2);
    
    std::println("  ✅ 参数函数调用正常");
};

fn test_return_types() : void {
    // 测试不同返回类型
    int_result : int = get_number();
    float_result : float = get_pi();
    string_result : string = get_message();
    bool_result : bool = is_positive(10);
    
    std::println("  - 整数返回: " + int_result);
    std::println("  - 浮点返回: " + float_result);
    std::println("  - 字符串返回: " + string_result);
    std::println("  - 布尔返回: " + bool_result);
    
    std::println("  ✅ 返回类型测试正常");
};

// 测试函数定义

// 无参数无返回值函数
fn say_hello() : void {
    std::println("  - Hello from say_hello()");
};

fn print_separator() : void {
    std::println("  - ----------");
};

// 带参数无返回值函数
fn greet_person(name : string) : void {
    std::println("  - Hello, " + name + "!");
};

// 带参数有返回值函数
fn add_two_numbers(a : int, b : int) : int {
    return a + b;
};

fn multiply_three_numbers(a : int, b : int, c : int) : int {
    return a * b * c;
};

// 不同返回类型的函数
fn get_number() : int {
    return 42;
};

fn get_pi() : float {
    return 3.14159;
};

fn get_message() : string {
    return "CodeNothing is awesome!";
};

fn is_positive(x : int) : bool {
    return x > 0;
};
