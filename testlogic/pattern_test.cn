// 模式匹配解析器测试
// 测试我们新实现的模式匹配语法

using lib <io>;
using ns std;

fn main() : int {
    std::println("🎯 模式匹配解析器测试");
    std::println("======================");
    
    // 测试1: 基础字面量模式匹配
    std::println("测试1: 基础字面量模式匹配");
    test_literal_patterns();
    
    // 测试2: 变量绑定模式
    std::println("测试2: 变量绑定模式");
    test_variable_binding();
    
    // 测试3: 通配符模式
    std::println("测试3: 通配符模式");
    test_wildcard_patterns();
    
    // 测试4: 多选模式
    std::println("测试4: 多选模式");
    test_or_patterns();
    
    std::println("✅ 模式匹配解析器测试完成");
    return 0;
};

fn test_literal_patterns() : void {
    // 整数字面量匹配
    value : int = 42;
    match (value) {
        1 => {
            std::println("  - 匹配到1");
        };
        42 => {
            std::println("  - ✅ 匹配到42");
        };
        100 => {
            std::println("  - 匹配到100");
        };
    };
    
    // 字符串字面量匹配
    name : string = "CodeNothing";
    match (name) {
        "Rust" => {
            std::println("  - 匹配到Rust");
        };
        "CodeNothing" => {
            std::println("  - ✅ 匹配到CodeNothing");
        };
        "Python" => {
            std::println("  - 匹配到Python");
        };
    };
    
    // 布尔值匹配
    flag : bool = true;
    match (flag) {
        true => {
            std::println("  - ✅ 匹配到true");
        };
        false => {
            std::println("  - 匹配到false");
        };
    };
    
    std::println("  ✅ 字面量模式匹配正常");
};

fn test_variable_binding() : void {
    number : int = 123;
    match (number) {
        0 => {
            std::println("  - 匹配到零");
        };
        x => {
            std::println("  - ✅ 绑定变量x = " + x);
        };
    };
    
    std::println("  ✅ 变量绑定模式正常");
};

fn test_wildcard_patterns() : void {
    unknown : int = 999;
    match (unknown) {
        1 => {
            std::println("  - 匹配到1");
        };
        2 => {
            std::println("  - 匹配到2");
        };
        _ => {
            std::println("  - ✅ 通配符匹配: 其他值");
        };
    };
    
    std::println("  ✅ 通配符模式正常");
};

fn test_or_patterns() : void {
    grade : int = 85;
    match (grade) {
        90 | 91 | 92 | 93 | 94 | 95 => {
            std::println("  - 优秀 (A)");
        };
        80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 => {
            std::println("  - ✅ 良好 (B)");
        };
        70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 => {
            std::println("  - 中等 (C)");
        };
        _ => {
            std::println("  - 需要改进");
        };
    };
    
    std::println("  ✅ 多选模式正常");
};
