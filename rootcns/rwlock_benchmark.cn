// 🚀 v0.6.2 读写锁性能基准测试
using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 v0.6.2 读写锁性能基准测试");
    
    // 创建大量指针（写操作）
    std::println("=== 阶段1: 大量内存分配 ===");
    
    values : [int; 20] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    ptrs : [*int; 20];
    
    i : int = 0;
    while (i < 20) {
        ptrs[i] = &values[i];
        i = i + 1;
    };
    
    std::println("✅ 分配了20个指针");
    
    // 大量读取操作（读锁优化的重点）
    std::println("=== 阶段2: 大量并发读取操作 ===");
    
    total : int = 0;
    round : int = 0;
    
    while (round < 10) {
        j : int = 0;
        while (j < 20) {
            value : int = *ptrs[j];
            total = total + value;
            j = j + 1;
        };
        round = round + 1;
    };
    
    std::println("✅ 完成200次指针解引用操作");
    std::println("总和:", total);
    
    // 验证读写锁性能
    std::println("=== 阶段3: 混合读写操作 ===");
    
    k : int = 0;
    while (k < 5) {
        // 读操作
        temp1 : int = *ptrs[0];
        temp2 : int = *ptrs[1];
        temp3 : int = *ptrs[2];
        
        // 写操作（修改值）
        values[k] = values[k] * 2;
        
        // 更多读操作
        temp4 : int = *ptrs[k];
        temp5 : int = *ptrs[k+1];
        
        k = k + 1;
    };
    
    std::println("✅ 混合读写操作完成");
    
    std::println("🎉 基准测试完成！");
    std::println("📊 查看读写锁统计信息以了解性能提升");
    
    return 0;
};
