// 🚀 v0.6.2 内存密集型基准测试 - 专门测试读写锁优化
using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 内存密集型基准测试开始");
    
    // 创建大量指针（内存分配操作）
    values : [int; 1000];
    ptrs : [*int; 1000];
    
    // 初始化数组
    i : int = 0;
    while (i < 1000) {
        values[i] = i * 2;
        i = i + 1;
    };
    
    // 创建指针（大量写操作）
    j : int = 0;
    while (j < 1000) {
        ptrs[j] = &values[j];
        j = j + 1;
    };
    
    std::println("✅ 创建了1000个指针");
    
    // 大量读取操作（这里应该体现读写锁的优势）
    total : int = 0;
    round : int = 0;
    
    while (round < 100) {
        k : int = 0;
        while (k < 1000) {
            value : int = *ptrs[k];  // 内存读取操作
            total = total + value;
            k = k + 1;
        };
        round = round + 1;
    };
    
    std::println("✅ 完成100,000次指针解引用操作");
    std::println("总和:", total);
    
    std::println("🎉 内存密集型基准测试完成！");
    
    return 0;
};
