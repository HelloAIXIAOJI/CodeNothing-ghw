// 🔥 嵌套命名空间测试 - 测试ns套ns的功能
using lib <io>;
using ns std;

fn main() : int {
    std::println("🔥 开始嵌套命名空间测试 🔥");
    
    // ========== 测试1: 二级嵌套 ==========
    std::println("=== 测试1: 二级嵌套 ===");
    outer::inner::hello();
    std::println("✅ 二级嵌套测试通过");
    
    // ========== 测试2: 三级嵌套 ==========
    std::println("=== 测试2: 三级嵌套 ===");
    level1::level2::level3::deep_function();
    std::println("✅ 三级嵌套测试通过");
    
    // ========== 测试3: 四级嵌套 ==========
    std::println("=== 测试3: 四级嵌套 ===");
    a::b::c::d::very_deep();
    std::println("✅ 四级嵌套测试通过");
    
    // ========== 测试4: 嵌套命名空间中的函数调用 ==========
    std::println("=== 测试4: 嵌套命名空间中的函数调用 ===");
    outer::inner::call_sibling();
    std::println("✅ 嵌套命名空间函数调用测试通过");
    
    // ========== 测试5: 不同层级的相同函数名 ==========
    std::println("=== 测试5: 不同层级的相同函数名 ===");
    outer::test();
    outer::inner::test();
    level1::test();
    level1::level2::test();
    level1::level2::level3::test();
    std::println("✅ 不同层级相同函数名测试通过");
    
    std::println("🎉 所有嵌套命名空间测试通过！ 🎉");
    return 0;
};

// ========== 二级嵌套命名空间 ==========
ns outer {
    fn test() : void {
        std::println("  ✓ outer::test");
    };
    
    ns inner {
        fn hello() : void {
            std::println("  ✓ 二级嵌套: outer::inner::hello");
        };
        
        fn test() : void {
            std::println("  ✓ outer::inner::test");
        };
        
        fn call_sibling() : void {
            std::println("  ✓ 嵌套命名空间中调用其他函数");
            hello();
        };
    };
};

// ========== 三级嵌套命名空间 ==========
ns level1 {
    fn test() : void {
        std::println("  ✓ level1::test");
    };
    
    ns level2 {
        fn test() : void {
            std::println("  ✓ level1::level2::test");
        };
        
        ns level3 {
            fn deep_function() : void {
                std::println("  ✓ 三级嵌套: level1::level2::level3::deep_function");
            };
            
            fn test() : void {
                std::println("  ✓ level1::level2::level3::test");
            };
        };
    };
};

// ========== 四级嵌套命名空间 ==========
ns a {
    ns b {
        ns c {
            ns d {
                fn very_deep() : void {
                    std::println("  ✓ 四级嵌套: a::b::c::d::very_deep");
                };
            };
        };
    };
};
