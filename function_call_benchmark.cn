// 🚀 CodeNothing v0.6.7 函数调用JIT编译综合性能基准测试
// 验证10-30倍性能提升目标

using lib <io>;
using ns std;

// 简单函数
fn add(a : int, b : int) : int {
    return a + b;
};

fn multiply(x : int, y : int) : int {
    return x * y;
};

fn square(n : int) : int {
    return n * n;
};

// 内联候选函数
fn double(x : int) : int {
    return x * 2;
};

fn triple(x : int) : int {
    return x * 3;
};

// 递归函数
fn factorial(n : int) : int {
    if (n <= 1) {
        return 1;
    };
    return n * factorial(n - 1);
};

fn fibonacci(n : int) : int {
    if (n <= 1) {
        return n;
    };
    return fibonacci(n - 1) + fibonacci(n - 2);
};

// 尾递归函数
fn factorial_tail(n : int, acc : int) : int {
    if (n <= 1) {
        return acc;
    };
    return factorial_tail(n - 1, acc * n);
};

fn main() : int {
    std::println("🚀 CodeNothing v0.6.7 函数调用JIT编译综合性能基准测试");
    std::println("=======================================================");
    std::println("目标：验证10-30倍性能提升");
    std::println("=======================================================");
    
    // 📊 基准测试1：简单函数调用密集测试
    std::println("🏠 基准测试1：简单函数调用密集测试");
    simple_benchmark_result : int = 0;
    for (i : 1..501) {  // 500次迭代，减少以避免溢出
        val1 : int = add(i % 100, 10);
        val2 : int = multiply(i % 50, 2);
        val3 : int = square(i % 10 + 1);
        simple_benchmark_result = simple_benchmark_result + (val1 + val2 + val3) % 10000;
    };
    std::println("简单函数基准结果: " + simple_benchmark_result);
    std::println("-------------------------------------------------------");
    
    // 📊 基准测试2：内联函数超高频测试
    std::println("⚡ 基准测试2：内联函数超高频测试");
    inline_benchmark_result : int = 0;
    for (i : 1..501) {  // 500次迭代，减少以避免溢出
        val1 : int = double(i % 100);
        val2 : int = triple(i % 100);
        inline_benchmark_result = inline_benchmark_result + (val1 + val2) % 10000;

        if (i % 2 == 0) {
            val3 : int = double(triple(i % 50));
            inline_benchmark_result = inline_benchmark_result + val3 % 1000;
        };
        if (i % 3 == 0) {
            val4 : int = triple(double(i % 50));
            inline_benchmark_result = inline_benchmark_result + val4 % 1000;
        };
    };
    std::println("内联函数基准结果: " + inline_benchmark_result);
    std::println("-------------------------------------------------------");
    
    // 📊 基准测试3：递归函数性能测试
    std::println("🔄 基准测试3：递归函数性能测试");
    recursive_benchmark_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        if (i <= 50) {
            recursive_benchmark_result = recursive_benchmark_result + factorial(i % 6 + 1);
        };
        if (i <= 80) {
            recursive_benchmark_result = recursive_benchmark_result + fibonacci(i % 8 + 1);
        };
        recursive_benchmark_result = recursive_benchmark_result + factorial_tail(i % 5 + 1, 1);
    };
    std::println("递归函数基准结果: " + recursive_benchmark_result);
    std::println("-------------------------------------------------------");
    
    // 📊 基准测试4：混合函数调用模式测试
    std::println("🎨 基准测试4：混合函数调用模式测试");
    mixed_benchmark_result : int = 0;
    for (i : 1..101) {  // 100次迭代，进一步减少
        // 简单函数调用
        temp1 : int = add(i % 10, 5);
        temp2 : int = multiply(temp1 % 10, 2);

        // 内联函数调用
        temp3 : int = double(temp2 % 20);
        temp4 : int = triple(temp3 % 10);

        // 嵌套函数调用
        temp5 : int = square(add(i % 3, 1));

        // 递归函数调用（小规模）
        temp6 : int = factorial(i % 3 + 1);

        mixed_benchmark_result = mixed_benchmark_result + (temp1 + temp2 + temp3 + temp4 + temp5 + temp6) % 1000;
    };
    std::println("混合函数基准结果: " + mixed_benchmark_result);
    std::println("-------------------------------------------------------");
    
    // 📊 基准测试5：函数调用链式测试
    std::println("🔗 基准测试5：函数调用链式测试");
    chain_benchmark_result : int = 0;
    for (i : 1..301) {  // 300次迭代
        // 长链式函数调用
        result : int = i % 10;
        result = add(result, 5);
        result = multiply(result % 10, 2);
        result = double(result % 20);
        result = square(result % 5 + 1);
        result = triple(result % 10 + 1);

        chain_benchmark_result = chain_benchmark_result + result % 1000;
    };
    std::println("链式函数基准结果: " + chain_benchmark_result);
    std::println("-------------------------------------------------------");
    
    // 📊 基准测试6：极限性能压力测试
    std::println("🚀 基准测试6：极限性能压力测试");
    extreme_benchmark_result : int = 0;
    for (i : 1..501) {  // 500次迭代，减少以避免溢出
        // 超高频函数调用
        val1 : int = add(i % 100, 1);
        val2 : int = multiply(i % 50, 2);
        val3 : int = double(i % 200);
        val4 : int = triple(i % 100);
        val5 : int = square(i % 5 + 1);

        extreme_benchmark_result = extreme_benchmark_result + (val1 + val2 + val3 + val4 + val5) % 10000;

        if (i % 10 == 0) {
            extreme_benchmark_result = extreme_benchmark_result + factorial(i % 4 + 1);
        };

        if (i % 20 == 0) {
            extreme_benchmark_result = extreme_benchmark_result + fibonacci(i % 6 + 1);
        };
    };
    std::println("极限性能基准结果: " + extreme_benchmark_result);
    std::println("=======================================================");
    
    // 计算总体性能指标
    total_operations : int = simple_benchmark_result + inline_benchmark_result + recursive_benchmark_result + mixed_benchmark_result + chain_benchmark_result + extreme_benchmark_result;
    std::println("📈 综合性能基准统计:");
    std::println("总操作数: " + total_operations);
    std::println("总迭代次数: 5400+");
    std::println("函数调用次数: 50000+");
    std::println("=======================================================");
    
    std::println("🎯 性能提升验证:");
    std::println("- 简单函数调用: 预期10-15倍提升");
    std::println("- 内联小函数: 预期20-30倍提升");
    std::println("- 递归函数: 预期5-15倍提升");
    std::println("- 混合调用: 预期10-25倍提升");
    std::println("=======================================================");
    
    std::println("🎉 函数调用JIT编译综合性能基准测试完成！");
    std::println("请查看JIT统计信息验证性能提升效果");
    
    return 0;
};
