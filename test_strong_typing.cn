// 强类型系统测试

// 测试显式类型声明
fn test_explicit_types() : void {
    // 显式类型声明 - 强类型语言的标准做法
    x: int = 42;
    y: float = 3.14;
    z: string = "Hello";
    b: bool = true;
    l: long = 1000000;
    
    // 这些都是安全的，因为类型明确
};

// 测试自动类型推断
fn test_auto_inference() : void {
    // 自动类型推断 - 编译器推断类型，但仍然是强类型
    a: auto = 100;      // 推断为 int
    b: auto = 2.71;     // 推断为 float
    c: auto = "World";  // 推断为 string
    d: auto = false;    // 推断为 bool
    e: auto = 999999;   // 推断为 int (或 long，取决于实现)
    
    // 复杂表达式的类型推断
    sum: auto = a + 50;         // int + int = int
    product: auto = b * 2.0;    // float * float = float
    concat: auto = c + "!";     // string + string = string
};

// 测试类型安全 - 不允许隐式转换
fn test_type_safety() : void {
    x: int = 42;
    y: float = 3.14;
    
    // 在强类型语言中，这些操作需要显式转换
    // 不能直接混合不同类型的运算
    
    // 正确的做法是使用显式转换（如果语法支持）
    // result: auto = x + (y as int);  // 需要显式转换
    
    // 或者保持类型一致
    int_result: auto = x + 10;      // int + int = int
    float_result: auto = y + 1.0;   // float + float = float
};

// 主函数
fn main() : void {
    test_explicit_types();
    test_auto_inference();
    test_type_safety();
};
