fn main() : int {
    // 测试break和continue语句
    result1 : int = test_break();
    result2 : int = test_continue();
    result3 : int = test_nested_loops();
    
    // 如果所有测试都通过，返回0
    if (result1 != 0 || result2 != 0 || result3 != 0) {
        return 1; // 有测试失败
    };
    
    return 0; // 所有测试通过
};

// 测试break语句
fn test_break() : int {
    sum : int = 0;
    
    // 使用for循环，当i=3时跳出循环
    for (i : 1..5) {
        sum += i;
        if (i == 3) {
            break;  // 跳出循环，sum应为1+2+3=6
        };
    };
    
    // 验证结果
    if (sum != 6) {
        return 1;  // 测试失败
    };
    
    sum = 0;
    i : int = 1;
    
    // 使用while循环，当i=3时跳出循环
    while (i <= 5) {
        sum += i;
        if (i == 3) {
            break;  // 跳出循环，sum应为1+2+3=6
        };
        i++;
    };
    
    // 验证结果
    if (sum != 6) {
        return 2;  // 测试失败
    };
    
    return 0;  // 测试成功
};

// 测试continue语句
fn test_continue() : int {
    sum : int = 0;
    
    // 使用for循环，跳过偶数
    for (i : 1..5) {
        if (i % 2 == 0) {
            continue;  // 跳过当前迭代，sum应为1+3+5=9
        };
        sum += i;
    };
    
    // 验证结果
    if (sum != 9) {
        return 1;  // 测试失败
    };
    
    sum = 0;
    i : int = 0;
    
    // 使用while循环，跳过偶数
    while (i < 5) {
        i++;
        if (i % 2 == 0) {
            continue;  // 跳过当前迭代，sum应为1+3+5=9
        };
        sum += i;
    };
    
    // 验证结果
    if (sum != 9) {
        return 2;  // 测试失败
    };
    
    return 0;  // 测试成功
};

// 测试嵌套循环中的break和continue
fn test_nested_loops() : int {
    sum : int = 0;
    
    // 嵌套for循环，外层循环1到3，内层循环1到3
    for (i : 1..3) {
        for (j : 1..3) {
            if (i == 2 && j == 2) {
                break;  // 当i=2且j=2时，跳出内层循环
            };
            sum += i * j;  // 累加i*j
        };
    };
    
    // 计算期望结果：
    // i=1, j=1: sum += 1*1 = 1
    // i=1, j=2: sum += 1*2 = 3
    // i=1, j=3: sum += 1*3 = 6
    // i=2, j=1: sum += 2*1 = 8
    // i=2, j=2: break，跳出内层循环
    // i=3, j=1: sum += 3*1 = 11
    // i=3, j=2: sum += 3*2 = 17
    // i=3, j=3: sum += 3*3 = 26
    
    // 验证结果
    if (sum != 26) {
        return 1;  // 测试失败
    };
    
    return 0;  // 测试成功
}; 