using lib <io>;

ns calculator {
    fn add(a : int, b : int) : int {
        return a + b;
    };
    
    fn multiply(a : int, b : int) : int {
        return a * b;
    };
};

fn processMenu(choice : int) : void {
    using ns calculator;
    
    std::println("处理菜单选择");
    
    switch (choice) {
        case 1 {
            result : int = add(10, 5);
            std::println("加法结果: 15");
            break;
        };
        case 2 {
            std::println("减法选项");
            break;
        };
        case 3 {
            result : int = multiply(7, 3);
            std::println("乘法结果: 21");
            break;
        };
        default {
            std::println("无效选择");
        };
    };
};

fn processStatus(status : string) : void {
    std::println("处理状态");
    
    switch (status) {
        case "success" {
            std::println("操作成功");
            break;
        };
        case "error" {
            std::println("操作失败");
            break;
        };
        case "warning" {
            std::println("警告信息");
            break;
        };
        default {
            std::println("未知状态");
        };
    };
};

fn demonstrateFallThrough(value : int) : void {
    std::println("Fall-through 演示");
    
    switch (value) {
        case 1 {
            std::println("Case 1");
        };
        case 2 {
            std::println("Case 2 (fall-through)");
        };
        case 3 {
            std::println("Case 3 (fall-through)");
            break;
        };
        default {
            std::println("Default case");
        };
    };
};

fn processGrade(grade : int) : string {
    result : string = "";
    
    switch (grade) {
        case 90 {
            result = "A";
            break;
        };
        case 80 {
            result = "B";
            break;
        };
        case 70 {
            result = "C";
            break;
        };
        default {
            result = "F";
        };
    };
    
    return result;
};

fn nestedSwitchDemo(category : int, subcategory : int) : void {
    std::println("嵌套 Switch 演示");
    
    switch (category) {
        case 1 {
            std::println("电子产品类别");
            
            switch (subcategory) {
                case 1 {
                    std::println("手机");
                    break;
                };
                case 2 {
                    std::println("电脑");
                    break;
                };
                default {
                    std::println("其他电子产品");
                };
            };
            break;
        };
        case 2 {
            std::println("服装类别");
            
            switch (subcategory) {
                case 1 {
                    std::println("上衣");
                    break;
                };
                case 2 {
                    std::println("裤子");
                    break;
                };
                default {
                    std::println("其他服装");
                };
            };
            break;
        };
        default {
            std::println("未知类别");
        };
    };
};

fn main() : int {
    std::println("=== Switch 语句演示 ===");
    
    // 示例 1: 基本菜单处理
    std::println("1. 菜单处理:");
    processMenu(1);
    processMenu(2);
    processMenu(99);
    std::println("");
    
    // 示例 2: 字符串状态处理
    std::println("2. 状态处理:");
    processStatus("success");
    processStatus("error");
    processStatus("unknown");
    std::println("");
    
    // 示例 3: Fall-through 演示
    std::println("3. Fall-through 演示:");
    demonstrateFallThrough(1);
    std::println("---");
    demonstrateFallThrough(4);
    std::println("");
    
    // 示例 4: 返回值处理
    std::println("4. 成绩处理:");
    grade1 : string = processGrade(90);
    std::println("90分等级: A");
    grade2 : string = processGrade(75);
    std::println("75分等级: C");
    std::println("");
    
    // 示例 5: 嵌套 Switch
    std::println("5. 嵌套 Switch:");
    nestedSwitchDemo(1, 1);
    nestedSwitchDemo(2, 2);
    nestedSwitchDemo(3, 1);
    std::println("");
    
    // 示例 6: 布尔值 Switch
    std::println("6. 布尔值 Switch:");
    isActive : bool = true;
    
    switch (isActive) {
        case true {
            std::println("系统激活");
            break;
        };
        case false {
            std::println("系统未激活");
            break;
        };
    };
    
    std::println("");
    std::println("=== 演示完成 ===");
    
    return 0;
};