// 🔬 边界情况测试 - 测试各种极端边界情况
using lib <io>;
using ns std;
using ns edge;

fn main() : int {
    std::println("🔬 开始边界情况测试 🔬");
    
    // ========== 测试1: 空函数体 ==========
    std::println("=== 测试1: 空函数体 ===");
    edge::empty_function();
    std::println("✅ 空函数体测试通过");
    
    // ========== 测试2: 只有return的函数 ==========
    std::println("=== 测试2: 只有return的函数 ===");
    edge::only_return();
    std::println("✅ 只有return的函数测试通过");
    
    // ========== 测试3: 多个return语句 ==========
    std::println("=== 测试3: 多个return语句 ===");
    edge::multiple_returns(true);
    edge::multiple_returns(false);
    std::println("✅ 多个return语句测试通过");
    
    // ========== 测试4: 深度嵌套if语句 ==========
    std::println("=== 测试4: 深度嵌套if语句 ===");
    edge::nested_if(5);
    std::println("✅ 深度嵌套if语句测试通过");
    
    // ========== 测试5: 参数边界值 ==========
    std::println("=== 测试5: 参数边界值 ===");
    edge::boundary_test(0);
    edge::boundary_test(1);
    edge::boundary_test(2);
    std::println("✅ 参数边界值测试通过");
    
    // ========== 测试6: 布尔逻辑边界 ==========
    std::println("=== 测试6: 布尔逻辑边界 ===");
    edge::bool_test(true, false);
    edge::bool_test(false, true);
    edge::bool_test(true, true);
    edge::bool_test(false, false);
    std::println("✅ 布尔逻辑边界测试通过");
    
    std::println("🎉 所有边界情况测试通过！系统极其稳定！ 🎉");
    return 0;
};

// ========== 边界情况命名空间 ==========
ns edge {
    // 空函数体
    fn empty_function() : void {
        // 什么都不做
    };
    
    // 只有return的函数
    fn only_return() : void {
        return;
    };
    
    // 多个return语句
    fn multiple_returns(flag : bool) : void {
        if (flag) {
            std::println("  返回路径1");
            return;
        } else {
            std::println("  返回路径2");
            return;
        };
        std::println("  这行不应该执行");
    };
    
    // 深度嵌套if语句
    fn nested_if(n : int) : void {
        if (n > 0) {
            if (n > 1) {
                if (n > 2) {
                    if (n > 3) {
                        if (n > 4) {
                            std::println("  深度嵌套: n > 4");
                        } else {
                            std::println("  深度嵌套: n = 4");
                        };
                    } else {
                        std::println("  深度嵌套: n = 3");
                    };
                } else {
                    std::println("  深度嵌套: n = 2");
                };
            } else {
                std::println("  深度嵌套: n = 1");
            };
        } else {
            std::println("  深度嵌套: n <= 0");
        };
    };
    
    // 参数边界值测试
    fn boundary_test(value : int) : void {
        if (value == 0) {
            std::println("  边界值: 零");
        } else {
            if (value > 0) {
                std::println("  边界值: 正数");
            } else {
                std::println("  边界值: 负数");
            };
        };
    };
    
    // 布尔逻辑边界测试
    fn bool_test(a : bool, b : bool) : void {
        if (a) {
            if (b) {
                std::println("  布尔: true && true");
            } else {
                std::println("  布尔: true && false");
            };
        } else {
            if (b) {
                std::println("  布尔: false && true");
            } else {
                std::println("  布尔: false && false");
            };
        };
    };
};
