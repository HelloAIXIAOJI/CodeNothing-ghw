// 🚀 v0.6.3 IO密集型基准测试 - 测试整体性能提升
using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 v0.6.3 IO密集型基准测试开始");
    
    // 测试1: 大量简单类型输出（应该受益于快速内存分配）
    std::println("测试1: 大量简单类型输出");
    
    i : int = 0;
    while (i < 30000) {
        // 每次循环都会创建临时变量进行输出
        value : int = i * 2;
        std::println("数字: " + value);
        i = i + 1;
    };
    
    std::println("✅ 完成30,000次简单类型输出");
    
    // 测试2: 混合类型输出
    std::println("测试2: 混合类型输出");
    
    j : int = 0;
    while (j < 10000) {
        // 简单类型
        int_val : int = j;
        float_val : float = 3.14;
        bool_val : bool = (j % 2 == 0);

        // 输出混合类型
        std::println("整数: " + int_val + ", 浮点: " + float_val + ", 布尔: " + bool_val);
        j = j + 1;
    };
    
    std::println("✅ 完成10,000次混合类型输出");
    
    // 测试3: 计算密集型输出
    std::println("测试3: 计算密集型输出");
    
    k : int = 0;
    while (k < 20000) {
        // 大量临时变量计算
        a : int = k;
        b : int = a * 2;
        c : int = b + 5;
        d : int = c * 3;
        result : int = d - k;
        
        std::println("k=" + k + ", result=" + result);
        k = k + 1;
    };
    
    std::println("✅ 完成20,000次计算密集型输出");
    
    std::println("🎉 IO密集型基准测试完成！");
    
    return 0;
};
