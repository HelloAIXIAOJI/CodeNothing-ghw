// 🔥 循环热点检测测试程序
using lib <io>;
using ns std;

fn main() : int {
    std::println("🔥 循环热点检测测试开始");
    
    // 测试1: While循环热点检测
    std::println("\n=== 测试1: While循环热点检测 ===");
    i : int = 0;
    sum : int = 0;
    
    while (i < 150) {  // 超过JIT阈值(100)
        sum = sum + i;
        i = i + 1;
    };
    
    std::println("While循环结果: sum = " + sum);
    
    // 测试2: For循环热点检测
    std::println("\n=== 测试2: For循环热点检测 ===");
    total : int = 0;
    
    for (j : 0..120) {  // 超过JIT阈值(100)
        total = total + j * 2;
    };
    
    std::println("For循环结果: total = " + total);
    
    // 测试3: 嵌套循环热点检测
    std::println("\n=== 测试3: 嵌套循环热点检测 ===");
    nested_sum : int = 0;
    
    for (x : 0..15) {  // 外层循环
        for (y : 0..10) {  // 内层循环，总共150次迭代
            nested_sum = nested_sum + x + y;
        };
    };
    
    std::println("嵌套循环结果: nested_sum = " + nested_sum);
    
    // 测试4: 多个独立的热点循环
    std::println("\n=== 测试4: 多个独立热点循环 ===");
    
    // 第一个热点循环
    result1 : int = 0;
    k : int = 0;
    while (k < 110) {
        result1 = result1 + k;
        k = k + 1;
    };
    std::println("第一个热点循环: result1 = " + result1);
    
    // 第二个热点循环
    result2 : int = 0;
    for (m : 0..105) {
        result2 = result2 + m * m;
    };
    std::println("第二个热点循环: result2 = " + result2);
    
    // 测试5: 循环中的复杂表达式
    std::println("\n=== 测试5: 循环中的复杂表达式 ===");
    complex_result : int = 0;
    
    for (n : 1..101) {  // 100次迭代，刚好达到阈值
        temp : int = n * n + n - 1;
        complex_result = complex_result + temp;
    };
    
    std::println("复杂表达式循环: complex_result = " + complex_result);
    
    std::println("\n🎉 循环热点检测测试完成！");
    std::println("请查看JIT性能统计报告中的循环热点信息");
    
    return 0;
};
