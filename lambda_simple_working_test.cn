using lib <io>;
using ns std;

fn main() : int {
    std::println("=== CodeNothing v0.4.2 Lambda表达式功能测试 ===");
    
    // 1. 基础数学运算测试
    std::println("1. 基础数学运算测试");
    std::println("------------------");
    
    // 模拟Lambda: x => x * 2
    x : int = 5;
    doubled : int = x * 2;
    std::println("Lambda模拟 (x => x * 2): " + x + " => " + doubled);
    
    // 模拟Lambda: (a, b) => a + b
    a : int = 3;
    b : int = 4;
    sum : int = a + b;
    std::println("Lambda模拟 ((a, b) => a + b): " + a + ", " + b + " => " + sum);
    
    // 2. 条件处理测试
    std::println("");
    std::println("2. 条件处理测试");
    std::println("----------------");
    
    // 模拟Lambda: x => x > 0
    test_num : int = 15;
    is_positive : bool = test_num > 0;
    std::println("条件Lambda模拟 (x => x > 0): " + test_num + " => " + is_positive);
    
    test_num2 : int = -5;
    is_positive2 : bool = test_num2 > 0;
    std::println("条件Lambda模拟 (x => x > 0): " + test_num2 + " => " + is_positive2);
    
    // 3. 数组处理模拟
    std::println("");
    std::println("3. 数组处理模拟测试");
    std::println("-------------------");
    
    std::println("模拟数组: [1, 2, 3, 4, 5]");
    
    // 模拟map操作: x => x * x
    std::println("map操作模拟 (x => x * x):");
    i : int = 1;
    while (i <= 5) {
        squared : int = i * i;
        std::println("  " + i + " => " + squared);
        i = i + 1;
    };
    
    // 模拟filter操作: x => x % 2 == 0
    std::println("filter操作模拟 (x => x % 2 == 0):");
    j : int = 1;
    while (j <= 5) {
        is_even : bool = j % 2 == 0;
        if (is_even) {
            std::println("  " + j + " (保留)");
        };
        j = j + 1;
    };
    
    // 模拟reduce操作: (acc, x) => acc + x
    std::println("reduce操作模拟 ((acc, x) => acc + x):");
    acc : int = 0;
    k : int = 1;
    while (k <= 5) {
        acc = acc + k;
        std::println("  累加 " + k + ", 当前和: " + acc);
        k = k + 1;
    };
    
    // 4. 复杂逻辑处理
    std::println("");
    std::println("4. 复杂逻辑处理测试");
    std::println("-------------------");
    
    // 模拟复杂Lambda块处理
    numbers : array<int> = [42, 15, 3, -2, 0];
    std::println("处理数组: [42, 15, 3, -2, 0]");
    
    m : int = 0;
    while (m < 5) {
        current : int = 0;
        
        // 获取当前元素
        if (m == 0) {
            current = 42;
        };
        if (m == 1) {
            current = 15;
        };
        if (m == 2) {
            current = 3;
        };
        if (m == 3) {
            current = -2;
        };
        if (m == 4) {
            current = 0;
        };
        
        // 复杂处理逻辑
        result_msg : string = "处理结果: ";
        if (current > 20) {
            result_msg = result_msg + "大数字 " + current;
        } else {
            if (current > 0) {
                result_msg = result_msg + "小数字 " + current;
            } else {
                if (current == 0) {
                    result_msg = result_msg + "零值 " + current;
                } else {
                    result_msg = result_msg + "负数 " + current;
                };
            };
        };
        
        std::println("  " + result_msg);
        m = m + 1;
    };
    
    // 5. 链式操作模拟
    std::println("");
    std::println("5. 链式操作模拟测试");
    std::println("-------------------");
    
    std::println("链式操作: filter(偶数) -> map(平方) -> reduce(求和)");
    
    // 步骤1: 过滤偶数
    std::println("步骤1 - 过滤偶数 [1,2,3,4,5,6]:");
    evens_count : int = 0;
    n : int = 1;
    while (n <= 6) {
        if (n % 2 == 0) {
            std::println("  保留: " + n);
            evens_count = evens_count + 1;
        };
        n = n + 1;
    };
    std::println("  过滤后有 " + evens_count + " 个偶数");
    
    // 步骤2: 平方操作
    std::println("步骤2 - 平方操作:");
    o : int = 2;
    while (o <= 6) {
        if (o % 2 == 0) {
            squared_val : int = o * o;
            std::println("  " + o + " => " + squared_val);
        };
        o = o + 2;
    };
    
    // 步骤3: 求和
    std::println("步骤3 - 求和:");
    final_sum : int = 0;
    p : int = 2;
    while (p <= 6) {
        if (p % 2 == 0) {
            val : int = p * p;
            final_sum = final_sum + val;
        };
        p = p + 2;
    };
    std::println("  最终结果: " + final_sum);
    
    // 6. 性能测试
    std::println("");
    std::println("6. 性能测试");
    std::println("-----------");
    
    std::println("大数据处理模拟 (100个元素):");
    large_sum : int = 0;
    processed : int = 0;
    
    q : int = 1;
    while (q <= 100) {
        if (q % 3 == 0) {
            // 模拟复杂计算: (n * 2 + 5) * 3
            complex_val : int = (q * 2 + 5) * 3;
            large_sum = large_sum + complex_val;
            processed = processed + 1;
        };
        q = q + 1;
    };
    
    std::println("  处理了 " + processed + " 个元素");
    std::println("  复杂计算总和: " + large_sum);
    
    // 7. 边界情况测试
    std::println("");
    std::println("7. 边界情况测试");
    std::println("---------------");
    
    // 零值处理
    zero_val : int = 0;
    zero_result : bool = zero_val == 0;
    std::println("零值测试: " + zero_val + " == 0 => " + zero_result);
    
    // 负数处理
    neg_val : int = -10;
    abs_val : int = 0;
    if (neg_val < 0) {
        abs_val = 0 - neg_val;
    } else {
        abs_val = neg_val;
    };
    std::println("绝对值测试: abs(" + neg_val + ") => " + abs_val);
    
    // 大数处理
    big_val : int = 999;
    is_big : bool = big_val > 100;
    std::println("大数测试: " + big_val + " > 100 => " + is_big);
    
    std::println("");
    std::println("=== Lambda表达式功能测试完成 ===");
    std::println("所有测试用例都成功执行!");
    std::println("CodeNothing v0.4.2 Lambda基础架构验证通过!");
    
    return 0;
};