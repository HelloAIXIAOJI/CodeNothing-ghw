using lib <io>;
using ns std;

// CodeNothing 数学计算性能测试
// 计算大量数学运算

fn factorial(n : int) : int {
    if (n <= 1) {
        return 1;
    };
    return n * factorial(n - 1);
};

fn iterativeFactorial(n : int) : int {
    result : int = 1;
    i : int = 1;

    while (i <= n) {
        result = result * i;
        i = i + 1;
    };

    return result;
};

fn sumOfSquares(n : int) : int {
    sum : int = 0;
    i : int = 1;

    while (i <= n) {
        sum = sum + (i * i);
        i = i + 1;
    };

    return sum;
};

fn isPrime(n : int) : bool {
    if (n <= 1) {
        return false;
    };
    if (n <= 3) {
        return true;
    };
    if (n % 2 == 0 || n % 3 == 0) {
        return false;
    };
    
    i : int = 5;
    while (i * i <= n) {
        if (n % i == 0 || n % (i + 2) == 0) {
            return false;
        };
        i = i + 6;
    };
    
    return true;
};

fn countPrimes(limit : int) : int {
    count : int = 0;
    i : int = 2;
    
    while (i <= limit) {
        if (isPrime(i)) {
            count = count + 1;
        };
        i = i + 1;
    };
    
    return count;
};

fn main() : int {
    std::println("=== CodeNothing 数学计算性能测试 ===");
    
    // 测试参数
    n : int = 12;
    limit : int = 1000;
    
    std::println("计算测试:");
    std::println("n = " + n);
    std::println("limit = " + limit);
    std::println("");
    
    // 阶乘计算
    std::println("1. 阶乘计算:");
    fact1 : int = factorial(n);
    fact2 : int = iterativeFactorial(n);
    std::println("factorial(" + n + ") = " + fact1);
    std::println("iterativeFactorial(" + n + ") = " + fact2);
    
    if (fact1 == fact2) {
        std::println("✓ 阶乘计算验证通过");
    } else {
        std::println("✗ 阶乘计算验证失败");
    };
    std::println("");
    
    // 平方和计算
    std::println("2. 平方和计算:");
    squares : int = sumOfSquares(n);
    std::println("sumOfSquares(" + n + ") = " + squares);
    std::println("");
    
    // 质数计算
    std::println("3. 质数计算:");
    primeCount : int = countPrimes(limit);
    std::println("countPrimes(" + limit + ") = " + primeCount);
    std::println("");
    
    // 验证一些已知的质数
    std::println("4. 质数验证:");
    testNumbers : []int = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29];
    i : int = 0;
    allCorrect : bool = true;
    
    while (i < testNumbers.length()) {
        num : int = testNumbers[i];
        isP : bool = isPrime(num);
        std::println(num + " is prime: " + isP);
        if (!isP) {
            allCorrect = false;
        };
        i = i + 1;
    };

    if (allCorrect) {
        std::println("✓ 质数验证通过");
    } else {
        std::println("✗ 质数验证失败");
    };
    
    std::println("");
    std::println("=== 数学计算测试完成 ===");
    
    return 0;
};
