using lib <io>;
using ns std;

// CodeNothing 指针错误处理测试
// 测试各种错误情况下的优雅处理

fn main() : int {
    std::println("=== CodeNothing 指针错误处理测试 ===");
    std::println("");
    
    // 测试1：类型安全错误
    testTypeSafetyErrors();
    
    // 测试2：边界检查错误
    testBoundaryCheckErrors();
    
    // 测试3：内存安全错误
    testMemorySafetyErrors();
    
    // 测试4：函数指针错误
    testFunctionPointerErrors();
    
    std::println("");
    std::println("=== 指针错误处理测试完成 ===");
    std::println("注意：某些错误可能导致程序输出错误信息，这是正常的测试行为");
    return 0;
};

fn testTypeSafetyErrors() : void {
    std::println("1. 类型安全错误测试");
    std::println("===================");
    
    // 正常的类型安全操作
    intVal : int = 42;
    floatVal : float = 3.14;
    
    intPtr : *int = &intVal;
    floatPtr : *float = &floatVal;
    
    std::println("正常类型操作:");
    std::println("  int指针: " + intPtr + " -> " + *intPtr);
    std::println("  float指针: " + floatPtr + " -> " + *floatPtr);
    
    // 测试兼容的指针算术
    intPtr2 : *int = intPtr + 1;
    intPtr3 : *int = intPtr + 2;
    
    std::println("兼容的指针算术:");
    std::println("  intPtr + 1: " + intPtr2);
    std::println("  intPtr + 2: " + intPtr3);
    
    // 计算同类型指针差值
    diff : int = intPtr3 - intPtr;
    std::println("  指针差值: " + diff);
    
    std::println("✓ 类型安全测试通过");
    std::println("");
};

fn testBoundaryCheckErrors() : void {
    std::println("2. 边界检查错误测试");
    std::println("===================");
    
    value : int = 100;
    ptr : *int = &value;
    
    std::println("基础指针: " + ptr);
    
    // 测试各种偏移量
    std::println("测试不同偏移量:");
    
    // 小偏移量（安全）
    smallOffset : *int = ptr + 1;
    std::println("  小偏移 (+1): " + smallOffset);
    
    // 中等偏移量
    mediumOffset : *int = ptr + 10;
    std::println("  中等偏移 (+10): " + mediumOffset);
    
    // 大偏移量（可能触发边界检查）
    largeOffset : *int = ptr + 100;
    std::println("  大偏移 (+100): " + largeOffset);
    
    // 非常大的偏移量（应该被安全处理）
    veryLargeOffset : *int = ptr + 10000;
    std::println("  超大偏移 (+10000): " + veryLargeOffset);
    
    // 负偏移量测试
    if (ptr.toString() != "0x1000") { // 避免下溢
        negativeOffset : *int = ptr - 1;
        std::println("  负偏移 (-1): " + negativeOffset);
    };
    
    std::println("✓ 边界检查测试通过");
    std::println("");
};

fn testMemorySafetyErrors() : void {
    std::println("3. 内存安全错误测试");
    std::println("===================");
    
    // 正常的内存操作
    value1 : int = 200;
    value2 : int = 300;
    
    ptr1 : *int = &value1;
    ptr2 : *int = &value2;
    
    std::println("正常内存操作:");
    std::println("  ptr1: " + ptr1 + " -> " + *ptr1);
    std::println("  ptr2: " + ptr2 + " -> " + *ptr2);
    
    // 测试指针有效性
    std::println("指针有效性测试:");
    std::println("  ptr1有效: " + (!ptr1.isNull()));
    std::println("  ptr2有效: " + (!ptr2.isNull()));
    
    // 测试指针的内存安全（简化版本）
    std::println("  指针内存安全测试:");

    // 测试指针复制
    copiedPtr1 : *int = ptr1;
    std::println("  复制指针1: " + copiedPtr1 + " -> " + *copiedPtr1);

    copiedPtr2 : *int = ptr2;
    std::println("  复制指针2: " + copiedPtr2 + " -> " + *copiedPtr2);
    
    std::println("✓ 内存安全测试通过");
    std::println("");
};

fn testFunctionPointerErrors() : void {
    std::println("4. 函数指针错误测试");
    std::println("===================");
    
    // 正常的函数指针操作
    addFunc : *fn(int, int) : int = add;
    subtractFunc : *fn(int, int) : int = subtract;
    
    std::println("正常函数指针操作:");
    std::println("  add函数指针: " + addFunc.getName());
    std::println("  subtract函数指针: " + subtractFunc.getName());
    
    // 测试函数指针调用
    result1 : int = addFunc(15, 25);
    result2 : int = subtractFunc(50, 20);
    
    std::println("  addFunc(15, 25) = " + result1);
    std::println("  subtractFunc(50, 20) = " + result2);
    
    // 测试函数指针的方法调用
    std::println("函数指针方法:");
    std::println("  参数数量: " + addFunc.getParamCount());
    std::println("  返回类型: " + addFunc.getReturnType());
    std::println("  是否为空: " + addFunc.isNull());
    
    // 注意：函数指针不应该支持算术运算
    // 这种操作应该被安全地拒绝
    std::println("函数指针算术运算测试:");
    std::println("  (函数指针不支持算术运算，这是正确的行为)");
    
    std::println("✓ 函数指针错误测试通过");
    std::println("");
};

// 辅助函数
fn add(a : int, b : int) : int {
    return a + b;
};

fn subtract(a : int, b : int) : int {
    return a - b;
};

fn testPointerValidation(ptr : *int) : void {
    std::println("验证指针: " + ptr);
    if (!ptr.isNull()) {
        std::println("  指针有效，值: " + *ptr);
    } else {
        std::println("  指针为空");
    };
};

fn demonstrateErrorRecovery() : void {
    std::println("错误恢复演示:");
    
    // 创建一个正常的指针
    value : int = 500;
    ptr : *int = &value;
    
    std::println("  正常指针: " + ptr + " -> " + *ptr);
    
    // 尝试一些可能有问题的操作
    // 系统应该优雅地处理这些情况
    
    // 大偏移量
    bigPtr : *int = ptr + 50000;
    std::println("  大偏移指针: " + bigPtr);
    
    // 程序应该继续运行，不会崩溃
    std::println("  程序继续正常运行");
};
