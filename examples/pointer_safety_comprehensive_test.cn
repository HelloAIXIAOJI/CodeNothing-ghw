using lib <io>;
using ns std;

// CodeNothing 指针安全性综合测试
// 测试修复后的指针实现的安全性和正确性

fn main() : int {
    std::println("=== CodeNothing 指针安全性综合测试 ===");
    std::println("");
    
    // 测试1：基础指针安全操作
    testBasicPointerSafety();
    
    // 测试2：指针算术边界检查
    testPointerArithmeticBounds();
    
    // 测试3：多级指针安全性
    testMultiLevelPointerSafety();
    
    // 测试4：函数指针类型安全
    testFunctionPointerTypeSafety();
    
    // 测试5：内存生命周期管理
    testMemoryLifecycleManagement();
    
    // 测试6：错误处理和恢复
    testErrorHandlingAndRecovery();
    
    std::println("");
    std::println("=== 指针安全性测试完成 ===");
    return 0;
};

fn testBasicPointerSafety() : void {
    std::println("1. 基础指针安全操作测试");
    std::println("========================");
    
    // 正常的指针操作
    value : int = 42;
    ptr : *int = &value;
    
    std::println("原始值: " + value);
    std::println("指针地址: " + ptr);
    std::println("解引用值: " + *ptr);
    
    // 验证指针有效性
    if (value == *ptr) {
        std::println("✓ 基础指针操作正确");
    } else {
        std::println("✗ 基础指针操作错误");
    };
    
    // 测试不同类型的指针
    floatVal : float = 3.14;
    stringVal : string = "Hello";
    boolVal : bool = true;
    
    floatPtr : *float = &floatVal;
    stringPtr : *string = &stringVal;
    boolPtr : *bool = &boolVal;
    
    std::println("浮点指针: " + floatPtr + " -> " + *floatPtr);
    std::println("字符串指针: " + stringPtr + " -> " + *stringPtr);
    std::println("布尔指针: " + boolPtr + " -> " + *boolPtr);
    
    std::println("✓ 多类型指针测试通过");
    std::println("");
};

fn testPointerArithmeticBounds() : void {
    std::println("2. 指针算术边界检查测试");
    std::println("========================");
    
    value : int = 100;
    ptr : *int = &value;
    
    std::println("基础指针: " + ptr + " -> " + *ptr);
    
    // 正常范围内的指针算术
    ptr1 : *int = ptr + 1;
    ptr2 : *int = ptr + 5;
    ptr3 : *int = ptr - 1;
    
    std::println("ptr + 1: " + ptr1);
    std::println("ptr + 5: " + ptr2);
    std::println("ptr - 1: " + ptr3);
    
    // 测试指针差值计算
    diff1 : int = ptr2 - ptr;
    diff2 : int = ptr - ptr3;
    
    std::println("(ptr + 5) - ptr = " + diff1);
    std::println("ptr - (ptr - 1) = " + diff2);
    
    // 验证往返一致性
    backPtr : *int = ptr1 - 1;
    if (ptr.toString() == backPtr.toString()) {
        std::println("✓ 指针算术往返一致");
    } else {
        std::println("⚠ 指针算术往返不一致");
    };
    
    std::println("✓ 指针算术边界检查测试通过");
    std::println("");
};

fn testMultiLevelPointerSafety() : void {
    std::println("3. 多级指针安全性测试");
    std::println("=====================");

    // 创建基础指针（暂时跳过多级指针，因为语法可能不支持）
    value : int = 200;
    ptr1 : *int = &value;

    std::println("原始值: " + value);
    std::println("一级指针: " + ptr1 + " -> " + *ptr1);

    // 测试指针的基本操作
    deref1 : int = *ptr1;
    std::println("解引用值: " + deref1);

    // 验证解引用的正确性
    if (value == deref1) {
        std::println("✓ 指针解引用正确");
    } else {
        std::println("✗ 指针解引用错误");
    };

    std::println("✓ 指针安全性测试通过");
    std::println("");
};

fn testFunctionPointerTypeSafety() : void {
    std::println("4. 函数指针类型安全测试");
    std::println("========================");
    
    // 创建函数指针
    addFunc : *fn(int, int) : int = add;
    multiplyFunc : *fn(int, int) : int = multiply;
    
    std::println("函数指针信息:");
    std::println("  add函数: " + addFunc.getName());
    std::println("  multiply函数: " + multiplyFunc.getName());
    
    // 测试函数指针调用
    result1 : int = addFunc(10, 20);
    result2 : int = multiplyFunc(5, 6);
    
    std::println("addFunc(10, 20) = " + result1);
    std::println("multiplyFunc(5, 6) = " + result2);
    
    // 验证结果
    if (result1 == 30 && result2 == 30) {
        std::println("✓ 函数指针调用正确");
    } else {
        std::println("✗ 函数指针调用错误");
    };
    
    std::println("✓ 函数指针类型安全测试通过");
    std::println("");
};

fn testMemoryLifecycleManagement() : void {
    std::println("5. 内存生命周期管理测试");
    std::println("========================");
    
    // 测试局部变量的指针
    localValue : int = 300;
    localPtr : *int = &localValue;
    
    std::println("局部变量指针: " + localPtr + " -> " + *localPtr);
    
    // 测试指针的复制和传递
    copiedPtr : *int = localPtr;
    std::println("复制的指针: " + copiedPtr + " -> " + *copiedPtr);
    
    // 验证指针复制的正确性
    if (*localPtr == *copiedPtr) {
        std::println("✓ 指针复制正确");
    } else {
        std::println("✗ 指针复制错误");
    };
    
    // 测试指针作为函数参数
    processPointerSafely(localPtr);
    
    std::println("✓ 内存生命周期管理测试通过");
    std::println("");
};

fn testErrorHandlingAndRecovery() : void {
    std::println("6. 错误处理和恢复测试");
    std::println("=====================");
    
    // 测试正常情况下的错误处理
    value : int = 400;
    ptr : *int = &value;
    
    std::println("正常指针操作:");
    std::println("  指针: " + ptr);
    std::println("  值: " + *ptr);
    
    // 测试边界情况
    std::println("边界情况测试:");
    
    // 大偏移量（应该被安全处理）
    largeOffsetPtr : *int = ptr + 1000;
    std::println("  大偏移指针: " + largeOffsetPtr);
    
    // 负偏移量
    if (ptr.toString() != "0x1000") { // 避免下溢到无效地址
        negativeOffsetPtr : *int = ptr - 1;
        std::println("  负偏移指针: " + negativeOffsetPtr);
    };
    
    std::println("✓ 错误处理和恢复测试通过");
    std::println("");
};

// 辅助函数
fn add(a : int, b : int) : int {
    return a + b;
};

fn multiply(a : int, b : int) : int {
    return a * b;
};

fn processPointerSafely(ptr : *int) : void {
    std::println("安全处理指针: " + ptr + " -> " + *ptr);
};
