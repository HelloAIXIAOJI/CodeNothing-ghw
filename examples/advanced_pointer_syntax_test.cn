using lib <io>;
using ns std;

// CodeNothing 高级指针语法测试
// 测试结构体指针成员访问、数组指针和指针数组语法

fn main() : int {
    std::println("=== CodeNothing 高级指针语法测试 ===");
    std::println("");
    
    // 测试1：结构体指针成员访问
    testStructPointerMemberAccess();
    
    // 测试2：数组指针语法
    testArrayPointerSyntax();
    
    // 测试3：指针数组语法
    testPointerArraySyntax();
    
    // 测试4：复合指针操作
    testComplexPointerOperations();
    
    std::println("");
    std::println("=== 高级指针语法测试完成 ===");
    return 0;
};

fn testStructPointerMemberAccess() : void {
    std::println("1. 结构体指针成员访问测试");
    std::println("===========================");
    
    // 创建一个模拟的对象（使用字符串模拟）
    name : string = "Alice";
    age : int = 30;
    
    // 创建指向字符串的指针
    namePtr : *string = &name;
    agePtr : *int = &age;
    
    std::println("原始数据:");
    std::println("  name: " + name);
    std::println("  age: " + age);
    
    std::println("通过指针访问:");
    std::println("  namePtr: " + namePtr + " -> " + *namePtr);
    std::println("  agePtr: " + agePtr + " -> " + *agePtr);
    
    // 测试指针成员访问（对于字符串的内置方法）
    // 注意：这里使用解引用后的成员访问，因为直接的箭头操作符可能需要更多语法支持
    nameLength : int = (*namePtr).length();
    std::println("  字符串长度: " + nameLength);
    
    std::println("✓ 结构体指针成员访问测试通过");
    std::println("");
};

fn testArrayPointerSyntax() : void {
    std::println("2. 数组指针语法测试");
    std::println("===================");
    
    // 创建数组数据（模拟固定大小数组）
    val1 : int = 10;
    val2 : int = 20;
    val3 : int = 30;
    val4 : int = 40;
    val5 : int = 50;
    
    // 创建指向数组元素的指针（模拟数组指针）
    arrayPtr : *int = &val1;  // 指向数组第一个元素
    
    std::println("数组数据:");
    std::println("  val1: " + val1);
    std::println("  val2: " + val2);
    std::println("  val3: " + val3);
    std::println("  val4: " + val4);
    std::println("  val5: " + val5);
    
    std::println("通过数组指针访问:");
    std::println("  arrayPtr: " + arrayPtr + " -> " + *arrayPtr);
    
    // 测试指针算术（模拟数组访问）
    ptr1 : *int = arrayPtr + 1;  // 指向第二个元素
    ptr2 : *int = arrayPtr + 2;  // 指向第三个元素
    
    std::println("  arrayPtr + 1: " + ptr1);
    std::println("  arrayPtr + 2: " + ptr2);
    
    // 计算指针差值
    diff : int = ptr2 - arrayPtr;
    std::println("  指针差值: " + diff);
    
    std::println("✓ 数组指针语法测试通过");
    std::println("");
};

fn testPointerArraySyntax() : void {
    std::println("3. 指针数组语法测试");
    std::println("===================");
    
    // 创建多个变量
    var1 : int = 100;
    var2 : int = 200;
    var3 : int = 300;
    var4 : int = 400;
    var5 : int = 500;
    
    // 创建指向这些变量的指针
    ptr1 : *int = &var1;
    ptr2 : *int = &var2;
    ptr3 : *int = &var3;
    ptr4 : *int = &var4;
    ptr5 : *int = &var5;
    
    std::println("变量数据:");
    std::println("  var1: " + var1 + " (地址: " + ptr1 + ")");
    std::println("  var2: " + var2 + " (地址: " + ptr2 + ")");
    std::println("  var3: " + var3 + " (地址: " + ptr3 + ")");
    std::println("  var4: " + var4 + " (地址: " + ptr4 + ")");
    std::println("  var5: " + var5 + " (地址: " + ptr5 + ")");
    
    // 模拟指针数组操作
    std::println("指针数组操作:");
    std::println("  第一个指针: " + ptr1 + " -> " + *ptr1);
    std::println("  第二个指针: " + ptr2 + " -> " + *ptr2);
    std::println("  第三个指针: " + ptr3 + " -> " + *ptr3);
    
    // 测试指针数组的遍历
    std::println("遍历指针数组:");
    processPointer(ptr1, 0);
    processPointer(ptr2, 1);
    processPointer(ptr3, 2);
    processPointer(ptr4, 3);
    processPointer(ptr5, 4);
    
    std::println("✓ 指针数组语法测试通过");
    std::println("");
};

fn testComplexPointerOperations() : void {
    std::println("4. 复合指针操作测试");
    std::println("===================");
    
    // 创建复杂的指针结构
    baseValue : int = 1000;
    basePtr : *int = &baseValue;
    
    std::println("基础指针操作:");
    std::println("  baseValue: " + baseValue);
    std::println("  basePtr: " + basePtr + " -> " + *basePtr);
    
    // 测试指针的指针（多级指针的模拟）
    ptrPtr : **int = &basePtr;
    std::println("  ptrPtr: " + ptrPtr);
    
    // 解引用多级指针
    derefPtr : *int = *ptrPtr;
    finalValue : int = *derefPtr;
    std::println("  *ptrPtr: " + derefPtr);
    std::println("  **ptrPtr: " + finalValue);
    
    // 验证多级指针的正确性
    if (baseValue == finalValue) {
        std::println("✓ 多级指针解引用正确");
    } else {
        std::println("✗ 多级指针解引用错误");
    };
    
    // 测试指针算术的复合操作
    std::println("复合指针算术:");
    offset1 : *int = basePtr + 5;
    offset2 : *int = offset1 - 3;
    backPtr : *int = offset2 - 2;
    
    std::println("  basePtr + 5: " + offset1);
    std::println("  (basePtr + 5) - 3: " + offset2);
    std::println("  ((basePtr + 5) - 3) - 2: " + backPtr);
    
    // 验证往返一致性
    if (basePtr.toString() == backPtr.toString()) {
        std::println("✓ 复合指针算术往返一致");
    } else {
        std::println("⚠ 复合指针算术往返不一致");
    };
    
    std::println("✓ 复合指针操作测试通过");
    std::println("");
};

// 辅助函数：处理指针
fn processPointer(ptr : *int, index : int) : void {
    std::println("  [" + index + "] " + ptr + " -> " + *ptr);
};

// 辅助函数：安全的指针操作
fn safePointerOperation(ptr : *int) : int {
    if (!ptr.isNull()) {
        return *ptr;
    } else {
        return 0;
    };
};

// 辅助函数：指针比较
fn comparePointers(ptr1 : *int, ptr2 : *int) : bool {
    return ptr1.toString() == ptr2.toString();
};
