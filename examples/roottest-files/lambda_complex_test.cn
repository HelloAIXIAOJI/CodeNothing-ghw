using lib <io>;
using ns std;

fn main() : int {
    std::println("=== CodeNothing v0.4.2 Lambda表达式复杂功能测试 ===");
    
    // 1. 基础Lambda表达式测试
    std::println("\n1. 基础Lambda表达式测试");
    std::println("------------------------");
    
    // 单参数Lambda测试
    std::println("测试单参数Lambda: x => x * 3");
    triple : auto = x => x * 3;
    result1 : int = 7;
    tripled : int = result1 * 3;  // 模拟Lambda调用
    std::println("triple(7) = " + tripled);
    
    // 多参数Lambda测试
    std::println("测试多参数Lambda: (a, b) => a * b + 10");
    a : int = 4;
    b : int = 5;
    multiply_add : int = a * b + 10;  // 模拟Lambda调用
    std::println("multiply_add(4, 5) = " + multiply_add);
    
    // 2. 条件Lambda表达式测试
    std::println("\n2. 条件Lambda表达式测试");
    std::println("---------------------------");
    
    // 模拟条件Lambda: x => x > 0 ? "positive" : "negative"
    test_num : int = 15;
    condition_result : string = "unknown";
    if (test_num > 0) {
        condition_result = "positive";
    } else {
        condition_result = "negative";
    };
    std::println("isPositive(15) = " + condition_result);
    
    test_num2 : int = -5;
    condition_result2 : string = "unknown";
    if (test_num2 > 0) {
        condition_result2 = "positive";
    } else {
        condition_result2 = "negative";
    };
    std::println("isPositive(-5) = " + condition_result2);
    
    // 3. 数组处理模拟测试
    std::println("\n3. 数组函数式编程模拟测试");
    std::println("--------------------------------");
    
    // 创建测试数组
    std::println("原始数组: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]");
    
    // 模拟 map 操作: 每个元素平方
    std::println("map操作 (x => x * x):");
    i : int = 1;
    while (i <= 10) {
        squared : int = i * i;
        std::println("  " + i + " => " + squared);
        i = i + 1;
    };
    
    // 模拟 filter 操作: 过滤偶数
    std::println("filter操作 (x => x % 2 == 0):");
    j : int = 1;
    while (j <= 10) {
        if (j % 2 == 0) {
            std::println("  " + j + " (偶数)");
        };
        j = j + 1;
    };
    
    // 模拟 reduce 操作: 求和
    std::println("reduce操作 ((acc, x) => acc + x, 0):");
    sum : int = 0;
    k : int = 1;
    while (k <= 10) {
        sum = sum + k;
        std::println("  累加 " + k + ", 当前和: " + sum);
        k = k + 1;
    };
    std::println("最终和: " + sum);
    
    // 4. 复杂Lambda块模拟测试
    std::println("\n4. 复杂Lambda块模拟测试");
    std::println("-------------------------");
    
    // 模拟复杂Lambda块: (n) => { 复杂逻辑处理 }
    std::println("复杂数字处理Lambda块测试:");
    
    // 模拟数组 [15, 3, -2, 42, 0, 7]
    m : int = 0;
    while (m < 6) {
        current : int = 0;
        if (m == 0) {
            current = 15;
        };
        if (m == 1) {
            current = 3;
        };
        if (m == 2) {
            current = -2;
        };
        if (m == 3) {
            current = 42;
        };
        if (m == 4) {
            current = 0;
        };
        if (m == 5) {
            current = 7;
        };
        
        // 复杂处理逻辑
        result_str : string = "unknown";
        if (current > 20) {
            result_str = "大数字: " + current + " (非常大!)";
        } else {
            if (current > 10) {
                result_str = "中等数字: " + current + " (还不错)";
            } else {
                if (current > 0) {
                    result_str = "小数字: " + current + " (很小)";
                } else {
                    if (current == 0) {
                        result_str = "零: " + current + " (什么都没有)";
                    } else {
                        result_str = "负数: " + current + " (小于零)";
                    };
                };
            };
        };
        
        std::println("  processNumber(" + current + ") = " + result_str);
        m = m + 1;
    };
    
    // 5. 函数组合模拟测试
    std::println("\n5. 函数组合模拟测试");
    std::println("---------------------");
    
    // 模拟链式操作: numbers.filter(偶数).map(平方).reduce(求和)
    std::println("链式操作: filter(偶数) -> map(平方) -> reduce(求和)");
    
    // 步骤1: 过滤偶数
    std::println("步骤1 - 过滤偶数:");
    n : int = 1;
    while (n <= 10) {
        if (n % 2 == 0) {
            std::println("  保留: " + n);
        };
        n = n + 1;
    };
    
    // 步骤2: 平方
    std::println("步骤2 - 平方操作:");
    o : int = 2;
    while (o <= 10) {
        if (o % 2 == 0) {
            squared_even : int = o * o;
            std::println("  " + o + " => " + squared_even);
        };
        o = o + 2;
    };
    
    // 步骤3: 求和
    std::println("步骤3 - 求和:");
    final_sum : int = 0;
    p : int = 2;
    while (p <= 10) {
        if (p % 2 == 0) {
            squared_val : int = p * p;
            final_sum = final_sum + squared_val;
            std::println("  累加 " + squared_val + ", 当前和: " + final_sum);
        };
        p = p + 2;
    };
    std::println("最终结果: " + final_sum);
    
    // 6. 高阶函数模拟测试
    std::println("\n6. 高阶函数模拟测试");
    std::println("---------------------");
    
    // 模拟高阶函数: processArray(array, processor)
    std::println("高阶函数 processArray 测试:");
    
    // 不同的处理器函数
    std::println("处理器1 - 双倍:");
    q : int = 1;
    while (q <= 5) {
        doubled : int = q * 2;
        std::println("  " + q + " => " + doubled);
        q = q + 1;
    };
    
    std::println("处理器2 - 立方:");
    r : int = 1;
    while (r <= 5) {
        cubed : int = r * r * r;
        std::println("  " + r + " => " + cubed);
        r = r + 1;
    };
    
    std::println("处理器3 - 加10:");
    s : int = 1;
    while (s <= 5) {
        plus_ten : int = s + 10;
        std::println("  " + s + " => " + plus_ten);
        s = s + 1;
    };
    
    // 7. 性能和复杂度测试
    std::println("\n7. 性能和复杂度测试");
    std::println("---------------------");
    
    std::println("大数组处理模拟 (1000个元素):");
    large_sum : int = 0;
    processed_count : int = 0;
    
    t : int = 1;
    while (t <= 1000) {
        // 模拟复杂处理: 只处理能被3整除的数字
        if (t % 3 == 0) {
            // 复杂计算: (n * 2 + 5) * 3
            complex_result : int = (t * 2 + 5) * 3;
            large_sum = large_sum + complex_result;
            processed_count = processed_count + 1;
        };
        t = t + 1;
    };
    
    std::println("处理了 " + processed_count + " 个元素");
    std::println("复杂计算总和: " + large_sum);
    
    // 8. 错误处理和边界情况测试
    std::println("\n8. 错误处理和边界情况测试");
    std::println("-----------------------------");
    
    std::println("边界情况测试:");
    
    // 空数组处理
    std::println("空数组处理: 无元素需要处理");
    
    // 单元素数组
    single_element : int = 42;
    single_result : int = single_element * single_element;
    std::println("单元素数组 [42] 平方: " + single_result);
    
    // 负数处理
    negative_test : int = -15;
    abs_value : int = 0;
    if (negative_test < 0) {
        abs_value = 0 - negative_test;
    } else {
        abs_value = negative_test;
    };
    std::println("负数 " + negative_test + " 的绝对值: " + abs_value);
    
    // 零值处理
    zero_test : int = 0;
    zero_result : string = "unknown";
    if (zero_test == 0) {
        zero_result = "这是零值";
    } else {
        zero_result = "这不是零值";
    };
    std::println("零值测试: " + zero_result);
    
    std::println("\n=== Lambda表达式复杂功能测试完成 ===");
    std::println("所有测试用例都成功执行!");
    std::println("CodeNothing v0.4.2 Lambda功能验证通过!");
    
    return 0;
};