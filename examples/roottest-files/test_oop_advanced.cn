using lib <io>;

// 高级OOP测试 - 复杂类结构
class Vehicle {
    public brand : string;
    protected model : string;
    private year : int;
    
    constructor(brand : string, model : string, year : int) {
        this.brand = brand;
        this.model = model;
        this.year = year;
    };
    
    public fn getBrand() : string {
        return this.brand;
    };
    
    public fn getModel() : string {
        return this.model;
    };
    
    public fn getYear() : int {
        return this.year;
    };
    
    public fn getInfo() : string {
        return this.brand + " " + this.model;
    };
};

class Point {
    public x : float;
    public y : float;
    
    constructor(x : float, y : float) {
        this.x = x;
        this.y = y;
    };
    
    public fn getX() : float {
        return this.x;
    };
    
    public fn getY() : float {
        return this.y;
    };
    
    public fn toString() : string {
        return "Point(" + this.x + ", " + this.y + ")";
    };
};

fn main() : int {
    std::println("=== CodeNothing OOP 高级测试 ===");
    
    // 测试Vehicle类
    std::println("1. 测试Vehicle类");
    car : Vehicle = new Vehicle("Toyota", "Camry", 2023);
    std::println("Brand: " + car.brand);
    std::println("Info: " + car.getInfo());
    std::println("✅ Vehicle类测试成功");
    
    // 测试Point类
    std::println("2. 测试Point类");
    point1 : Point = new Point(3.14, 2.71);
    point2 : Point = new Point(1.0, 2.0);
    std::println("Point1 X: " + point1.x);
    std::println("Point2 Y: " + point2.y);
    std::println("✅ Point类测试成功");
    
    // 测试类型系统
    std::println("3. 测试类型系统");
    std::println("✅ 类型系统测试成功");
    
    std::println("=== 高级OOP测试完成 ===");
    return 0;
};