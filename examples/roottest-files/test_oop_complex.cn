using lib <io>;

// 复杂OOP测试 - 多类交互
class Student {
    public name : string;
    public studentId : string;
    private grades : string;
    
    constructor(name : string, studentId : string) {
        this.name = name;
        this.studentId = studentId;
        this.grades = "";
    };
    
    public fn getName() : string {
        return this.name;
    };
    
    public fn getStudentId() : string {
        return this.studentId;
    };
    
    public fn getInfo() : string {
        return "Student: " + this.name + " (ID: " + this.studentId + ")";
    };
};

class Course {
    public courseName : string;
    public courseCode : string;
    private instructor : string;
    
    constructor(courseName : string, courseCode : string, instructor : string) {
        this.courseName = courseName;
        this.courseCode = courseCode;
        this.instructor = instructor;
    };
    
    public fn getCourseName() : string {
        return this.courseName;
    };
    
    public fn getCourseCode() : string {
        return this.courseCode;
    };
    
    public fn getInstructor() : string {
        return this.instructor;
    };
    
    public fn getCourseInfo() : string {
        return this.courseCode + ": " + this.courseName;
    };
};

class University {
    public name : string;
    public location : string;
    
    constructor(name : string, location : string) {
        this.name = name;
        this.location = location;
    };
    
    public fn getName() : string {
        return this.name;
    };
    
    public fn getLocation() : string {
        return this.location;
    };
    
    public fn getUniversityInfo() : string {
        return this.name + " (" + this.location + ")";
    };
};

fn main() : int {
    std::println("=== CodeNothing OOP 复杂测试 ===");
    
    // 创建大学
    std::println("1. 创建大学对象");
    university : University = new University("MIT", "Cambridge, MA");
    std::println("University: " + university.getUniversityInfo());
    std::println("✅ 大学对象创建成功");
    
    // 创建课程
    std::println("2. 创建课程对象");
    course1 : Course = new Course("Computer Science", "CS101", "Dr. Smith");
    course2 : Course = new Course("Mathematics", "MATH201", "Prof. Johnson");
    std::println("Course1: " + course1.getCourseInfo());
    std::println("Course2: " + course2.getCourseInfo());
    std::println("✅ 课程对象创建成功");
    
    // 创建学生
    std::println("3. 创建学生对象");
    student1 : Student = new Student("Alice Johnson", "S001");
    student2 : Student = new Student("Bob Smith", "S002");
    student3 : Student = new Student("Charlie Brown", "S003");
    std::println("Student1: " + student1.getInfo());
    std::println("Student2: " + student2.getInfo());
    std::println("Student3: " + student3.getInfo());
    std::println("✅ 学生对象创建成功");
    
    // 测试对象集合
    std::println("4. 测试对象集合");
    std::println("学生1: " + student1.name);
    std::println("学生2: " + student2.name);
    std::println("学生3: " + student3.name);
    std::println("✅ 对象集合测试成功");
    
    // 测试字段访问
    std::println("5. 测试字段访问");
    std::println("第一个学生姓名: " + student1.name);
    std::println("第一个课程名称: " + course1.courseName);
    std::println("✅ 字段访问测试成功");
    
    std::println("=== 复杂OOP测试完成 ===");
    std::println("🎉 所有OOP功能测试通过！");
    return 0;
};