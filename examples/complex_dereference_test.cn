using lib <io>;
using ns std;

// 复杂解引用语法测试

// 定义一个枚举用于测试
enum Status {
    Active,
    Inactive,
    Pending(string)
};

fn main() : int {
    std::println("=== CodeNothing 复杂解引用语法测试 ===");
    
    // 测试1：指针与枚举方法调用
    testPointerEnumMethods();
    
    // 测试2：指针与字符串方法调用
    testPointerStringMethods();
    
    // 测试3：多级指针方法调用
    testMultiLevelPointerMethods();
    
    std::println("");
    std::println("=== 复杂解引用语法测试完成 ===");
    return 0;
};

fn testPointerEnumMethods() : void {
    std::println("");
    std::println("1. 指针与枚举方法调用测试");
    std::println("=========================");
    
    // 创建枚举值
    status : Status = Status::Pending("等待处理");
    statusPtr : *Status = &status;
    
    std::println("枚举值: " + status);
    std::println("枚举指针: " + statusPtr);
    
    // 通过解引用调用枚举方法
    derefStatus : Status = *statusPtr;
    statusName : string = derefStatus.getVariantName();
    std::println("通过解引用调用方法: " + statusName);
    
    enumName : string = derefStatus.getEnumName();
    std::println("枚举类型名: " + enumName);
    
    fieldCount : int = derefStatus.length();
    std::println("字段数量: " + fieldCount);
};

fn testPointerStringMethods() : void {
    std::println("");
    std::println("2. 指针与字符串方法调用测试");
    std::println("===========================");
    
    // 创建字符串值
    text : string = "Hello, World!";
    textPtr : *string = &text;
    
    std::println("字符串值: " + text);
    std::println("字符串指针: " + textPtr);
    
    // 通过解引用调用字符串方法
    derefText : string = *textPtr;
    
    length : int = derefText.length();
    std::println("字符串长度: " + length);
    
    upperText : string = derefText.to_upper();
    std::println("大写字符串: " + upperText);
    
    startsWithHello : bool = derefText.startsWith("Hello");
    std::println("以Hello开头: " + startsWithHello);
    
    containsWorld : bool = derefText.contains("World");
    std::println("包含World: " + containsWorld);
};

fn testMultiLevelPointerMethods() : void {
    std::println("");
    std::println("3. 多级指针方法调用测试");
    std::println("=======================");
    
    // 创建字符串和多级指针
    message : string = "CodeNothing";
    messagePtr : *string = &message;
    messagePtrPtr : **string = &messagePtr;
    
    std::println("原始字符串: " + message);
    std::println("一级指针: " + messagePtr);
    std::println("二级指针: " + messagePtrPtr);
    
    // 通过多级解引用调用方法
    level1 : *string = *messagePtrPtr;
    std::println("解引用二级指针: " + level1);
    
    finalString : string = *(*messagePtrPtr);
    std::println("二次解引用: " + finalString);
    
    // 调用字符串方法
    finalLength : int = finalString.length();
    std::println("最终字符串长度: " + finalLength);
    
    // 测试枚举的多级指针
    status : Status = Status::Active;
    statusPtr : *Status = &status;
    statusPtrPtr : **Status = &statusPtr;
    
    std::println("枚举二级指针: " + statusPtrPtr);
    
    finalStatus : Status = *(*statusPtrPtr);
    finalStatusName : string = finalStatus.getVariantName();
    std::println("通过二级指针获取枚举名: " + finalStatusName);
};
