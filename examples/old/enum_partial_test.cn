using lib <io>;
using ns std;

// 复杂枚举测试的部分版本

// 1. 复杂的数据结构枚举
enum JsonValue {
    Null,
    Bool(bool),
    Number(float),
    String(string),
    Array,  // 简化版，实际应该是Array(JsonValue[])
    Object  // 简化版，实际应该是Object(map<string, JsonValue>)
};

// 2. 网络请求状态枚举
enum HttpStatus {
    Continue(int),
    Success(int, string),
    Redirect(int, string, string),
    ClientError(int, string, string),
    ServerError(int, string, string, string)
};

fn main() : int {
    std::println("=== CodeNothing 复杂枚举测试（部分） ===");
    
    // 测试1：JSON值处理
    testJsonValues();
    
    // 测试2：HTTP状态处理
    testHttpStatuses();
    
    std::println("");
    std::println("=== 复杂枚举测试完成 ===");
    return 0;
};

fn testJsonValues() : void {
    std::println("");
    std::println("1. JSON值处理测试");
    std::println("==================");
    
    nullValue : JsonValue = JsonValue::Null;
    boolValue : JsonValue = JsonValue::Bool(true);
    numberValue : JsonValue = JsonValue::Number(42.5);
    stringValue : JsonValue = JsonValue::String("Hello, JSON!");
    arrayValue : JsonValue = JsonValue::Array;
    objectValue : JsonValue = JsonValue::Object;
    
    std::println("JSON Null: " + nullValue);
    std::println("JSON Bool: " + boolValue);
    std::println("JSON Number: " + numberValue);
    std::println("JSON String: " + stringValue);
    std::println("JSON Array: " + arrayValue);
    std::println("JSON Object: " + objectValue);
    
    // 处理JSON值
    processJsonValue(nullValue);
    processJsonValue(numberValue);
    processJsonValue(stringValue);
};

fn processJsonValue(value : JsonValue) : void {
    valueStr : string = value.toString();
    
    if (valueStr == "JsonValue::Null") {
        std::println("  处理空值");
    } else if (valueStr.startsWith("JsonValue::Bool")) {
        std::println("  处理布尔值: " + value);
    } else if (valueStr.startsWith("JsonValue::Number")) {
        std::println("  处理数字值: " + value);
    } else if (valueStr.startsWith("JsonValue::String")) {
        std::println("  处理字符串值: " + value);
    } else {
        std::println("  处理复合值: " + value);
    };
};

fn testHttpStatuses() : void {
    std::println("");
    std::println("2. HTTP状态处理测试");
    std::println("===================");
    
    continue100 : HttpStatus = HttpStatus::Continue(100);
    success200 : HttpStatus = HttpStatus::Success(200, "OK");
    redirect301 : HttpStatus = HttpStatus::Redirect(301, "Moved Permanently", "https://new-url.com");
    clientError404 : HttpStatus = HttpStatus::ClientError(404, "Not Found", "页面不存在");
    serverError500 : HttpStatus = HttpStatus::ServerError(500, "Internal Server Error", "数据库连接失败", "contact@example.com");
    
    std::println("HTTP状态码:");
    std::println("  " + continue100);
    std::println("  " + success200);
    std::println("  " + redirect301);
    std::println("  " + clientError404);
    std::println("  " + serverError500);
    
    // 处理不同的HTTP状态
    handleHttpStatus(success200);
    handleHttpStatus(clientError404);
    handleHttpStatus(serverError500);
};

fn handleHttpStatus(status : HttpStatus) : void {
    statusStr : string = status.toString();
    
    if (statusStr.startsWith("HttpStatus::Success")) {
        std::println("  成功响应: " + status);
    } else if (statusStr.startsWith("HttpStatus::ClientError")) {
        std::println("  客户端错误: " + status);
    } else if (statusStr.startsWith("HttpStatus::ServerError")) {
        std::println("  服务器错误: " + status);
    } else {
        std::println("  其他状态: " + status);
    };
};
