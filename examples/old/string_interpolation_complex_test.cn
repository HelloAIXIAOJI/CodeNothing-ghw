using lib <io>;
using lib <time>;
using ns std;

// 辅助函数，用于测试插值中的函数调用
fn formatNumber(num : int) : string {
    if (num < 10) {
        return "0" + num;
    };
    return "" + num;
};

// 模拟复杂的日期格式化函数
fn formatDate(year : int, month : int, day : int) : string {
    return `${year}-${formatNumber(month)}-${formatNumber(day)}`;
};

// 各种字符串插值的复杂测试
fn testStringInterpolation() : void {
    std::println("\n=== 字符串插值复杂测试 ===\n");
    
    // 1. 嵌套表达式和操作符优先级测试
    std::println("1. 嵌套表达式和操作符优先级测试:");
    a : int = 5;
    b : int = 3;
    c : int = 2;
    complex : string = `计算结果: ${a + b * c}与${(a + b) * c}不同`;
    std::println(complex);
    
    // 2. 字符串插值中的转义字符
    std::println("\n2. 字符串插值中的转义字符:");
    escaped : string = `这是一个带有"引号"和\t制表符的字符串`;
    std::println(escaped);
    std::println(`反斜杠测试: C:\\Users\\${a}\\Documents`);
    
    // 3. 空字符串和null值测试
    std::println("\n3. 空字符串和null值测试:");
    empty : string = "";
    std::println(`空字符串: [${empty}]`);
    std::println(`空值: [null]`);
    
    // 4. 长字符串和性能测试
    std::println("\n4. 长字符串和性能测试:");
    longText : string = "";
    for (i : 1..20) {
        longText = longText + "X";
    };
    std::println(`长字符串: ${longText}`);
    longInterpolation : string = `${longText}${longText}${longText}${longText}${longText}`;
    std::println(`长插值长度: ${20 * 5}`);
    
    // 5. 递归和复杂嵌套
    std::println("\n5. 递归和复杂嵌套:");
    level1 : string = `Level1: ${`Level2: ${`Level3: ${a + b + c}`}`}`;
    std::println(level1);
    
    // 6. 不同数据类型的插值测试
    std::println("\n6. 不同数据类型的插值:");
    int_val : int = 42;
    float_val : float = 3.14159;
    bool_val : bool = true;
    std::println(`整数: ${int_val}, 浮点数: ${float_val}, 布尔值: ${bool_val}`);
    
    // 7. 对象方法调用和属性访问
    std::println("\n7. 对象方法调用和属性访问:");
    person_name : string = "张三";
    person_age : int = 30;
    birth_year : int = 2025 - person_age; // 假设当前是2025年
    std::println(`个人信息: 姓名: ${person_name}, 年龄: ${person_age}`);
    std::println(`出生年份: ${birth_year}`);
    std::println(`直接变量访问: ${person_name} 今年 ${person_age}岁`);
    
    // 8. 表达式中的函数调用
    std::println("\n8. 表达式中的函数调用:");
    date : string = formatDate(2025, 10, 15);
    std::println(`今天是: ${date}`);
    std::println(`明天是: ${formatDate(2025, 10, 16)}`);
    
    // 9. 条件表达式（三元运算符）嵌套
    std::println("\n9. 条件表达式（三元运算符）嵌套:");
    score : int = 85;
    rating : string = `评级: ${
        score >= 90 ? "A" : 
        score >= 80 ? "B" : 
        score >= 70 ? "C" : 
        score >= 60 ? "D" : "F"
    }`;
    std::println(rating);
    
    // 10. 表达式中的字符串字面量
    std::println("\n10. 表达式中的字符串字面量:");
    dynamic : string = "动态";
    std::println(`这是${dynamic + "内容"}`);
    std::println(`这是${"静态" + "内容"}`);
    
    // 11. 空白符处理测试
    std::println("\n11. 空白符处理测试:");
    std::println(`无空格:${a}${b}${c}`);
    std::println(`带空格: ${ a } ${ b } ${ c }`);
    
    // 12. 算术和比较表达式
    std::println("\n12. 算术和比较表达式:");
    std::println(`5+3=${5+3}, 5-3=${5-3}, 5*3=${5*3}, 5/3=${5/3}, 5>3=${5>3}`);
    
    // 13. 多行文本混合插值
    std::println("\n13. 多行文本混合插值:");
    multiline : string = `
    这是第一行
    这是第二行，a=${a}
    这是第三行，b=${b}
        这行有缩进，结果=${a * b}
    最后一行
    `;
    std::println(multiline);
    
    // 14. 边界情况：表达式紧邻文本
    std::println("\n14. 边界情况：表达式紧邻文本:");
    std::println(`${a}紧邻文本`);
    std::println(`紧邻文本${a}`);
    std::println(`${a}${b}`);
    
    // 15. 逻辑运算符
    std::println("\n15. 逻辑运算符:");
    std::println(`true && false = ${true && false}`);
    std::println(`true || false = ${true || false}`);
    std::println(`!true = ${!true}`);
    std::println(`复合逻辑: ${a > b && b > c}`);
};

// 字符串插值在实际应用场景中的演示
fn demonstrateRealWorldUseCases() : void {
    std::println("\n=== 字符串插值实际应用场景演示 ===\n");
    
    // 1. 生成HTML模板
    std::println("1. HTML模板生成:");
    user : string = "guest_user";
    
    // 创建数组
    apple : string = "苹果";
    banana : string = "香蕉";
    orange : string = "橙子";
    
    html : string = `
    <!DOCTYPE html>
    <html>
    <head>
        <title>欢迎, ${user}</title>
    </head>
    <body>
        <h1>您好, ${user}!</h1>
        <p>您有 3 个项目在购物车中.</p>
        <ul>
            <li>${apple}</li>
            <li>${banana}</li>
            <li>${orange}</li>
        </ul>
    </body>
    </html>
    `;
    std::println(html);
    
    // 2. 构建SQL查询
    std::println("\n2. SQL查询构建:");
    table : string = "users";
    column : string = "name";
    value : string = "张三";
    
    query : string = `SELECT * FROM ${table} WHERE ${column} = "${value}" AND active = ${true};`;
    std::println(query);
    
    // 3. 复杂的日志格式化
    std::println("\n3. 日志格式化:");
    logLevel : string = "ERROR";
    errorCode : int = 404;
    message : string = "Not Found";
    timestamp : string = "2025-10-15 12:00:00";
    
    logEntry : string = `[${timestamp}] ${logLevel}(${errorCode}): ${message}`;
    std::println(logEntry);
    
    // 4. 配置文件生成
    std::println("\n4. 配置文件生成:");
    port : int = 8080;
    debug : bool = true;
    environment : string = "development";
    
    config : string = `
    {
        "server": {
            "port": ${port},
            "debug": ${debug},
            "environment": "${environment}",
            "timestamp": "${timestamp}"
        },
        "database": {
            "host": "localhost",
            "connections": ${10 * 5}
        }
    }
    `;
    std::println(config);
};

fn main() : int {
    testStringInterpolation();
    demonstrateRealWorldUseCases();
    
    std::println("\n=== 字符串插值复杂测试完成 ===");
    return 0;
}; 