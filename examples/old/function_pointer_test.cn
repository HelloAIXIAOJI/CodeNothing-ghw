using lib <io>;
using ns std;

// 函数指针测试

fn main() : int {
    std::println("=== CodeNothing 函数指针测试 ===");
    
    // 测试1：基础函数指针
    testBasicFunctionPointer();
    
    // 测试2：函数指针作为参数
    testFunctionPointerParameter();
    
    // 测试3：函数指针数组
    testFunctionPointerArray();
    
    std::println("");
    std::println("=== 函数指针测试完成 ===");
    return 0;
};

fn testBasicFunctionPointer() : void {
    std::println("");
    std::println("1. 基础函数指针测试");
    std::println("===================");
    
    // 创建函数指针（暂时使用简化语法）
    // funcPtr : *fn(int) -> int = &addOne;
    
    // 由于函数指针语法复杂，先测试基础概念
    std::println("函数指针概念验证:");
    
    // 调用普通函数
    result1 : int = addOne(5);
    std::println("直接调用 addOne(5): " + result1);
    
    result2 : int = multiply(3, 4);
    std::println("直接调用 multiply(3, 4): " + result2);
    
    // 模拟函数指针调用
    std::println("模拟函数指针调用成功");
};

fn testFunctionPointerParameter() : void {
    std::println("");
    std::println("2. 函数指针参数测试");
    std::println("===================");
    
    // 模拟高阶函数
    result1 : int = applyFunction(10, 1); // 1 表示使用 addOne
    std::println("应用 addOne 到 10: " + result1);
    
    result2 : int = applyFunction(10, 2); // 2 表示使用 square
    std::println("应用 square 到 10: " + result2);
};

fn testFunctionPointerArray() : void {
    std::println("");
    std::println("3. 函数指针数组测试");
    std::println("===================");
    
    // 模拟函数指针数组
    std::println("函数指针数组概念:");
    
    // 通过索引调用不同函数
    result1 : int = callByIndex(5, 0); // 调用第0个函数
    std::println("索引0函数(5): " + result1);
    
    result2 : int = callByIndex(5, 1); // 调用第1个函数
    std::println("索引1函数(5): " + result2);
    
    result3 : int = callByIndex(5, 2); // 调用第2个函数
    std::println("索引2函数(5): " + result3);
};

// 测试函数
fn addOne(x : int) : int {
    return x + 1;
};

fn square(x : int) : int {
    return x * x;
};

fn multiply(a : int, b : int) : int {
    return a * b;
};

fn double(x : int) : int {
    return x * 2;
};

// 高阶函数模拟
fn applyFunction(value : int, funcType : int) : int {
    if (funcType == 1) {
        return addOne(value);
    } else if (funcType == 2) {
        return square(value);
    } else {
        return value;
    };
};

// 函数指针数组模拟
fn callByIndex(value : int, index : int) : int {
    if (index == 0) {
        return addOne(value);
    } else if (index == 1) {
        return square(value);
    } else if (index == 2) {
        return double(value);
    } else {
        return value;
    };
};
