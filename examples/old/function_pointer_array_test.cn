using lib <io>;
using ns std;

// 函数指针数组测试

fn add(a : int, b : int) : int {
    return a + b;
};

fn subtract(a : int, b : int) : int {
    return a - b;
};

fn multiply(a : int, b : int) : int {
    return a * b;
};

fn divide(a : int, b : int) : int {
    if (b != 0) {
        return a / b;
    } else {
        return 0;
    };
};

fn main() : int {
    std::println("=== 函数指针数组测试 ===");
    std::println("");
    
    // 测试1：函数指针数组声明和初始化
    testFunctionPointerArrayDeclaration();
    
    // 测试2：函数指针数组访问和调用
    testFunctionPointerArrayAccess();
    
    // 测试3：Lambda函数指针数组
    testLambdaFunctionPointerArray();
    
    std::println("");
    std::println("=== 函数指针数组测试完成 ===");
    return 0;
};

fn testFunctionPointerArrayDeclaration() : void {
    std::println("1. 函数指针数组声明和初始化测试");
    std::println("===============================");
    
    // 声明函数指针数组类型
    operations : []*fn(int, int) : int = [add, subtract, multiply, divide];
    
    std::println("✓ 函数指针数组声明成功");
    std::println("  数组包含4个数学运算函数指针");
    std::println("");
};

fn testFunctionPointerArrayAccess() : void {
    std::println("2. 函数指针数组访问和调用测试");
    std::println("=============================");
    
    // 创建函数指针数组
    operations : []*fn(int, int) : int = [add, subtract, multiply, divide];
    
    // 通过数组索引访问和调用函数指针
    result1 : int = operations[0](10, 5);  // add
    std::println("operations[0](10, 5) = " + result1);
    
    result2 : int = operations[1](10, 5);  // subtract
    std::println("operations[1](10, 5) = " + result2);
    
    result3 : int = operations[2](10, 5);  // multiply
    std::println("operations[2](10, 5) = " + result3);
    
    result4 : int = operations[3](10, 5);  // divide
    std::println("operations[3](10, 5) = " + result4);
    
    std::println("");
};

fn testLambdaFunctionPointerArray() : void {
    std::println("3. Lambda函数指针数组测试");
    std::println("=========================");
    
    // 创建Lambda函数指针数组
    lambdas : []*fn(int, int) : int = [
        ((a, b) => a + b),
        ((a, b) => a - b),
        ((a, b) => a * b),
        ((a, b) => a * a + b * b)
    ];
    
    // 调用Lambda函数指针
    result1 : int = lambdas[0](3, 4);
    std::println("lambdas[0](3, 4) = " + result1);
    
    result2 : int = lambdas[1](3, 4);
    std::println("lambdas[1](3, 4) = " + result2);
    
    result3 : int = lambdas[2](3, 4);
    std::println("lambdas[2](3, 4) = " + result3);
    
    result4 : int = lambdas[3](3, 4);
    std::println("lambdas[3](3, 4) = " + result4);
    
    std::println("");
};
