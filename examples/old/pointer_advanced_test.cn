using lib <io>;
using ns std;

// 高级指针功能测试

// 定义一个枚举用于测试
enum Status {
    Active,
    Inactive,
    Pending(string)
};

fn main() : int {
    std::println("=== CodeNothing 高级指针功能测试 ===");
    
    // 测试1：指针与枚举
    testPointerWithEnum();
    
    // 测试2：指针数组
    testPointerArray();
    
    // 测试3：指针方法调用
    testPointerMethods();
    
    std::println("");
    std::println("=== 高级指针功能测试完成 ===");
    return 0;
};

fn testPointerWithEnum() : void {
    std::println("");
    std::println("1. 指针与枚举测试");
    std::println("=================");
    
    // 创建枚举值
    activeStatus : Status = Status::Active;
    pendingStatus : Status = Status::Pending("等待审核");
    
    // 创建指向枚举的指针
    activePtr : *Status = &activeStatus;
    pendingPtr : *Status = &pendingStatus;
    
    std::println("活跃状态指针: " + activePtr);
    std::println("等待状态指针: " + pendingPtr);
    
    // 解引用枚举指针
    derefActive : Status = *activePtr;
    derefPending : Status = *pendingPtr;
    
    std::println("解引用活跃状态: " + derefActive);
    std::println("解引用等待状态: " + derefPending);
    
    // 通过解引用获取枚举值，然后调用方法
    derefActiveForMethod : Status = *activePtr;
    derefPendingForMethod : Status = *pendingPtr;

    activeName : string = derefActiveForMethod.getVariantName();
    pendingName : string = derefPendingForMethod.getVariantName();

    std::println("活跃状态名称: " + activeName);
    std::println("等待状态名称: " + pendingName);
};

fn testPointerArray() : void {
    std::println("");
    std::println("2. 指针数组测试");
    std::println("================");
    
    // 创建多个值
    val1 : int = 10;
    val2 : int = 20;
    val3 : int = 30;
    
    // 创建指向这些值的指针
    ptr1 : *int = &val1;
    ptr2 : *int = &val2;
    ptr3 : *int = &val3;
    
    std::println("指针1: " + ptr1 + " -> " + *ptr1);
    std::println("指针2: " + ptr2 + " -> " + *ptr2);
    std::println("指针3: " + ptr3 + " -> " + *ptr3);
    
    // 计算指针指向值的总和
    sum : int = *ptr1 + *ptr2 + *ptr3;
    std::println("指针值总和: " + sum);
};

fn testPointerMethods() : void {
    std::println("");
    std::println("3. 指针方法调用测试");
    std::println("===================");
    
    // 创建字符串值
    text : string = "Hello, Pointers!";
    textPtr : *string = &text;
    
    std::println("原始字符串: " + text);
    std::println("字符串指针: " + textPtr);
    std::println("解引用字符串: " + *textPtr);
    
    // 通过解引用获取字符串值，然后调用方法
    derefText : string = *textPtr;

    length : int = derefText.length();
    std::println("字符串长度: " + length);

    upperText : string = derefText.to_upper();
    std::println("大写字符串: " + upperText);

    // 测试字符串方法
    startsWithHello : bool = derefText.startsWith("Hello");
    std::println("以Hello开头: " + startsWithHello);

    containsPointers : bool = derefText.contains("Pointers");
    std::println("包含Pointers: " + containsPointers);
};

fn processPointerValue(ptr : *int) : int {
    std::println("处理指针: " + ptr);
    value : int = *ptr;
    std::println("指针值: " + value);
    return value * 2;
};

fn createStatusPointer(message : string) : *Status {
    status : Status = Status::Pending(message);
    return &status;
};
