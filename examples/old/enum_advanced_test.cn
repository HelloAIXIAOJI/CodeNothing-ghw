using lib <io>;
using ns std;

// 高级枚举测试：与其他语言特性的集成

// 1. 枚举与数组的结合
enum Priority {
    Low,
    Medium,
    High,
    Critical(string)
};

// 2. 枚举与映射的结合
enum TaskStatus {
    Todo,
    InProgress(string),
    Done(string),
    Cancelled(string)
};

// 3. 枚举与类的结合
class Task {
    public name : string;
    public status : TaskStatus;
    public priority : Priority;
    
    public fn new(name : string) : Task {
        task : Task = Task();
        task.name = name;
        task.status = TaskStatus::Todo;
        task.priority = Priority::Medium;
        return task;
    };
    
    public fn setPriority(self, priority : Priority) : void {
        self.priority = priority;
    };
    
    public fn setStatus(self, status : TaskStatus) : void {
        self.status = status;
    };
    
    public fn getInfo(self) : string {
        return "任务: " + self.name + ", 状态: " + self.status + ", 优先级: " + self.priority;
    };
};

fn main() : int {
    std::println("=== CodeNothing 枚举高级特性测试 ===");
    
    // 1. 枚举数组测试
    std::println("1. 枚举数组测试");
    std::println("---------------");
    
    priorities : Priority[] = [
        Priority::Low,
        Priority::Medium,
        Priority::High,
        Priority::Critical("紧急修复")
    ];
    
    for (i : 0..priorities.length) {
        std::println("优先级 " + i + ": " + priorities[i]);
    };
    
    // 2. 枚举映射测试
    std::println("");
    std::println("2. 枚举映射测试");
    std::println("---------------");
    
    statusMap : map<string, TaskStatus> = {
        "task1": TaskStatus::Todo,
        "task2": TaskStatus::InProgress("开发中"),
        "task3": TaskStatus::Done("已完成"),
        "task4": TaskStatus::Cancelled("需求变更")
    };
    
    std::println("任务状态映射:");
    std::println("task1: " + statusMap["task1"]);
    std::println("task2: " + statusMap["task2"]);
    std::println("task3: " + statusMap["task3"]);
    std::println("task4: " + statusMap["task4"]);
    
    // 3. 枚举与类的集成测试
    std::println("");
    std::println("3. 枚举与类的集成测试");
    std::println("---------------------");
    
    task1 : Task = Task::new("实现枚举功能");
    task1.setPriority(Priority::High);
    task1.setStatus(TaskStatus::InProgress("正在编码"));
    
    task2 : Task = Task::new("编写测试用例");
    task2.setPriority(Priority::Critical("阻塞发布"));
    task2.setStatus(TaskStatus::Done("测试通过"));
    
    std::println(task1.getInfo());
    std::println(task2.getInfo());
    
    // 4. 枚举在函数中的高级使用
    std::println("");
    std::println("4. 枚举在函数中的高级使用");
    std::println("---------------------------");
    
    processTasks([task1, task2]);
    
    // 5. 枚举的条件判断（模拟模式匹配）
    std::println("");
    std::println("5. 枚举的条件判断");
    std::println("-----------------");
    
    testPriority(Priority::Low);
    testPriority(Priority::High);
    testPriority(Priority::Critical("系统崩溃"));
    
    std::println("");
    std::println("=== 枚举高级特性测试完成 ===");
    return 0;
};

// 处理任务数组的函数
fn processTasks(tasks : Task[]) : void {
    std::println("处理任务列表:");
    for (i : 0..tasks.length) {
        std::println("  " + tasks[i].getInfo());
    };
};

// 测试优先级处理（模拟模式匹配）
fn testPriority(priority : Priority) : void {
    // 注意：这里使用字符串比较来模拟模式匹配
    // 在未来版本中将支持真正的模式匹配
    priorityStr : string = priority.toString();
    
    if (priorityStr.startsWith("Priority::Critical")) {
        std::println("处理关键优先级: " + priority);
        std::println("  -> 立即处理！");
    } else if (priorityStr == "Priority::High") {
        std::println("处理高优先级: " + priority);
        std::println("  -> 优先处理");
    } else {
        std::println("处理普通优先级: " + priority);
        std::println("  -> 正常处理");
    };
};

// 创建不同状态的任务
fn createTaskWithStatus(name : string, status : TaskStatus) : Task {
    task : Task = Task::new(name);
    task.setStatus(status);
    return task;
};
