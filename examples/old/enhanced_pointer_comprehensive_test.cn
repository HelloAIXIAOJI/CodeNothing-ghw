using lib <io>;
using ns std;

// CodeNothing v0.5.0 增强指针功能综合测试

enum DataType {
    Integer(int),
    Text(string),
    Flag(bool)
};

fn main() : int {
    std::println("=== CodeNothing v0.5.0 增强指针功能综合测试 ===");
    
    // 测试1：真实内存地址
    testRealMemoryAddresses();
    
    // 测试2：指针算术运算
    testPointerArithmetic();
    
    // 测试3：多级指针
    testMultiLevelPointers();
    
    // 测试4：复杂解引用
    testComplexDereference();
    
    // 测试5：内存安全
    testMemorySafety();
    
    // 测试6：枚举与指针集成
    testEnumPointerIntegration();
    
    std::println("");
    std::println("=== 所有增强功能测试通过！ ===");
    return 0;
};

fn testRealMemoryAddresses() : void {
    std::println("");
    std::println("1. 真实内存地址测试");
    std::println("===================");
    
    value1 : int = 100;
    value2 : int = 200;
    value3 : int = 300;
    
    ptr1 : *int = &value1;
    ptr2 : *int = &value2;
    ptr3 : *int = &value3;
    
    std::println("内存分配情况:");
    std::println("  值1地址: " + ptr1 + " -> " + *ptr1);
    std::println("  值2地址: " + ptr2 + " -> " + *ptr2);
    std::println("  值3地址: " + ptr3 + " -> " + *ptr3);
    
    // 验证地址的真实性（应该是递增的）
    addr1 : long = ptr1.getAddress();
    addr2 : long = ptr2.getAddress();
    addr3 : long = ptr3.getAddress();
    
    std::println("地址值:");
    std::println("  地址1: " + addr1);
    std::println("  地址2: " + addr2);
    std::println("  地址3: " + addr3);
    
    std::println("✓ 真实内存地址测试通过");
};

fn testPointerArithmetic() : void {
    std::println("");
    std::println("2. 指针算术运算测试");
    std::println("===================");
    
    baseValue : int = 42;
    basePtr : *int = &baseValue;
    
    std::println("基础指针: " + basePtr + " -> " + *basePtr);
    
    // 指针加法
    ptr_plus_1 : *int = basePtr + 1;
    ptr_plus_5 : *int = basePtr + 5;
    ptr_plus_10 : *int = basePtr + 10;
    
    std::println("指针算术:");
    std::println("  base + 1: " + ptr_plus_1);
    std::println("  base + 5: " + ptr_plus_5);
    std::println("  base + 10: " + ptr_plus_10);
    
    // 指针减法
    ptr_back_5 : *int = ptr_plus_10 - 5;
    ptr_back_10 : *int = ptr_plus_10 - 10;
    
    std::println("指针回退:");
    std::println("  (base + 10) - 5: " + ptr_back_5);
    std::println("  (base + 10) - 10: " + ptr_back_10);
    
    // 指针差值
    diff1 : int = ptr_plus_10 - basePtr;
    diff2 : int = ptr_plus_5 - ptr_plus_1;
    
    std::println("指针差值:");
    std::println("  (base + 10) - base: " + diff1);
    std::println("  (base + 5) - (base + 1): " + diff2);
    
    std::println("✓ 指针算术运算测试通过");
};

fn testMultiLevelPointers() : void {
    std::println("");
    std::println("3. 多级指针测试");
    std::println("===============");
    
    value : int = 999;
    ptr : *int = &value;
    ptrPtr : **int = &ptr;
    ptrPtrPtr : ***int = &ptrPtr;
    
    std::println("多级指针链:");
    std::println("  原始值: " + value);
    std::println("  一级指针: " + ptr + " (级别: " + ptr.getLevel() + ")");
    std::println("  二级指针: " + ptrPtr + " (级别: " + ptrPtr.getLevel() + ")");
    std::println("  三级指针: " + ptrPtrPtr + " (级别: " + ptrPtrPtr.getLevel() + ")");
    
    // 逐级解引用
    level2 : **int = *ptrPtrPtr;
    level1 : *int = *(*ptrPtrPtr);
    finalValue : int = *(*(*ptrPtrPtr));
    
    std::println("逐级解引用:");
    std::println("  *ptrPtrPtr: " + level2);
    std::println("  **ptrPtrPtr: " + level1);
    std::println("  ***ptrPtrPtr: " + finalValue);
    
    // 验证一致性
    if (value == finalValue) {
        std::println("✓ 多级指针解引用一致");
    } else {
        std::println("✗ 多级指针解引用不一致");
    };
    
    std::println("✓ 多级指针测试通过");
};

fn testComplexDereference() : void {
    std::println("");
    std::println("4. 复杂解引用测试");
    std::println("=================");
    
    // 字符串指针方法调用
    text : string = "CodeNothing v0.5.0";
    textPtr : *string = &text;
    
    std::println("字符串指针: " + textPtr);
    
    derefText : string = *textPtr;
    length : int = derefText.length();
    upperText : string = derefText.to_upper();
    
    std::println("通过解引用调用方法:");
    std::println("  长度: " + length);
    std::println("  大写: " + upperText);
    
    // 多级字符串指针
    textPtrPtr : **string = &textPtr;
    finalText : string = *(*textPtrPtr);
    finalLength : int = finalText.length();
    
    std::println("多级解引用方法调用:");
    std::println("  最终文本: " + finalText);
    std::println("  最终长度: " + finalLength);
    
    std::println("✓ 复杂解引用测试通过");
};

fn testMemorySafety() : void {
    std::println("");
    std::println("5. 内存安全测试");
    std::println("===============");
    
    value : int = 777;
    ptr : *int = &value;
    
    std::println("安全检查:");
    std::println("  指针: " + ptr);
    std::println("  是否为空: " + ptr.isNull());
    std::println("  指针级别: " + ptr.getLevel());
    std::println("  内存地址: " + ptr.getAddress());
    
    // 指针算术安全性
    safePtr1 : *int = ptr + 1;
    safePtr2 : *int = safePtr1 - 1;
    
    std::println("算术安全性:");
    std::println("  ptr + 1: " + safePtr1);
    std::println("  (ptr + 1) - 1: " + safePtr2);
    
    // 验证往返一致性
    if (ptr.toString() == safePtr2.toString()) {
        std::println("✓ 指针算术往返安全");
    } else {
        std::println("⚠ 指针算术往返异常");
    };
    
    std::println("✓ 内存安全测试通过");
};

fn testEnumPointerIntegration() : void {
    std::println("");
    std::println("6. 枚举与指针集成测试");
    std::println("=====================");
    
    // 创建枚举值
    intData : DataType = DataType::Integer(42);
    textData : DataType = DataType::Text("Hello");
    flagData : DataType = DataType::Flag(true);
    
    // 创建枚举指针
    intPtr : *DataType = &intData;
    textPtr : *DataType = &textData;
    flagPtr : *DataType = &flagData;
    
    std::println("枚举指针:");
    std::println("  整数数据指针: " + intPtr);
    std::println("  文本数据指针: " + textPtr);
    std::println("  标志数据指针: " + flagPtr);
    
    // 通过指针访问枚举
    derefInt : DataType = *intPtr;
    derefText : DataType = *textPtr;
    derefFlag : DataType = *flagPtr;
    
    std::println("解引用枚举:");
    std::println("  " + derefInt);
    std::println("  " + derefText);
    std::println("  " + derefFlag);
    
    // 调用枚举方法
    intName : string = derefInt.getVariantName();
    textName : string = derefText.getVariantName();
    flagName : string = derefFlag.getVariantName();
    
    std::println("枚举变体名:");
    std::println("  " + intName);
    std::println("  " + textName);
    std::println("  " + flagName);
    
    // 多级枚举指针
    intPtrPtr : **DataType = &intPtr;
    finalEnum : DataType = *(*intPtrPtr);
    finalName : string = finalEnum.getVariantName();
    
    std::println("多级枚举指针:");
    std::println("  二级指针: " + intPtrPtr);
    std::println("  最终枚举: " + finalEnum);
    std::println("  最终名称: " + finalName);
    
    std::println("✓ 枚举与指针集成测试通过");
};
