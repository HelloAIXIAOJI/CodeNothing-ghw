using lib <io>;
using ns std;

// 基础枚举集成测试

enum Status {
    Active,
    Inactive,
    Pending(string)
};

enum Priority {
    Low,
    Medium,
    High
};

fn main() : int {
    std::println("=== 基础枚举集成测试 ===");
    
    // 1. 枚举作为函数参数和返回值
    std::println("1. 枚举函数测试");
    
    result : Status = processStatus(Status::Active);
    std::println("处理结果: " + result);
    
    result = processStatus(Status::Pending("等待批准"));
    std::println("处理结果: " + result);
    
    // 2. 枚举变量赋值和传递
    std::println("");
    std::println("2. 枚举变量测试");
    
    status1 : Status = Status::Active;
    status2 : Status = Status::Inactive;
    status3 : Status = Status::Pending("审核中");
    
    std::println("状态1: " + status1);
    std::println("状态2: " + status2);
    std::println("状态3: " + status3);
    
    // 3. 优先级枚举测试
    std::println("");
    std::println("3. 优先级枚举测试");
    
    priority : Priority = getPriority();
    std::println("获取的优先级: " + priority);
    
    setPriority(Priority::Low);
    setPriority(Priority::Medium);
    setPriority(Priority::High);
    
    // 4. 枚举重新赋值
    std::println("");
    std::println("4. 枚举重新赋值测试");
    
    currentStatus : Status = Status::Inactive;
    std::println("初始状态: " + currentStatus);
    
    currentStatus = Status::Active;
    std::println("更新状态: " + currentStatus);
    
    currentStatus = Status::Pending("等待处理");
    std::println("最终状态: " + currentStatus);
    
    std::println("");
    std::println("=== 测试完成 ===");
    return 0;
};

fn processStatus(status : Status) : Status {
    std::println("处理状态: " + status);
    
    // 简单返回一个新状态
    return Status::Active;
};

fn getPriority() : Priority {
    return Priority::High;
};

fn setPriority(priority : Priority) : void {
    std::println("设置优先级: " + priority);
};
