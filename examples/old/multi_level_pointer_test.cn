using lib <io>;
using ns std;

// 多级指针测试

fn main() : int {
    std::println("=== CodeNothing 多级指针测试 ===");
    
    // 测试1：二级指针
    testDoublePointer();
    
    // 测试2：三级指针
    testTriplePointer();
    
    // 测试3：多级指针算术
    testMultiLevelArithmetic();
    
    std::println("");
    std::println("=== 多级指针测试完成 ===");
    return 0;
};

fn testDoublePointer() : void {
    std::println("");
    std::println("1. 二级指针测试");
    std::println("===============");
    
    // 创建一个值
    value : int = 42;
    std::println("原始值: " + value);
    
    // 创建指向值的指针
    ptr : *int = &value;
    std::println("一级指针: " + ptr + " -> " + *ptr);
    
    // 创建指向指针的指针
    ptrPtr : **int = &ptr;
    std::println("二级指针: " + ptrPtr);
    
    // 通过二级指针访问值
    derefPtr : *int = *ptrPtr;
    std::println("解引用二级指针得到一级指针: " + derefPtr);
    
    derefValue : int = **ptrPtr;
    std::println("二次解引用得到值: " + derefValue);
    
    // 验证值的一致性
    if (value == derefValue) {
        std::println("✓ 二级指针访问正确");
    } else {
        std::println("✗ 二级指针访问错误");
    };
};

fn testTriplePointer() : void {
    std::println("");
    std::println("2. 三级指针测试");
    std::println("===============");
    
    // 创建一个值
    value : int = 100;
    std::println("原始值: " + value);
    
    // 创建指针链
    ptr : *int = &value;
    ptrPtr : **int = &ptr;
    ptrPtrPtr : ***int = &ptrPtr;
    
    std::println("一级指针: " + ptr);
    std::println("二级指针: " + ptrPtr);
    std::println("三级指针: " + ptrPtrPtr);
    
    // 逐级解引用
    level2 : **int = *ptrPtrPtr;
    std::println("解引用三级指针: " + level2);
    
    level1 : *int = **ptrPtrPtr;
    std::println("二次解引用三级指针: " + level1);
    
    finalValue : int = ***ptrPtrPtr;
    std::println("三次解引用得到值: " + finalValue);
    
    // 验证值的一致性
    if (value == finalValue) {
        std::println("✓ 三级指针访问正确");
    } else {
        std::println("✗ 三级指针访问错误");
    };
};

fn testMultiLevelArithmetic() : void {
    std::println("");
    std::println("3. 多级指针算术测试");
    std::println("===================");
    
    // 创建多个值
    val1 : int = 10;
    val2 : int = 20;
    val3 : int = 30;
    
    // 创建指针数组（模拟）
    ptr1 : *int = &val1;
    ptr2 : *int = &val2;
    ptr3 : *int = &val3;
    
    std::println("指针1: " + ptr1 + " -> " + *ptr1);
    std::println("指针2: " + ptr2 + " -> " + *ptr2);
    std::println("指针3: " + ptr3 + " -> " + *ptr3);
    
    // 创建指向指针的指针
    ptrArray : **int = &ptr1;
    std::println("指针数组基址: " + ptrArray);
    
    // 通过二级指针访问
    firstPtr : *int = *ptrArray;
    std::println("第一个指针: " + firstPtr + " -> " + *firstPtr);
    
    // 指针算术（在二级指针上）
    secondPtrPtr : **int = ptrArray + 1;
    std::println("第二个指针的地址: " + secondPtrPtr);
    
    thirdPtrPtr : **int = ptrArray + 2;
    std::println("第三个指针的地址: " + thirdPtrPtr);
    
    // 计算指针差值
    diff : int = thirdPtrPtr - ptrArray;
    std::println("指针差值: " + diff);
};
