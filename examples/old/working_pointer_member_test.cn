using lib <io>;
using ns std;

// CodeNothing 工作的指针成员访问测试
// 只使用当前完全支持的语法

fn main() : int {
    std::println("=== CodeNothing 工作的指针成员访问测试 ===");
    std::println("");
    
    // 测试1：字符串指针成员访问
    testStringPointerMemberAccess();
    
    // 测试2：基础指针操作
    testBasicPointerOperations();
    
    // 测试3：安全的指针成员访问
    testSafePointerMemberAccess();
    
    std::println("");
    std::println("=== 指针成员访问测试完成 ===");
    return 0;
};

fn testStringPointerMemberAccess() : void {
    std::println("1. 字符串指针成员访问测试");
    std::println("===========================");
    
    // 创建字符串和指针
    text : string = "Hello, CodeNothing!";
    textPtr : *string = &text;
    
    std::println("原始字符串: " + text);
    std::println("字符串指针: " + textPtr + " -> " + *textPtr);
    
    // 测试通过指针访问字符串的内置属性/方法
    // 使用解引用方式访问成员
    length1 : int = (*textPtr).length();
    std::println("通过解引用访问长度: " + length1);
    
    // 验证结果
    if (length1 == text.length()) {
        std::println("✓ 字符串指针成员访问正确");
    } else {
        std::println("✗ 字符串指针成员访问错误");
    };
    
    std::println("");
};

fn testBasicPointerOperations() : void {
    std::println("2. 基础指针操作测试");
    std::println("===================");
    
    // 创建基础数据
    value1 : int = 100;
    value2 : float = 3.14;
    value3 : string = "Test String";
    
    // 创建指针
    ptr1 : *int = &value1;
    ptr2 : *float = &value2;
    ptr3 : *string = &value3;
    
    std::println("原始数据:");
    std::println("  value1: " + value1);
    std::println("  value2: " + value2);
    std::println("  value3: " + value3);
    
    std::println("指针访问:");
    std::println("  ptr1: " + ptr1 + " -> " + *ptr1);
    std::println("  ptr2: " + ptr2 + " -> " + *ptr2);
    std::println("  ptr3: " + ptr3 + " -> " + *ptr3);
    
    // 测试字符串指针的成员访问
    stringLength : int = (*ptr3).length();
    std::println("  字符串长度: " + stringLength);
    
    // 验证结果
    if (*ptr1 == value1 && *ptr2 == value2 && *ptr3 == value3) {
        std::println("✓ 基础指针操作正确");
    } else {
        std::println("✗ 基础指针操作错误");
    };
    
    std::println("");
};

fn testSafePointerMemberAccess() : void {
    std::println("3. 安全的指针成员访问测试");
    std::println("===========================");
    
    // 创建测试数据
    testString : string = "Safe Access Test";
    stringPtr : *string = &testString;
    
    std::println("测试字符串: " + testString);
    std::println("字符串指针: " + stringPtr);
    
    // 测试指针有效性检查
    std::println("指针有效性检查:");
    std::println("  stringPtr.isNull(): " + stringPtr.isNull());
    
    // 安全的成员访问
    if (!stringPtr.isNull()) {
        safeLength : int = (*stringPtr).length();
        std::println("  安全访问长度: " + safeLength);
        
        // 测试指针的内置方法
        address : long = stringPtr.getAddress();
        level : int = stringPtr.getLevel();
        ptrString : string = stringPtr.toString();
        
        std::println("指针内置方法:");
        std::println("  getAddress(): " + address);
        std::println("  getLevel(): " + level);
        std::println("  toString(): " + ptrString);
        
        std::println("✓ 安全的指针成员访问正确");
    } else {
        std::println("✗ 指针为空");
    };
    
    std::println("");
};

// 辅助函数：安全的成员访问
fn safeMemberAccess(ptr : *string) : int {
    if (!ptr.isNull()) {
        return (*ptr).length();
    } else {
        return 0;
    };
};

// 辅助函数：指针有效性检查
fn validatePointer(ptr : *string) : bool {
    return !ptr.isNull() && ptr.getAddress() != 0;
};

// 辅助函数：复杂的指针操作
fn complexPointerOperation(ptr : *string) : string {
    if (validatePointer(ptr)) {
        value : string = *ptr;
        length : int = (*ptr).length();
        address : long = ptr.getAddress();
        return "Value: " + value + ", Length: " + length + ", Address: " + address;
    } else {
        return "Invalid pointer";
    };
};
