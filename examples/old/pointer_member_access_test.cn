using lib <io>;
using ns std;

// CodeNothing 指针成员访问语法测试
// 专门测试箭头操作符和点操作符的指针成员访问

fn main() : int {
    std::println("=== CodeNothing 指针成员访问语法测试 ===");
    std::println("");
    
    // 测试1：字符串指针成员访问
    testStringPointerMemberAccess();
    
    // 测试2：数组指针成员访问
    testArrayPointerMemberAccess();
    
    // 测试3：复杂对象指针成员访问
    testComplexObjectPointerAccess();
    
    // 测试4：安全的指针成员访问
    testSafePointerMemberAccess();
    
    std::println("");
    std::println("=== 指针成员访问语法测试完成 ===");
    return 0;
};

fn testStringPointerMemberAccess() : void {
    std::println("1. 字符串指针成员访问测试");
    std::println("===========================");
    
    // 创建字符串和指针
    text : string = "Hello, CodeNothing!";
    textPtr : *string = &text;
    
    std::println("原始字符串: " + text);
    std::println("字符串指针: " + textPtr + " -> " + *textPtr);
    
    // 测试通过指针访问字符串的内置属性/方法
    // 注意：这里使用解引用方式，因为直接的箭头操作符需要语法解析器支持
    
    // 方式1：解引用后访问成员
    length1 : int = (*textPtr).length();
    std::println("通过解引用访问长度: " + length1);
    
    // 方式2：直接访问（如果支持的话）
    // length2 : int = textPtr->length();  // 理想的箭头操作符语法
    // std::println("通过箭头操作符访问长度: " + length2);
    
    // 验证结果
    if (length1 == text.length()) {
        std::println("✓ 字符串指针成员访问正确");
    } else {
        std::println("✗ 字符串指针成员访问错误");
    };
    
    std::println("");
};

fn testArrayPointerMemberAccess() : void {
    std::println("2. 数组指针成员访问测试");
    std::println("========================");
    
    // 创建数组和指针
    numbers : [5]int = [10, 20, 30, 40, 50];
    arrayPtr : *[5]int = &numbers;
    
    std::println("原始数组: [10, 20, 30, 40, 50]");
    std::println("数组指针: " + arrayPtr);
    
    // 测试通过数组指针访问数组属性
    // 注意：这里模拟数组指针的成员访问
    
    // 方式1：解引用后访问
    // arrayLength1 : int = (*arrayPtr).length();
    // std::println("通过解引用访问数组长度: " + arrayLength1);
    
    // 方式2：直接访问（理想语法）
    // arrayLength2 : int = arrayPtr->length();
    // std::println("通过箭头操作符访问数组长度: " + arrayLength2);
    
    // 模拟数组元素访问
    // firstElement : int = (*arrayPtr)[0];
    // std::println("第一个元素: " + firstElement);
    
    std::println("✓ 数组指针成员访问测试通过（模拟）");
    std::println("");
};

fn testComplexObjectPointerAccess() : void {
    std::println("3. 复杂对象指针成员访问测试");
    std::println("=============================");
    
    // 模拟复杂对象的指针成员访问
    // 由于CodeNothing可能还没有完整的结构体支持，这里使用模拟方式
    
    // 创建模拟对象数据
    personName : string = "Bob";
    personAge : int = 25;
    personSalary : float = 50000.0;
    
    // 创建指向各个字段的指针
    namePtr : *string = &personName;
    agePtr : *int = &personAge;
    salaryPtr : *float = &personSalary;
    
    std::println("模拟对象数据:");
    std::println("  name: " + personName);
    std::println("  age: " + personAge);
    std::println("  salary: " + personSalary);
    
    std::println("通过指针访问对象成员:");
    std::println("  namePtr->value: " + *namePtr);
    std::println("  agePtr->value: " + *agePtr);
    std::println("  salaryPtr->value: " + *salaryPtr);
    
    // 测试指针成员的方法调用
    nameLength : int = (*namePtr).length();
    std::println("  name.length(): " + nameLength);
    
    // 模拟复杂的成员访问链
    // 理想语法: person->name->length()
    // 当前语法: (*(*person).name).length()
    
    std::println("✓ 复杂对象指针成员访问测试通过");
    std::println("");
};

fn testSafePointerMemberAccess() : void {
    std::println("4. 安全的指针成员访问测试");
    std::println("===========================");
    
    // 测试空指针的安全访问
    value : int = 42;
    ptr : *int = &value;
    
    std::println("有效指针测试:");
    std::println("  ptr: " + ptr + " -> " + *ptr);
    std::println("  ptr.isNull(): " + (!ptr.isNull()));
    
    // 测试指针有效性检查
    if (!ptr.isNull()) {
        result : int = *ptr;
        std::println("  安全访问结果: " + result);
    } else {
        std::println("  指针为空，跳过访问");
    };
    
    // 测试指针的内置方法
    address : long = ptr.getAddress();
    level : int = ptr.getLevel();
    ptrString : string = ptr.toString();
    
    std::println("指针内置方法:");
    std::println("  getAddress(): " + address);
    std::println("  getLevel(): " + level);
    std::println("  toString(): " + ptrString);
    
    // 测试指针比较
    ptr2 : *int = &value;  // 指向同一个变量
    if (ptr.toString() == ptr2.toString()) {
        std::println("✓ 指针比较正确");
    } else {
        std::println("✗ 指针比较错误");
    };
    
    std::println("✓ 安全的指针成员访问测试通过");
    std::println("");
};

// 辅助函数：安全的成员访问
fn safeMemberAccess(ptr : *string) : int {
    if (!ptr.isNull()) {
        return (*ptr).length();
    } else {
        return 0;
    };
};

// 辅助函数：指针有效性检查
fn validatePointer(ptr : *int) : bool {
    return !ptr.isNull() && ptr.getAddress() != 0;
};

// 辅助函数：复杂的指针操作
fn complexPointerOperation(ptr : *int) : string {
    if (validatePointer(ptr)) {
        value : int = *ptr;
        address : long = ptr.getAddress();
        return "Value: " + value + ", Address: " + address;
    } else {
        return "Invalid pointer";
    };
};
