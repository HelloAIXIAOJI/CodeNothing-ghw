using lib <io>;
using ns std;

// Lambda函数闭包测试

fn main() : int {
    std::println("=== Lambda函数闭包测试 ===");
    std::println("");
    
    // 测试1：基础闭包
    testBasicClosure();
    
    // 测试2：多变量闭包
    testMultiVariableClosure();
    
    // 测试3：嵌套作用域闭包
    testNestedScopeClosure();
    
    // 测试4：闭包修改外部变量
    testClosureModification();
    
    std::println("");
    std::println("=== Lambda函数闭包测试完成 ===");
    return 0;
};

fn testBasicClosure() : void {
    std::println("1. 基础闭包测试");
    std::println("===============");
    
    // 外部变量
    multiplier : int = 3;
    
    // Lambda函数捕获外部变量
    multiply : *fn(int) : int = (x => x * multiplier);
    
    result1 : int = multiply(5);
    std::println("multiply(5) = " + result1 + " (应该是 15)");
    
    result2 : int = multiply(7);
    std::println("multiply(7) = " + result2 + " (应该是 21)");
    
    std::println("");
};

fn testMultiVariableClosure() : void {
    std::println("2. 多变量闭包测试");
    std::println("=================");
    
    // 多个外部变量
    base : int = 10;
    offset : int = 5;
    
    // Lambda函数捕获多个外部变量
    calculate : *fn(int) : int = (x => x + base + offset);
    
    result1 : int = calculate(3);
    std::println("calculate(3) = " + result1 + " (应该是 18)");
    
    result2 : int = calculate(7);
    std::println("calculate(7) = " + result2 + " (应该是 22)");
    
    std::println("");
};

fn testNestedScopeClosure() : void {
    std::println("3. 嵌套作用域闭包测试");
    std::println("=====================");
    
    // 外部作用域变量
    outerVar : int = 100;
    
    // 创建返回Lambda的函数
    createAdder : *fn(int) : *fn(int) : int = getAdderFunction();
    
    // 使用返回的Lambda
    adder : *fn(int) : int = createAdder(outerVar);
    result : int = adder(25);
    std::println("adder(25) = " + result + " (应该是 125)");
    
    std::println("");
};

fn testClosureModification() : void {
    std::println("4. 闭包修改外部变量测试");
    std::println("=======================");
    
    // 外部变量
    counter : int = 0;
    
    // Lambda函数使用外部变量（只读）
    getCounter : *fn() : int = (() => counter);
    
    result1 : int = getCounter();
    std::println("getCounter() = " + result1 + " (应该是 0)");
    
    // 修改外部变量
    counter = 42;
    
    // 注意：由于闭包是在创建时捕获的，所以仍然是原来的值
    result2 : int = getCounter();
    std::println("getCounter() = " + result2 + " (仍然是 0，因为闭包捕获了创建时的值)");
    
    std::println("");
};

// 返回Lambda函数的函数
fn getAdderFunction() : *fn(int) : *fn(int) : int {
    // 这个函数返回一个Lambda，该Lambda接受一个参数并返回另一个Lambda
    return (base => (x => x + base));
};
