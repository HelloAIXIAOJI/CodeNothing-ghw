using lib <io>;
using ns std;

// 指针算术运算测试

fn main() : int {
    std::println("=== CodeNothing 指针算术测试 ===");
    
    // 测试1：基础指针算术
    testBasicPointerArithmetic();
    
    // 测试2：指针差值计算
    testPointerDifference();
    
    // 测试3：指针数组遍历
    testPointerArrayTraversal();
    
    std::println("");
    std::println("=== 指针算术测试完成 ===");
    return 0;
};

fn testBasicPointerArithmetic() : void {
    std::println("");
    std::println("1. 基础指针算术测试");
    std::println("===================");
    
    // 创建一个整数值
    value : int = 100;
    ptr : *int = &value;
    
    std::println("原始指针: " + ptr);
    std::println("原始值: " + *ptr);
    
    // 指针加法
    ptr_plus_1 : *int = ptr + 1;
    std::println("ptr + 1: " + ptr_plus_1);
    
    ptr_plus_3 : *int = ptr + 3;
    std::println("ptr + 3: " + ptr_plus_3);
    
    // 指针减法
    ptr_minus_1 : *int = ptr_plus_3 - 1;
    std::println("(ptr + 3) - 1: " + ptr_minus_1);
    
    ptr_minus_2 : *int = ptr_plus_3 - 2;
    std::println("(ptr + 3) - 2: " + ptr_minus_2);
};

fn testPointerDifference() : void {
    std::println("");
    std::println("2. 指针差值计算测试");
    std::println("===================");
    
    // 创建两个值
    value1 : int = 10;
    value2 : int = 20;
    
    ptr1 : *int = &value1;
    ptr2 : *int = &value2;
    
    std::println("指针1: " + ptr1 + " -> " + *ptr1);
    std::println("指针2: " + ptr2 + " -> " + *ptr2);
    
    // 计算指针差值
    diff : int = ptr2 - ptr1;
    std::println("ptr2 - ptr1 = " + diff);
    
    // 创建算术指针进行差值测试
    ptr3 : *int = ptr1 + 5;
    diff2 : int = ptr3 - ptr1;
    std::println("(ptr1 + 5) - ptr1 = " + diff2);
};

fn testPointerArrayTraversal() : void {
    std::println("");
    std::println("3. 指针数组遍历测试");
    std::println("===================");
    
    // 模拟数组遍历（使用多个独立变量）
    val0 : int = 10;
    val1 : int = 20;
    val2 : int = 30;
    val3 : int = 40;
    val4 : int = 50;
    
    // 获取第一个元素的指针
    basePtr : *int = &val0;
    std::println("基础指针: " + basePtr + " -> " + *basePtr);
    
    // 模拟数组访问
    std::println("模拟数组遍历:");
    
    // ptr[0] 等价于 *(ptr + 0)
    ptr0 : *int = basePtr + 0;
    std::println("  [0]: " + ptr0 + " -> " + *ptr0);
    
    // ptr[1] 等价于 *(ptr + 1)
    ptr1 : *int = basePtr + 1;
    std::println("  [1]: " + ptr1);
    
    // ptr[2] 等价于 *(ptr + 2)
    ptr2 : *int = basePtr + 2;
    std::println("  [2]: " + ptr2);
    
    // 反向遍历
    std::println("反向遍历:");
    currentPtr : *int = basePtr + 2;
    std::println("  从 [2]: " + currentPtr);
    
    currentPtr = currentPtr - 1;
    std::println("  到 [1]: " + currentPtr);
    
    currentPtr = currentPtr - 1;
    std::println("  到 [0]: " + currentPtr);
};
