using lib <io>;
using ns std;

// 基础指针功能测试

fn main() : int {
    std::println("=== CodeNothing 指针功能测试 ===");
    
    // 测试1：基础指针操作
    testBasicPointers();
    
    // 测试2：指针与变量
    testPointerVariables();
    
    // 测试3：指针与函数
    testPointerFunctions();
    
    std::println("");
    std::println("=== 指针功能测试完成 ===");
    return 0;
};

fn testBasicPointers() : void {
    std::println("");
    std::println("1. 基础指针操作测试");
    std::println("===================");
    
    // 创建一个整数变量
    value : int = 42;
    std::println("原始值: " + value);
    
    // 取地址创建指针
    ptr : *int = &value;
    std::println("指针地址: " + ptr);
    
    // 解引用获取值
    derefValue : int = *ptr;
    std::println("解引用值: " + derefValue);
    
    // 验证值是否相等
    if (value == derefValue) {
        std::println("✓ 指针解引用正确");
    } else {
        std::println("✗ 指针解引用错误");
    };
};

fn testPointerVariables() : void {
    std::println("");
    std::println("2. 指针变量测试");
    std::println("================");
    
    // 测试不同类型的指针
    intVal : int = 100;
    floatVal : float = 3.14;
    stringVal : string = "Hello";
    boolVal : bool = true;
    
    intPtr : *int = &intVal;
    floatPtr : *float = &floatVal;
    stringPtr : *string = &stringVal;
    boolPtr : *bool = &boolVal;
    
    std::println("整数指针: " + intPtr + " -> " + *intPtr);
    std::println("浮点指针: " + floatPtr + " -> " + *floatPtr);
    std::println("字符串指针: " + stringPtr + " -> " + *stringPtr);
    std::println("布尔指针: " + boolPtr + " -> " + *boolPtr);
};

fn testPointerFunctions() : void {
    std::println("");
    std::println("3. 指针与函数测试");
    std::println("==================");
    
    // 测试指针作为函数参数
    value : int = 50;
    ptr : *int = &value;
    
    std::println("调用前值: " + value);
    processPointer(ptr);
    std::println("调用后值: " + *ptr);
    
    // 测试函数返回指针
    newPtr : *int = createPointer(999);
    std::println("新指针值: " + *newPtr);
};

fn processPointer(ptr : *int) : void {
    std::println("函数中接收到指针: " + ptr);
    currentValue : int = *ptr;
    std::println("函数中解引用值: " + currentValue);
};

fn createPointer(value : int) : *int {
    localValue : int = value;
    return &localValue;
};
