using lib <io>;
using ns std;

// 函数指针基础测试

// 定义一些测试函数
fn addNumbers(a : int, b : int) : int {
    return a + b;
};

fn multiplyNumbers(a : int, b : int) : int {
    return a * b;
};

fn subtractNumbers(a : int, b : int) : int {
    return a - b;
};

fn greet(name : string) : string {
    return "Hello, " + name + "!";
};

fn getNumber() : int {
    return 42;
};

fn main() : int {
    std::println("=== CodeNothing 函数指针基础测试 ===");
    
    // 测试1：函数指针类型声明
    testFunctionPointerDeclaration();
    
    // 测试2：函数指针赋值
    testFunctionPointerAssignment();
    
    // 测试3：函数指针方法调用
    testFunctionPointerMethods();
    
    // 测试4：函数指针作为参数
    testFunctionPointerAsParameter();
    
    std::println("");
    std::println("=== 函数指针基础测试完成 ===");
    return 0;
};

fn testFunctionPointerDeclaration() : void {
    std::println("");
    std::println("1. 函数指针类型声明测试");
    std::println("=======================");
    
    // 声明不同类型的函数指针
    mathFunc : *fn(int, int) : int;
    stringFunc : *fn(string) : string;
    simpleFunc : *fn() : int;
    
    std::println("✓ 函数指针类型声明成功");
    std::println("  mathFunc : *fn(int, int) : int");
    std::println("  stringFunc : *fn(string) : string");
    std::println("  simpleFunc : *fn() : int");
};

fn testFunctionPointerAssignment() : void {
    std::println("");
    std::println("2. 函数指针赋值测试");
    std::println("===================");
    
    // 函数指针赋值
    mathFunc : *fn(int, int) : int = addNumbers;
    std::println("mathFunc = addNumbers");
    std::println("函数指针: " + mathFunc.toString());
    std::println("函数名: " + mathFunc.getName());
    
    // 重新赋值
    mathFunc = multiplyNumbers;
    std::println("mathFunc = multiplyNumbers");
    std::println("函数指针: " + mathFunc.toString());
    std::println("函数名: " + mathFunc.getName());
    
    // 字符串函数指针
    stringFunc : *fn(string) : string = greet;
    std::println("stringFunc = greet");
    std::println("函数指针: " + stringFunc.toString());
    
    // 无参数函数指针
    simpleFunc : *fn() : int = getNumber;
    std::println("simpleFunc = getNumber");
    std::println("函数指针: " + simpleFunc.toString());
};

fn testFunctionPointerMethods() : void {
    std::println("");
    std::println("3. 函数指针方法调用测试");
    std::println("=======================");
    
    mathFunc : *fn(int, int) : int = addNumbers;
    
    // 测试函数指针的方法
    std::println("函数指针信息:");
    std::println("  toString(): " + mathFunc.toString());
    std::println("  getName(): " + mathFunc.getName());
    std::println("  getParamCount(): " + mathFunc.getParamCount());
    std::println("  getReturnType(): " + mathFunc.getReturnType());
    std::println("  isNull(): " + mathFunc.isNull());
    std::println("  isLambda(): " + mathFunc.isLambda());
    
    // 测试不同函数的信息
    stringFunc : *fn(string) : string = greet;
    std::println("");
    std::println("字符串函数指针信息:");
    std::println("  参数数量: " + stringFunc.getParamCount());
    std::println("  返回类型: " + stringFunc.getReturnType());
    
    simpleFunc : *fn() : int = getNumber;
    std::println("");
    std::println("简单函数指针信息:");
    std::println("  参数数量: " + simpleFunc.getParamCount());
    std::println("  返回类型: " + simpleFunc.getReturnType());
};

fn testFunctionPointerAsParameter() : void {
    std::println("");
    std::println("4. 函数指针作为参数测试");
    std::println("=======================");
    
    // 测试高阶函数
    result1 : int = calculate(10, 5, addNumbers);
    std::println("calculate(10, 5, addNumbers) = " + result1);
    
    result2 : int = calculate(10, 5, multiplyNumbers);
    std::println("calculate(10, 5, multiplyNumbers) = " + result2);
    
    result3 : int = calculate(10, 5, subtractNumbers);
    std::println("calculate(10, 5, subtractNumbers) = " + result3);
    
    // 测试字符串函数
    greeting : string = processString("World", greet);
    std::println("processString(\"World\", greet) = " + greeting);
};

// 高阶函数：接受函数指针作为参数
fn calculate(a : int, b : int, operation : *fn(int, int) : int) : int {
    std::println("调用函数: " + operation.getName());
    // 暂时返回模拟结果，实际调用需要进一步实现
    if (operation.getName() == "addNumbers") {
        return a + b;
    } else if (operation.getName() == "multiplyNumbers") {
        return a * b;
    } else if (operation.getName() == "subtractNumbers") {
        return a - b;
    } else {
        return 0;
    };
};

fn processString(input : string, processor : *fn(string) : string) : string {
    std::println("处理字符串，使用函数: " + processor.getName());
    // 暂时返回模拟结果
    if (processor.getName() == "greet") {
        return "Hello, " + input + "!";
    } else {
        return input;
    };
};
