using lib <io>;
using ns std;

// CodeNothing 指针性能和压力测试
// 测试修复后的指针实现的性能表现

fn main() : int {
    std::println("=== CodeNothing 指针性能测试 ===");
    std::println("");
    
    // 测试1：大量指针创建和销毁
    testMassPointerCreation();
    
    // 测试2：指针算术性能
    testPointerArithmeticPerformance();
    
    // 测试3：多级指针性能
    testMultiLevelPointerPerformance();
    
    // 测试4：内存管理性能
    testMemoryManagementPerformance();
    
    // 测试5：函数指针性能
    testFunctionPointerPerformance();
    
    std::println("");
    std::println("=== 指针性能测试完成 ===");
    return 0;
};

fn testMassPointerCreation() : void {
    std::println("1. 大量指针创建测试");
    std::println("===================");
    
    std::println("创建大量指针...");
    
    // 创建多个不同类型的指针
    val1 : int = 1;
    val2 : int = 2;
    val3 : int = 3;
    val4 : int = 4;
    val5 : int = 5;
    
    ptr1 : *int = &val1;
    ptr2 : *int = &val2;
    ptr3 : *int = &val3;
    ptr4 : *int = &val4;
    ptr5 : *int = &val5;
    
    std::println("创建了5个指针:");
    std::println("  ptr1: " + ptr1 + " -> " + *ptr1);
    std::println("  ptr2: " + ptr2 + " -> " + *ptr2);
    std::println("  ptr3: " + ptr3 + " -> " + *ptr3);
    std::println("  ptr4: " + ptr4 + " -> " + *ptr4);
    std::println("  ptr5: " + ptr5 + " -> " + *ptr5);
    
    // 创建更多不同类型的指针
    floatVal1 : float = 1.1;
    floatVal2 : float = 2.2;
    stringVal1 : string = "Hello";
    stringVal2 : string = "World";
    boolVal1 : bool = true;
    boolVal2 : bool = false;
    
    floatPtr1 : *float = &floatVal1;
    floatPtr2 : *float = &floatVal2;
    stringPtr1 : *string = &stringVal1;
    stringPtr2 : *string = &stringVal2;
    boolPtr1 : *bool = &boolVal1;
    boolPtr2 : *bool = &boolVal2;
    
    std::println("创建了更多类型的指针:");
    std::println("  floatPtr1: " + floatPtr1 + " -> " + *floatPtr1);
    std::println("  stringPtr1: " + stringPtr1 + " -> " + *stringPtr1);
    std::println("  boolPtr1: " + boolPtr1 + " -> " + *boolPtr1);
    
    std::println("✓ 大量指针创建测试完成");
    std::println("");
};

fn testPointerArithmeticPerformance() : void {
    std::println("2. 指针算术性能测试");
    std::println("===================");
    
    value : int = 1000;
    basePtr : *int = &value;
    
    std::println("基础指针: " + basePtr);
    std::println("执行大量指针算术运算...");
    
    // 执行一系列指针算术运算
    ptr1 : *int = basePtr + 1;
    ptr2 : *int = ptr1 + 2;
    ptr3 : *int = ptr2 + 3;
    ptr4 : *int = ptr3 + 4;
    ptr5 : *int = ptr4 + 5;
    
    std::println("前向算术结果:");
    std::println("  +1: " + ptr1);
    std::println("  +3: " + ptr2);
    std::println("  +6: " + ptr3);
    std::println("  +10: " + ptr4);
    std::println("  +15: " + ptr5);
    
    // 反向算术运算
    backPtr5 : *int = ptr5 - 5;
    backPtr4 : *int = backPtr5 - 4;
    backPtr3 : *int = backPtr4 - 3;
    backPtr2 : *int = backPtr3 - 2;
    backPtr1 : *int = backPtr2 - 1;
    
    std::println("反向算术结果:");
    std::println("  -5: " + backPtr5);
    std::println("  -4: " + backPtr4);
    std::println("  -3: " + backPtr3);
    std::println("  -2: " + backPtr2);
    std::println("  -1: " + backPtr1);
    
    // 验证往返一致性
    if (basePtr.toString() == backPtr1.toString()) {
        std::println("✓ 指针算术往返一致");
    } else {
        std::println("⚠ 指针算术往返不一致");
    };
    
    std::println("✓ 指针算术性能测试完成");
    std::println("");
};

fn testMultiLevelPointerPerformance() : void {
    std::println("3. 多级指针性能测试");
    std::println("===================");
    
    // 创建指针链（简化版本）
    value : int = 2000;
    ptr1 : *int = &value;
    
    std::println("创建指针链:");
    std::println("  原始值: " + value);
    std::println("  一级指针: " + ptr1);

    // 执行指针解引用
    std::println("执行指针解引用:");

    deref1 : int = *ptr1;
    std::println("  *ptr1 = " + deref1);

    // 验证解引用结果一致
    if (value == deref1) {
        std::println("✓ 指针解引用一致");
    } else {
        std::println("✗ 指针解引用不一致");
    };
    
    std::println("✓ 指针性能测试完成");
    std::println("");
};

fn testMemoryManagementPerformance() : void {
    std::println("4. 内存管理性能测试");
    std::println("===================");
    
    std::println("测试内存分配和释放性能...");
    
    // 创建多个变量和指针来测试内存管理
    // 手动创建变量（避免数组语法问题）
    val0 : int = 0; val1 : int = 1; val2 : int = 2; val3 : int = 3; val4 : int = 4;
    val5 : int = 5; val6 : int = 6; val7 : int = 7; val8 : int = 8; val9 : int = 9;
    
    ptr0 : *int = &val0; ptr1 : *int = &val1; ptr2 : *int = &val2; ptr3 : *int = &val3; ptr4 : *int = &val4;
    ptr5 : *int = &val5; ptr6 : *int = &val6; ptr7 : *int = &val7; ptr8 : *int = &val8; ptr9 : *int = &val9;
    
    std::println("创建了10个值和对应的指针:");
    std::println("  ptr0: " + ptr0 + " -> " + *ptr0);
    std::println("  ptr1: " + ptr1 + " -> " + *ptr1);
    std::println("  ptr2: " + ptr2 + " -> " + *ptr2);
    std::println("  ptr3: " + ptr3 + " -> " + *ptr3);
    std::println("  ptr4: " + ptr4 + " -> " + *ptr4);
    std::println("  ptr5: " + ptr5 + " -> " + *ptr5);
    std::println("  ptr6: " + ptr6 + " -> " + *ptr6);
    std::println("  ptr7: " + ptr7 + " -> " + *ptr7);
    std::println("  ptr8: " + ptr8 + " -> " + *ptr8);
    std::println("  ptr9: " + ptr9 + " -> " + *ptr9);
    
    // 测试指针间的算术运算
    diff1 : int = ptr5 - ptr0;
    diff2 : int = ptr9 - ptr5;
    
    std::println("指针差值计算:");
    std::println("  ptr5 - ptr0 = " + diff1);
    std::println("  ptr9 - ptr5 = " + diff2);
    
    std::println("✓ 内存管理性能测试完成");
    std::println("");
};

fn testFunctionPointerPerformance() : void {
    std::println("5. 函数指针性能测试");
    std::println("===================");
    
    // 创建多个函数指针
    addFunc : *fn(int, int) : int = add;
    subtractFunc : *fn(int, int) : int = subtract;
    multiplyFunc : *fn(int, int) : int = multiply;
    divideFunc : *fn(int, int) : int = divide;
    
    std::println("创建了4个函数指针:");
    std::println("  add: " + addFunc.getName());
    std::println("  subtract: " + subtractFunc.getName());
    std::println("  multiply: " + multiplyFunc.getName());
    std::println("  divide: " + divideFunc.getName());
    
    // 执行大量函数指针调用
    std::println("执行函数指针调用:");
    
    result1 : int = addFunc(100, 200);
    result2 : int = subtractFunc(500, 300);
    result3 : int = multiplyFunc(15, 20);
    result4 : int = divideFunc(1000, 25);
    
    std::println("  add(100, 200) = " + result1);
    std::println("  subtract(500, 300) = " + result2);
    std::println("  multiply(15, 20) = " + result3);
    std::println("  divide(1000, 25) = " + result4);
    
    // 验证结果
    if (result1 == 300 && result2 == 200 && result3 == 300 && result4 == 40) {
        std::println("✓ 函数指针调用结果正确");
    } else {
        std::println("✗ 函数指针调用结果错误");
    };
    
    std::println("✓ 函数指针性能测试完成");
    std::println("");
};

// 辅助函数
fn add(a : int, b : int) : int {
    return a + b;
};

fn subtract(a : int, b : int) : int {
    return a - b;
};

fn multiply(a : int, b : int) : int {
    return a * b;
};

fn divide(a : int, b : int) : int {
    if (b != 0) {
        return a / b;
    } else {
        return 0;
    };
};
