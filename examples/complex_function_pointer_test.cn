using lib <io>;
using ns std;

// 复杂函数指针调用测试

// 复杂的函数，包含多种语句类型
fn complexCalculation(a : int, b : int) : int {
    temp : int = a * 2;
    if (temp > b) {
        result : int = temp + b;
        return result;
    } else {
        return a + b;
    };
};

// 递归函数
fn factorial(n : int) : int {
    if (n <= 1) {
        return 1;
    } else {
        return n * factorial(n - 1);
    };
};

// 带局部变量的函数
fn processNumbers(x : int, y : int) : int {
    sum : int = x + y;
    product : int = x * y;
    
    if (sum > product) {
        return sum;
    } else {
        return product;
    };
};

fn main() : int {
    std::println("=== 复杂函数指针调用测试 ===");
    std::println("");
    
    // 测试1：复杂函数的函数指针调用
    testComplexFunctionPointer();
    
    // 测试2：递归函数指针调用
    testRecursiveFunctionPointer();
    
    // 测试3：带局部变量的函数指针调用
    testLocalVariableFunctionPointer();
    
    // 测试4：复杂Lambda函数
    testComplexLambda();
    
    std::println("");
    std::println("=== 复杂函数指针调用测试完成 ===");
    return 0;
};

fn testComplexFunctionPointer() : void {
    std::println("1. 复杂函数指针调用测试");
    std::println("=======================");
    
    // 将复杂函数赋值给函数指针
    complexFunc : *fn(int, int) : int = complexCalculation;
    
    result1 : int = complexFunc(5, 3);
    std::println("complexFunc(5, 3) = " + result1);
    
    result2 : int = complexFunc(2, 10);
    std::println("complexFunc(2, 10) = " + result2);
    
    std::println("");
};

fn testRecursiveFunctionPointer() : void {
    std::println("2. 递归函数指针调用测试");
    std::println("=======================");
    
    // 递归函数的函数指针
    factFunc : *fn(int) : int = factorial;
    
    result1 : int = factFunc(5);
    std::println("factFunc(5) = " + result1);
    
    result2 : int = factFunc(6);
    std::println("factFunc(6) = " + result2);
    
    std::println("");
};

fn testLocalVariableFunctionPointer() : void {
    std::println("3. 带局部变量的函数指针调用测试");
    std::println("===============================");
    
    // 带局部变量的函数指针
    processFunc : *fn(int, int) : int = processNumbers;
    
    result1 : int = processFunc(4, 6);
    std::println("processFunc(4, 6) = " + result1);
    
    result2 : int = processFunc(8, 3);
    std::println("processFunc(8, 3) = " + result2);
    
    std::println("");
};

fn testComplexLambda() : void {
    std::println("4. 复杂Lambda函数测试");
    std::println("=====================");
    
    // 复杂的Lambda表达式
    complexLambda : *fn(int, int) : int = ((a, b) => a * a + b * b);
    
    result1 : int = complexLambda(3, 4);
    std::println("complexLambda(3, 4) = " + result1);
    
    result2 : int = complexLambda(5, 12);
    std::println("complexLambda(5, 12) = " + result2);
    
    std::println("");
};
