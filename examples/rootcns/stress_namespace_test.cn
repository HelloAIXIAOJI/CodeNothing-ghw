// 🚀 压力测试 - 测试命名空间系统的极限
using lib <io>;
using ns std;
using ns a;
using ns b;
using ns c;
using ns d;
using ns e;

fn main() : int {
    std::println("🚀 开始命名空间压力测试 🚀");
    
    // ========== 测试1: 大量命名空间同时使用 ==========
    std::println("=== 测试1: 大量命名空间同时使用 ===");
    a::func();
    b::func();
    c::func();
    d::func();
    e::func();
    std::println("✅ 大量命名空间测试通过");
    
    // ========== 测试2: 相同函数名不同命名空间 ==========
    std::println("=== 测试2: 相同函数名不同命名空间 ===");
    a::test();
    b::test();
    c::test();
    d::test();
    e::test();
    std::println("✅ 相同函数名测试通过");
    
    // ========== 测试3: 深度调用链 ==========
    std::println("=== 测试3: 深度调用链 ===");
    a::call_b();
    std::println("✅ 深度调用链测试通过");
    
    // ========== 测试4: 循环调用检测 ==========
    std::println("=== 测试4: 循环调用检测 ===");
    a::safe_call();
    std::println("✅ 循环调用检测测试通过");
    
    // ========== 测试5: 错误处理 ==========
    std::println("=== 测试5: 错误处理 ===");
    a::error_test();
    std::println("✅ 错误处理测试通过");
    
    std::println("🎉 所有压力测试通过！系统稳定！ 🎉");
    return 0;
};

// ========== 命名空间A ==========
ns a {
    fn func() : void {
        std::println("  ✓ 命名空间A函数调用");
    };
    
    fn test() : void {
        std::println("  ✓ A::test");
    };
    
    fn call_b() : void {
        std::println("  A调用B");
        b::call_c();
    };
    
    fn safe_call() : void {
        std::println("  A安全调用");
        b::safe_response();
    };
    
    fn error_test() : void {
        std::println("  A错误测试");
        b::handle_error();
    };
};

// ========== 命名空间B ==========
ns b {
    fn func() : void {
        std::println("  ✓ 命名空间B函数调用");
    };
    
    fn test() : void {
        std::println("  ✓ B::test");
    };
    
    fn call_c() : void {
        std::println("  B调用C");
        c::call_d();
    };
    
    fn safe_response() : void {
        std::println("  B安全响应");
    };
    
    fn handle_error() : void {
        std::println("  B处理错误");
        c::error_recovery();
    };
};

// ========== 命名空间C ==========
ns c {
    fn func() : void {
        std::println("  ✓ 命名空间C函数调用");
    };
    
    fn test() : void {
        std::println("  ✓ C::test");
    };
    
    fn call_d() : void {
        std::println("  C调用D");
        d::call_e();
    };
    
    fn error_recovery() : void {
        std::println("  C错误恢复");
        d::final_cleanup();
    };
};

// ========== 命名空间D ==========
ns d {
    fn func() : void {
        std::println("  ✓ 命名空间D函数调用");
    };
    
    fn test() : void {
        std::println("  ✓ D::test");
    };
    
    fn call_e() : void {
        std::println("  D调用E");
        e::final_call();
    };
    
    fn final_cleanup() : void {
        std::println("  D最终清理");
        e::cleanup_complete();
    };
};

// ========== 命名空间E ==========
ns e {
    fn func() : void {
        std::println("  ✓ 命名空间E函数调用");
    };
    
    fn test() : void {
        std::println("  ✓ E::test");
    };
    
    fn final_call() : void {
        std::println("  E最终调用完成");
    };
    
    fn cleanup_complete() : void {
        std::println("  E清理完成");
    };
};
