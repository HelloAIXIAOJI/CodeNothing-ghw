// 导入文件系统库和标准IO库
using lib <fs>;
using lib <io>;
using ns std;

fn main() : int {
    // 获取当前工作目录
    println("当前工作目录: " + dir::current());
    
    // 创建一个测试目录
    test_dir : string = "fs_test_dir";
    if (exists(test_dir)) {
        println("测试目录已存在，尝试清理...");
        dir::delete_all(test_dir);
    };
    
    println("创建测试目录: " + test_dir);
    dir_result : string = dir::create(test_dir);
    println("创建目录结果: " + dir_result);
    
    // 创建一个测试文件
    test_file : string = path::join(test_dir, "test_data.txt");
    content : string = "这是测试数据\n第二行\n第三行\n";
    write_result : string = file::write(test_file, content);
    println("写入测试文件结果: " + write_result);
    
    // 读取文件内容
    read_content : string = file::read(test_file);
    println("读取文件内容:");
    println(read_content);
    
    // 获取文件信息
    println("文件大小: " + file::size(test_file) + " 字节");
    println("文件名: " + path::filename(test_file));
    println("文件扩展名: " + path::extension(test_file));
    println("文件主名: " + path::stem(test_file));
    println("父目录: " + path::parent(test_file));
    println("是否为绝对路径: " + path::is_absolute(test_file));
    
    // 添加内容到文件
    append_result : string = file::append(test_file, "这是追加的内容\n");
    println("追加内容结果: " + append_result);
    
    // 再次读取内容
    updated_content : string = file::read(test_file);
    println("追加后的内容:");
    println(updated_content);
    
    // 创建子目录
    sub_dir : string = path::join(test_dir, "subdir");
    dir::create(sub_dir);
    
    // 复制文件
    copy_file : string = path::join(sub_dir, "copy.txt");
    copy_result : string = file::copy(test_file, copy_file);
    println("复制文件结果: " + copy_result);
    
    // 重命名文件
    rename_file : string = path::join(sub_dir, "renamed.txt");
    rename_result : string = file::rename(copy_file, rename_file);
    println("重命名文件结果: " + rename_result);
    
    // 列出目录内容
    println("目录内容:");
    println(dir::list(test_dir));
    println("子目录内容:");
    println(dir::list(sub_dir));
    
    // 测试二进制读取
    bin_content : string = file::read_bytes(test_file);
    println("文件二进制内容 (十六进制): " + bin_content);
    
    // 清理：删除测试文件和目录
    println("\n清理测试环境...");
    file::delete(test_file);
    file::delete(rename_file);
    dir::delete(sub_dir);
    dir::delete(test_dir);
    
    // 验证清理结果
    if (exists(test_dir)) {
        println("警告：目录 " + test_dir + " 仍然存在");
    } else {
        println("成功清理测试环境");
    };
    
    return 0;
}; 