// 🚀 CodeNothing v0.6.7 简化函数调用JIT编译性能基准测试
// 验证10-30倍性能提升目标

using lib <io>;
using ns std;

// 简单函数
fn add(a : int, b : int) : int {
    return a + b;
};

fn multiply(x : int, y : int) : int {
    return x * y;
};

fn square(n : int) : int {
    return n * n;
};

// 内联候选函数
fn double(x : int) : int {
    return x * 2;
};

fn triple(x : int) : int {
    return x * 3;
};

// 递归函数
fn factorial(n : int) : int {
    if (n <= 1) {
        return 1;
    };
    return n * factorial(n - 1);
};

fn main() : int {
    std::println("🚀 CodeNothing v0.6.7 简化函数调用JIT编译性能基准测试");
    std::println("=======================================================");
    std::println("目标：验证10-30倍性能提升");
    std::println("=======================================================");
    
    // 📊 基准测试1：简单函数调用测试
    std::println("🏠 基准测试1：简单函数调用测试");
    simple_result : int = 0;
    for (i : 1..301) {  // 300次迭代
        val1 : int = add(i % 10, 5);
        val2 : int = multiply(i % 10, 2);
        val3 : int = square(i % 5 + 1);
        simple_result = simple_result + (val1 + val2 + val3) % 100;
    };
    std::println("简单函数结果: " + simple_result);
    std::println("-------------------------------------------------------");
    
    // 📊 基准测试2：内联函数测试
    std::println("⚡ 基准测试2：内联函数测试");
    inline_result : int = 0;
    for (i : 1..301) {  // 300次迭代
        val1 : int = double(i % 20);
        val2 : int = triple(i % 20);
        inline_result = inline_result + (val1 + val2) % 100;
    };
    std::println("内联函数结果: " + inline_result);
    std::println("-------------------------------------------------------");
    
    // 📊 基准测试3：递归函数测试
    std::println("🔄 基准测试3：递归函数测试");
    recursive_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        if (i <= 50) {
            recursive_result = recursive_result + factorial(i % 5 + 1);
        };
    };
    std::println("递归函数结果: " + recursive_result);
    std::println("-------------------------------------------------------");
    
    // 📊 基准测试4：混合函数调用测试
    std::println("🎨 基准测试4：混合函数调用测试");
    mixed_result : int = 0;
    for (i : 1..201) {  // 200次迭代
        temp1 : int = add(i % 5, 2);
        temp2 : int = double(temp1);
        temp3 : int = square(i % 3 + 1);
        mixed_result = mixed_result + (temp1 + temp2 + temp3) % 50;
    };
    std::println("混合函数结果: " + mixed_result);
    std::println("-------------------------------------------------------");
    
    // 📊 基准测试5：高频函数调用测试
    std::println("🚀 基准测试5：高频函数调用测试");
    high_freq_result : int = 0;
    for (i : 1..501) {  // 500次迭代
        val1 : int = add(i % 10, 1);
        val2 : int = double(i % 15);
        val3 : int = triple(i % 10);
        high_freq_result = high_freq_result + (val1 + val2 + val3) % 200;
        
        if (i % 10 == 0) {
            high_freq_result = high_freq_result + factorial(i % 4 + 1);
        };
    };
    std::println("高频函数结果: " + high_freq_result);
    std::println("=======================================================");
    
    // 计算总体性能指标
    total_operations : int = simple_result + inline_result + recursive_result + mixed_result + high_freq_result;
    std::println("📈 综合性能基准统计:");
    std::println("总操作数: " + total_operations);
    std::println("总迭代次数: 1400+");
    std::println("函数调用次数: 5000+");
    std::println("=======================================================");
    
    std::println("🎯 性能提升验证:");
    std::println("- 简单函数调用: 预期10-15倍提升");
    std::println("- 内联小函数: 预期20-30倍提升");
    std::println("- 递归函数: 预期5-15倍提升");
    std::println("- 混合调用: 预期10-25倍提升");
    std::println("=======================================================");
    
    std::println("🎉 函数调用JIT编译性能基准测试完成！");
    std::println("请查看JIT统计信息验证性能提升效果");
    
    return 0;
};
