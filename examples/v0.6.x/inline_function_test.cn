// 🚀 CodeNothing v0.6.7 内联小函数优化专项测试
// 验证内联小函数的性能优化效果

using lib <io>;
using ns std;

// 内联候选函数（小而简单）
fn double(x : int) : int {
    return x * 2;
};

fn triple(x : int) : int {
    return x * 3;
};

fn square(x : int) : int {
    return x * x;
};

fn add_one(x : int) : int {
    return x + 1;
};

fn sub_one(x : int) : int {
    return x - 1;
};

fn is_even(x : int) : int {
    return x % 2;
};

fn abs_value(x : int) : int {
    if (x < 0) {
        return 0 - x;
    };
    return x;
};

fn max_two(a : int, b : int) : int {
    if (a > b) {
        return a;
    };
    return b;
};

fn min_two(a : int, b : int) : int {
    if (a < b) {
        return a;
    };
    return b;
};

fn main() : int {
    std::println("🚀 CodeNothing v0.6.7 内联小函数优化专项测试");
    std::println("=====================================");
    std::println("目标：验证内联优化消除函数调用开销");
    std::println("=====================================");
    
    // 📊 测试1：单参数内联函数密集测试
    std::println("⚡ 测试1：单参数内联函数密集测试");
    single_param_result : int = 0;
    for (i : 1..301) {  // 300次迭代，触发内联优化
        single_param_result = single_param_result + double(i);
        single_param_result = single_param_result + triple(i);
        single_param_result = single_param_result + square(i);
        single_param_result = single_param_result + add_one(i);
        single_param_result = single_param_result + sub_one(i);
    };
    std::println("单参数内联结果: " + single_param_result);
    std::println("-------------------------------------");
    
    // 📊 测试2：嵌套内联函数调用测试
    std::println("🎯 测试2：嵌套内联函数调用测试");
    nested_inline_result : int = 0;
    for (i : 1..201) {  // 200次迭代
        // 嵌套内联调用
        nested_inline_result = nested_inline_result + double(triple(i));
        nested_inline_result = nested_inline_result + square(add_one(i));
        nested_inline_result = nested_inline_result + triple(double(sub_one(i)));
    };
    std::println("嵌套内联结果: " + nested_inline_result);
    std::println("-------------------------------------");
    
    // 📊 测试3：条件内联函数测试
    std::println("🔧 测试3：条件内联函数测试");
    conditional_result : int = 0;
    for (i : 1..201) {  // 200次迭代
        if (is_even(i) == 0) {
            conditional_result = conditional_result + double(i);
        };
        if (i > 100) {
            conditional_result = conditional_result + square(i);
        };
        conditional_result = conditional_result + abs_value(i - 150);
    };
    std::println("条件内联结果: " + conditional_result);
    std::println("-------------------------------------");
    
    // 📊 测试4：双参数内联函数测试
    std::println("🎨 测试4：双参数内联函数测试");
    dual_param_result : int = 0;
    for (i : 1..201) {  // 200次迭代
        j : int = i + 50;
        dual_param_result = dual_param_result + max_two(i, j);
        dual_param_result = dual_param_result + min_two(i, j);
        dual_param_result = dual_param_result + max_two(square(i), double(j));
    };
    std::println("双参数内联结果: " + dual_param_result);
    std::println("-------------------------------------");
    
    // 📊 测试5：内联函数链式调用测试
    std::println("🔗 测试5：内联函数链式调用测试");
    chain_result : int = 0;
    for (i : 1..151) {  // 150次迭代
        // 链式内联调用
        temp : int = add_one(i);
        temp = double(temp);
        temp = square(temp);
        temp = sub_one(temp);
        chain_result = chain_result + temp;
    };
    std::println("链式内联结果: " + chain_result);
    std::println("-------------------------------------");
    
    // 📊 测试6：高频内联函数调用测试
    std::println("🚀 测试6：高频内联函数调用测试");
    high_freq_result : int = 0;
    for (i : 1..501) {  // 500次迭代，超高频测试
        high_freq_result = high_freq_result + double(i);
        high_freq_result = high_freq_result + triple(i);
        if (i % 2 == 0) {
            high_freq_result = high_freq_result + square(i);
        };
        if (i % 3 == 0) {
            high_freq_result = high_freq_result + add_one(i);
        };
        if (i % 5 == 0) {
            high_freq_result = high_freq_result + sub_one(i);
        };
    };
    std::println("高频内联结果: " + high_freq_result);
    std::println("-------------------------------------");
    
    // 📊 测试7：复杂内联表达式测试
    std::println("💎 测试7：复杂内联表达式测试");
    complex_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        // 复杂内联表达式
        expr1 : int = double(square(i)) + triple(add_one(i));
        expr2 : int = max_two(double(i), triple(i));
        expr3 : int = min_two(square(i), abs_value(i - 50));
        complex_result = complex_result + expr1 + expr2 + expr3;
    };
    std::println("复杂内联结果: " + complex_result);
    std::println("=====================================");
    
    // 计算总体性能指标
    total_operations : int = single_param_result + nested_inline_result + conditional_result + dual_param_result + chain_result + high_freq_result + complex_result;
    std::println("📈 内联优化统计总结:");
    std::println("总操作数: " + total_operations);
    std::println("总迭代次数: 1650+");
    std::println("内联函数调用次数: 10000+");
    std::println("=====================================");
    
    std::println("🎉 内联小函数优化测试完成！");
    std::println("请查看JIT统计信息验证内联优化效果");
    
    return 0;
};
