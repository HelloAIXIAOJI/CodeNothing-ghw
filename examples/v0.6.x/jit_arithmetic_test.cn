// 🚀 JIT算术表达式测试程序
using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 JIT算术表达式测试开始");
    
    // 测试1: 简单的二元运算
    std::println("\n=== 测试1: 简单二元运算 ===");
    a : int = 10;
    b : int = 20;
    
    result1 : int = a + b;
    std::println("a + b = " + result1);
    
    result2 : int = a - b;
    std::println("a - b = " + result2);
    
    result3 : int = a * b;
    std::println("a * b = " + result3);
    
    result4 : int = b / a;
    std::println("b / a = " + result4);
    
    result5 : int = b % a;
    std::println("b % a = " + result5);
    
    // 测试2: 复杂表达式
    std::println("\n=== 测试2: 复杂表达式 ===");
    x : int = 5;
    y : int = 3;
    z : int = 2;
    
    complex1 : int = x + y * z;
    std::println("x + y * z = " + complex1);
    
    complex2 : int = (x + y) * z;
    std::println("(x + y) * z = " + complex2);
    
    complex3 : int = x * y + z * x;
    std::println("x * y + z * x = " + complex3);
    
    // 测试3: 热点检测 - 重复计算相同表达式
    std::println("\n=== 测试3: 热点检测 (重复计算) ===");
    i : int = 0;
    sum : int = 0;
    
    while (i < 150) {  // 超过JIT阈值(100)
        temp : int = i * 2 + 1;  // 这个表达式应该被JIT编译
        sum = sum + temp;
        
        if (i % 30 == 0) {
            std::println("i = " + i + ", temp = " + temp + ", sum = " + sum);
        };
        
        i = i + 1;
    };
    
    std::println("最终sum = " + sum);
    
    // 测试4: 不同变量的相同模式
    std::println("\n=== 测试4: 不同变量相同模式 ===");
    p : int = 7;
    q : int = 11;
    r : int = 13;
    
    j : int = 0;
    while (j < 120) {  // 再次超过JIT阈值
        pattern1 : int = p * q + r;  // 相同的运算模式
        pattern2 : int = q * r + p;
        pattern3 : int = r * p + q;
        
        if (j % 40 == 0) {
            std::println("j = " + j + ", pattern1 = " + pattern1 + 
                        ", pattern2 = " + pattern2 + ", pattern3 = " + pattern3);
        };
        
        j = j + 1;
    };
    
    // 测试5: 长整数运算
    std::println("\n=== 测试5: 长整数运算 ===");
    big1 : long = 1000000;
    big2 : long = 2000000;
    
    big_result1 : long = big1 + big2;
    std::println("big1 + big2 = " + big_result1);
    
    big_result2 : long = big1 * big2;
    std::println("big1 * big2 = " + big_result2);
    
    // 测试6: 混合运算
    std::println("\n=== 测试6: 混合运算 ===");
    m : int = 15;
    n : int = 4;
    
    k : int = 0;
    while (k < 110) {  // 再次触发JIT
        mixed1 : int = m + n - k;
        mixed2 : int = m * n / (k + 1);
        mixed3 : int = (m - n) * (k + 2);
        
        if (k % 25 == 0) {
            std::println("k = " + k + ", mixed1 = " + mixed1 + 
                        ", mixed2 = " + mixed2 + ", mixed3 = " + mixed3);
        };
        
        k = k + 1;
    };
    
    std::println("\n🎉 JIT算术表达式测试完成！");
    std::println("注意观察JIT编译器的输出信息");
    
    return 0;
};
