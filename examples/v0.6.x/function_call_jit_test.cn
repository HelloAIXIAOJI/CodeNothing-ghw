// 🚀 CodeNothing v0.6.7 函数调用JIT编译测试
// 验证简单函数调用、内联小函数和递归函数优化的JIT编译功能

using lib <io>;
using ns std;

// 简单数学函数
fn add(a : int, b : int) : int {
    return a + b;
};

fn multiply(x : int, y : int) : int {
    return x * y;
};

fn square(n : int) : int {
    return n * n;
};

// 小函数（适合内联）
fn double(x : int) : int {
    return x * 2;
};

fn triple(x : int) : int {
    return x * 3;
};

// 递归函数
fn factorial(n : int) : int {
    if (n <= 1) {
        return 1;
    };
    return n * factorial(n - 1);
};

fn fibonacci(n : int) : int {
    if (n <= 1) {
        return n;
    };
    return fibonacci(n - 1) + fibonacci(n - 2);
};

fn main() : int {
    std::println("🚀 CodeNothing v0.6.7 函数调用JIT编译测试");
    std::println("=====================================");
    std::println("目标：验证10-30倍性能提升");
    std::println("=====================================");
    
    // 📊 测试1：简单函数调用热点检测
    std::println("🏠 测试1：简单函数调用热点检测");
    simple_result : int = 0;
    for (i : 1..101) {  // 100次迭代，触发函数调用热点检测
        simple_result = simple_result + add(i, 10);
        simple_result = simple_result + multiply(i, 2);
        simple_result = simple_result + square(i);
    };
    std::println("简单函数调用结果: " + simple_result);
    std::println("-------------------------------------");
    
    // 📊 测试2：内联小函数优化测试
    std::println("⚡ 测试2：内联小函数优化测试");
    inline_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        inline_result = inline_result + double(i);
        inline_result = inline_result + triple(i);
        inline_result = inline_result + double(triple(i));
    };
    std::println("内联函数调用结果: " + inline_result);
    std::println("-------------------------------------");
    
    // 📊 测试3：函数调用密集测试
    std::println("🔥 测试3：函数调用密集测试");
    intensive_result : int = 0;
    for (i : 1..201) {  // 200次迭代，高强度测试
        a : int = add(i, 5);
        b : int = multiply(a, 3);
        c : int = square(b);
        d : int = double(c);
        intensive_result = intensive_result + d;
    };
    std::println("密集函数调用结果: " + intensive_result);
    std::println("-------------------------------------");
    
    // 📊 测试4：嵌套函数调用测试
    std::println("🎯 测试4：嵌套函数调用测试");
    nested_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        nested_result = nested_result + add(multiply(i, 2), square(i));
        nested_result = nested_result + multiply(add(i, 3), double(i));
    };
    std::println("嵌套函数调用结果: " + nested_result);
    std::println("-------------------------------------");
    
    // 📊 测试5：递归函数优化测试（小规模）
    std::println("🔄 测试5：递归函数优化测试");
    recursive_result : int = 0;
    for (i : 1..11) {  // 10次迭代，避免递归过深
        if (i <= 5) {
            recursive_result = recursive_result + factorial(i);
        };
        if (i <= 8) {
            recursive_result = recursive_result + fibonacci(i);
        };
    };
    std::println("递归函数调用结果: " + recursive_result);
    std::println("-------------------------------------");
    
    // 📊 测试6：混合函数调用模式测试
    std::println("🎨 测试6：混合函数调用模式测试");
    mixed_result : int = 0;
    for (i : 1..151) {  // 150次迭代
        // 简单函数调用
        temp1 : int = add(i, 10);
        // 内联函数调用
        temp2 : int = double(temp1);
        // 嵌套函数调用
        temp3 : int = multiply(square(i), triple(2));
        // 组合结果
        mixed_result = mixed_result + temp1 + temp2 + temp3;
    };
    std::println("混合函数调用结果: " + mixed_result);
    std::println("-------------------------------------");
    
    // 📊 测试7：高频小函数调用测试
    std::println("⚡ 测试7：高频小函数调用测试");
    high_freq_result : int = 0;
    for (i : 1..301) {  // 300次迭代，超高频测试
        high_freq_result = high_freq_result + double(i);
        high_freq_result = high_freq_result + triple(i);
        if (i % 2 == 0) {
            high_freq_result = high_freq_result + square(i);
        };
        if (i % 3 == 0) {
            high_freq_result = high_freq_result + add(i, 1);
        };
    };
    std::println("高频函数调用结果: " + high_freq_result);
    std::println("=====================================");
    
    // 计算总体性能指标
    total_operations : int = simple_result + inline_result + intensive_result + nested_result + recursive_result + mixed_result + high_freq_result;
    std::println("📈 性能统计总结:");
    std::println("总操作数: " + total_operations);
    std::println("总迭代次数: 1200+");
    std::println("=====================================");
    
    std::println("🎉 函数调用JIT编译测试完成！");
    std::println("请查看JIT统计信息验证10-30倍性能提升");
    
    return 0;
};
