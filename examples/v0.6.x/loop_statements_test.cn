// 完整的For循环JIT编译测试程序
using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 完整的For循环JIT编译测试开始");
    
    // 测试1: 基本For循环JIT编译
    std::println("\n=== 测试1: 基本For循环JIT编译 ===");
    sum : int = 0;
    for (i : 1..111) {  // 110次迭代，超过JIT阈值
        sum = sum + i;
    };
    std::println("✅ 基本For循环测试完成，sum = " + sum);
    
    // 测试2: For循环内变量声明和赋值
    std::println("\n=== 测试2: For循环内变量声明和赋值 ===");
    total : int = 0;
    for (j : 1..106) {  // 105次迭代
        temp : int = j * 2;
        total = total + temp;
    };
    std::println("✅ 变量声明和赋值测试完成，total = " + total);
    
    // 测试3: For循环内复合运算
    std::println("\n=== 测试3: For循环内复合运算 ===");
    product : int = 1;
    accumulator : int = 0;
    for (k : 1..101) {  // 100次迭代
        product = product * 2;
        product = product % 1000000;  // 防止溢出
        accumulator = accumulator + k;
    };
    std::println("✅ 复合运算测试完成，product = " + product + ", accumulator = " + accumulator);
    
    // 测试4: For循环内复杂表达式
    std::println("\n=== 测试4: For循环内复杂表达式 ===");
    result : int = 0;
    for (m : 1..121) {  // 120次迭代
        temp_calc : int = m * m + m - 1;
        result = result + temp_calc / 2;
    };
    std::println("✅ 复杂表达式测试完成，result = " + result);
    
    // 测试5: 嵌套For循环JIT编译
    std::println("\n=== 测试5: 嵌套For循环JIT编译 ===");
    nested_result : int = 0;
    for (x : 1..16) {  // 外层15次
        for (y : 1..11) {  // 内层10次，总共150次
            local_sum : int = x + y;
            nested_result = nested_result + local_sum;
        };
    };
    std::println("✅ 嵌套循环测试完成，nested_result = " + nested_result);
    
    // 测试6: For循环内多种语句类型
    std::println("\n=== 测试6: For循环内多种语句类型 ===");
    mixed_result : int = 10;
    bonus : int = 0;
    for (n : 1..109) {  // 108次迭代
        // 变量声明
        factor : int = n % 5 + 1;
        // 复合赋值
        mixed_result = mixed_result * factor;
        mixed_result = mixed_result % 100000;
        // 简单计算
        bonus = bonus + n;
    };
    std::println("✅ 多种语句类型测试完成，mixed_result = " + mixed_result + ", bonus = " + bonus);

    // 测试7: For循环范围表达式编译
    std::println("\n=== 测试7: For循环范围表达式编译 ===");
    range_result : int = 0;
    start_val : int = 5;
    end_val : int = 105;
    for (r : start_val..end_val) {  // 100次迭代，使用变量作为范围
        range_result = range_result + r;
    };
    std::println("✅ 范围表达式测试完成，range_result = " + range_result);

    // 测试8: For循环变量生命周期管理
    std::println("\n=== 测试8: For循环变量生命周期管理 ===");
    lifecycle_result : int = 0;
    for (lc : 1..111) {  // 110次迭代
        local_var : int = lc * 3;
        another_var : int = local_var + 1;
        lifecycle_result = lifecycle_result + another_var;
    };
    std::println("✅ 变量生命周期测试完成，lifecycle_result = " + lifecycle_result);
    
    std::println("\n🎉 所有For循环JIT编译测试完成！");
    std::println("请查看JIT性能统计报告中的循环编译信息");
    
    return 0;
};
