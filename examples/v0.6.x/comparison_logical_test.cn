// 🚀 CodeNothing v0.6.6 比较和逻辑运算JIT编译测试
// 验证比较运算符、逻辑运算符和条件表达式的JIT编译功能

using lib <io>;
using ns std;

fn main() : int {
    std::println("🚀 CodeNothing v0.6.6 比较和逻辑运算JIT编译测试");
    std::println("=====================================");
    
    // 📊 测试1：比较运算符测试
    std::println("🔍 测试1：比较运算符JIT编译");
    a : int = 10;
    b : int = 20;
    c : int = 10;
    
    // 等于比较
    equal_result : int = 0;
    for (i : 1..101) {  // 100次迭代，触发JIT编译
        if (a == c) {
            equal_result = equal_result + 1;
        };
    };
    std::println("等于比较结果: " + equal_result);
    
    // 不等于比较
    not_equal_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        if (a != b) {
            not_equal_result = not_equal_result + 1;
        };
    };
    std::println("不等于比较结果: " + not_equal_result);
    
    // 小于比较
    less_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        if (a < b) {
            less_result = less_result + 1;
        };
    };
    std::println("小于比较结果: " + less_result);
    std::println("-------------------------------------");
    
    // 📊 测试2：逻辑运算符测试
    std::println("🧠 测试2：逻辑运算符JIT编译");
    x : int = 5;
    y : int = 15;
    z : int = 25;
    
    // 逻辑与测试
    and_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        if (x < y && y < z) {
            and_result = and_result + 1;
        };
    };
    std::println("逻辑与结果: " + and_result);
    
    // 逻辑或测试
    or_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        if (x > y || y < z) {
            or_result = or_result + 1;
        };
    };
    std::println("逻辑或结果: " + or_result);
    std::println("-------------------------------------");
    
    // 📊 测试3：复杂条件表达式测试
    std::println("🎯 测试3：复杂条件表达式JIT编译");
    p : int = 8;
    q : int = 12;
    r : int = 16;
    
    // 复杂条件组合
    complex_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        if ((p < q && q < r) || (p > r)) {
            complex_result = complex_result + 1;
        };
    };
    std::println("复杂条件结果: " + complex_result);
    std::println("-------------------------------------");
    
    // 📊 测试4：数值范围判断测试
    std::println("📊 测试4：数值范围判断优化");
    range_count : int = 0;
    for (i : 1..201) {  // 200次迭代
        if (i >= 50 && i <= 150) {
            range_count = range_count + 1;
        };
    };
    std::println("范围内数值个数: " + range_count);
    std::println("-------------------------------------");
    
    // 📊 测试5：条件计数器测试
    std::println("🔢 测试5：条件计数器优化");
    even_count : int = 0;
    odd_count : int = 0;
    for (i : 1..101) {  // 100次迭代
        if (i % 2 == 0) {
            even_count = even_count + 1;
        };
        if (i % 2 != 0) {
            odd_count = odd_count + 1;
        };
    };
    std::println("偶数个数: " + even_count);
    std::println("奇数个数: " + odd_count);
    std::println("-------------------------------------");
    
    // 📊 测试6：嵌套条件判断测试
    std::println("🎨 测试6：嵌套条件判断优化");
    nested_result : int = 0;
    for (i : 1..101) {  // 100次迭代
        if (i > 25) {
            if (i < 75) {
                if (i % 3 == 0) {
                    nested_result = nested_result + 1;
                };
            };
        };
    };
    std::println("嵌套条件结果: " + nested_result);
    std::println("=====================================");
    
    std::println("🎉 比较和逻辑运算JIT编译测试完成！");
    std::println("请查看JIT统计信息验证编译效果");
    
    return 0;
};
