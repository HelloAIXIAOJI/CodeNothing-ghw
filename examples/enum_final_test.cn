using lib <io>;
using ns std;

// 最终综合枚举测试

// 1. 简单枚举
enum Color {
    Red,
    Green,
    Blue
};

// 2. 带参数枚举
enum Result {
    Success(string, int),
    Error(string)
};

// 3. 复杂枚举
enum ApiResponse {
    Ok(int, string, bool),
    NotFound(string),
    ServerError(int, string, string),
    Unauthorized
};

fn main() : int {
    std::println("=== CodeNothing 枚举功能最终测试 ===");
    
    // 测试1：基础功能
    testBasicEnum();
    
    // 测试2：参数枚举
    testParameterEnum();
    
    // 测试3：复杂枚举
    testComplexEnum();
    
    // 测试4：枚举方法
    testEnumMethods();
    
    // 测试5：枚举在业务逻辑中的应用
    testBusinessLogic();
    
    std::println("");
    std::println("=== 所有枚举功能测试通过！ ===");
    return 0;
};

fn testBasicEnum() : void {
    std::println("");
    std::println("1. 基础枚举测试");
    std::println("================");
    
    red : Color = Color::Red;
    green : Color = Color::Green;
    blue : Color = Color::Blue;
    
    std::println("颜色枚举:");
    std::println("  " + red);
    std::println("  " + green);
    std::println("  " + blue);
    
    // 测试枚举作为函数参数
    processColor(red);
    processColor(green);
    processColor(blue);
};

fn processColor(color : Color) : void {
    colorStr : string = color.toString();
    
    if (colorStr == "Color::Red") {
        std::println("  处理红色");
    } else if (colorStr == "Color::Green") {
        std::println("  处理绿色");
    } else if (colorStr == "Color::Blue") {
        std::println("  处理蓝色");
    };
};

fn testParameterEnum() : void {
    std::println("");
    std::println("2. 参数枚举测试");
    std::println("================");
    
    success : Result = Result::Success("操作成功", 200);
    error : Result = Result::Error("文件未找到");
    
    std::println("结果枚举:");
    std::println("  " + success);
    std::println("  " + error);
    
    // 测试枚举处理
    handleResult(success);
    handleResult(error);
    
    // 测试枚举作为返回值
    result1 : Result = performOperation(true);
    result2 : Result = performOperation(false);
    
    std::println("操作结果:");
    std::println("  " + result1);
    std::println("  " + result2);
};

fn handleResult(result : Result) : void {
    resultStr : string = result.toString();
    
    if (resultStr.startsWith("Result::Success")) {
        std::println("  ✓ 操作成功");
    } else if (resultStr.startsWith("Result::Error")) {
        std::println("  ✗ 操作失败");
    };
};

fn performOperation(shouldSucceed : bool) : Result {
    if (shouldSucceed) {
        return Result::Success("数据处理完成", 100);
    } else {
        return Result::Error("网络连接超时");
    };
};

fn testComplexEnum() : void {
    std::println("");
    std::println("3. 复杂枚举测试");
    std::println("================");
    
    ok : ApiResponse = ApiResponse::Ok(200, "请求成功", true);
    notFound : ApiResponse = ApiResponse::NotFound("用户不存在");
    serverError : ApiResponse = ApiResponse::ServerError(500, "数据库错误", "连接超时");
    unauthorized : ApiResponse = ApiResponse::Unauthorized;
    
    std::println("API响应枚举:");
    std::println("  " + ok);
    std::println("  " + notFound);
    std::println("  " + serverError);
    std::println("  " + unauthorized);
    
    // 处理API响应
    handleApiResponse(ok);
    handleApiResponse(notFound);
    handleApiResponse(serverError);
    handleApiResponse(unauthorized);
};

fn handleApiResponse(response : ApiResponse) : void {
    responseStr : string = response.toString();
    
    if (responseStr.startsWith("ApiResponse::Ok")) {
        std::println("  ✓ API调用成功");
    } else if (responseStr.startsWith("ApiResponse::NotFound")) {
        std::println("  ⚠ 资源未找到");
    } else if (responseStr.startsWith("ApiResponse::ServerError")) {
        std::println("  ✗ 服务器错误");
    } else if (responseStr == "ApiResponse::Unauthorized") {
        std::println("  ⚠ 未授权访问");
    };
};

fn testEnumMethods() : void {
    std::println("");
    std::println("4. 枚举方法测试");
    std::println("================");
    
    response : ApiResponse = ApiResponse::ServerError(500, "内部错误", "数据库连接失败");
    
    // 测试toString方法
    responseStr : string = response.toString();
    std::println("toString(): " + responseStr);
    
    // 测试getEnumName方法
    enumName : string = response.getEnumName();
    std::println("getEnumName(): " + enumName);
    
    // 测试getVariantName方法
    variantName : string = response.getVariantName();
    std::println("getVariantName(): " + variantName);
    
    // 测试length方法
    fieldCount : int = response.length();
    std::println("length(): " + fieldCount);
    
    // 测试简单枚举的方法
    color : Color = Color::Red;
    colorName : string = color.getVariantName();
    colorEnum : string = color.getEnumName();
    colorFields : int = color.length();
    
    std::println("简单枚举方法:");
    std::println("  变体名: " + colorName);
    std::println("  枚举名: " + colorEnum);
    std::println("  字段数: " + colorFields);
};

fn testBusinessLogic() : void {
    std::println("");
    std::println("5. 业务逻辑应用测试");
    std::println("====================");
    
    // 模拟用户认证流程
    authResult : ApiResponse = authenticateUser("admin", "password123");
    std::println("认证结果: " + authResult);
    
    // 模拟数据处理流程
    dataResult : Result = processUserData("user123");
    std::println("数据处理: " + dataResult);
    
    // 模拟状态转换
    currentColor : Color = Color::Red;
    std::println("初始颜色: " + currentColor);
    
    nextColor : Color = getNextColor(currentColor);
    std::println("下一个颜色: " + nextColor);
    
    nextColor = getNextColor(nextColor);
    std::println("再下一个颜色: " + nextColor);
};

fn authenticateUser(username : string, password : string) : ApiResponse {
    if (username == "admin" && password == "password123") {
        return ApiResponse::Ok(200, "认证成功", true);
    } else if (username == "admin") {
        return ApiResponse::Unauthorized;
    } else {
        return ApiResponse::NotFound("用户不存在");
    };
};

fn processUserData(userId : string) : Result {
    if (userId == "user123") {
        return Result::Success("用户数据处理完成", 1);
    } else {
        return Result::Error("用户ID无效");
    };
};

fn getNextColor(current : Color) : Color {
    currentStr : string = current.toString();
    
    if (currentStr == "Color::Red") {
        return Color::Green;
    } else if (currentStr == "Color::Green") {
        return Color::Blue;
    } else {
        return Color::Red;
    };
};
