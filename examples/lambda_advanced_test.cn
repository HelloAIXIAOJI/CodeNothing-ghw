using lib <io>;
using ns std;

// Lambda 函数高级测试

fn main() : int {
    std::println("=== CodeNothing Lambda 函数高级测试 ===");
    std::println("");
    
    // 测试1：多参数Lambda
    testMultiParamLambda();
    
    // 测试2：Lambda作为函数指针
    testLambdaAsFunctionPointer();
    
    // 测试3：Lambda方法调用
    testLambdaMethods();
    
    // 测试4：高阶函数中的Lambda
    testLambdaInHigherOrderFunctions();
    
    std::println("");
    std::println("=== Lambda 函数高级测试完成 ===");
    return 0;
};

fn testMultiParamLambda() : void {
    std::println("1. 多参数Lambda测试");
    std::println("===================");
    
    // 多参数Lambda：(a, b) => a + b
    add : *fn(int, int) : int = ((a, b) => a + b);
    result1 : int = add(10, 20);
    std::println("add(10, 20) = " + result1);
    
    // 多参数Lambda：(a, b) => a * b
    multiply : *fn(int, int) : int = ((a, b) => a * b);
    result2 : int = multiply(6, 7);
    std::println("multiply(6, 7) = " + result2);
    
    std::println("");
};

fn testLambdaAsFunctionPointer() : void {
    std::println("2. Lambda作为函数指针测试");
    std::println("=========================");
    
    // Lambda赋值给函数指针变量
    mathOp : *fn(int, int) : int;
    
    // 赋值为加法Lambda
    mathOp = ((a, b) => a + b);
    result1 : int = mathOp(15, 25);
    std::println("mathOp(15, 25) [add] = " + result1);
    
    // 重新赋值为减法Lambda
    mathOp = ((a, b) => a - b);
    result2 : int = mathOp(30, 12);
    std::println("mathOp(30, 12) [subtract] = " + result2);
    
    // 重新赋值为乘法Lambda
    mathOp = ((a, b) => a * b);
    result3 : int = mathOp(8, 9);
    std::println("mathOp(8, 9) [multiply] = " + result3);
    
    std::println("");
};

fn testLambdaMethods() : void {
    std::println("3. Lambda方法调用测试");
    std::println("=====================");
    
    lambda : *fn(int, int) : int = ((x, y) => x + y);
    
    std::println("Lambda函数信息:");
    std::println("  toString(): " + lambda.toString());
    std::println("  getName(): " + lambda.getName());
    std::println("  getParamCount(): " + lambda.getParamCount());
    std::println("  getReturnType(): " + lambda.getReturnType());
    std::println("  isNull(): " + lambda.isNull());
    std::println("  isLambda(): " + lambda.isLambda());
    
    std::println("");
};

fn testLambdaInHigherOrderFunctions() : void {
    std::println("4. 高阶函数中的Lambda测试");
    std::println("=========================");
    
    // 使用Lambda作为参数
    result1 : int = applyOperation(10, 5, ((a, b) => a + b));
    std::println("applyOperation(10, 5, add_lambda) = " + result1);
    
    result2 : int = applyOperation(10, 5, ((a, b) => a * b));
    std::println("applyOperation(10, 5, multiply_lambda) = " + result2);
    
    result3 : int = applyOperation(10, 5, ((a, b) => a - b));
    std::println("applyOperation(10, 5, subtract_lambda) = " + result3);
    
    std::println("");
};

// 高阶函数：接受Lambda作为参数
fn applyOperation(a : int, b : int, operation : *fn(int, int) : int) : int {
    std::println("应用操作: " + operation.getName());
    return operation(a, b);
};
